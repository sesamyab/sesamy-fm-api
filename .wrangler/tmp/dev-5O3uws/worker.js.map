{
  "version": 3,
  "sources": ["../../../node_modules/unenv/dist/runtime/_internal/utils.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/perf_hooks/performance.mjs", "../../../node_modules/unenv/dist/runtime/node/perf_hooks.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/polyfill/performance.mjs", "../../../node_modules/unenv/dist/runtime/mock/noop.mjs", "../../../node_modules/unenv/dist/runtime/node/console.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/node/console.mjs", "../../../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-console", "../../../node_modules/unenv/dist/runtime/node/internal/process/hrtime.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/tty/read-stream.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/tty/write-stream.mjs", "../../../node_modules/unenv/dist/runtime/node/tty.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/process/node-version.mjs", "../../../node_modules/unenv/dist/runtime/node/internal/process/process.mjs", "../../../node_modules/@cloudflare/unenv-preset/dist/runtime/node/process.mjs", "../../../node_modules/wrangler/_virtual_unenv_global_polyfill-@cloudflare-unenv-preset-node-process", "../../../node_modules/hono/dist/http-exception.js", "../../../node_modules/zod/v3/helpers/util.js", "../../../node_modules/zod/v3/ZodError.js", "../../../node_modules/zod/v3/locales/en.js", "../../../node_modules/zod/v3/errors.js", "../../../node_modules/zod/v3/helpers/parseUtil.js", "../../../node_modules/zod/v3/helpers/typeAliases.js", "../../../node_modules/zod/v3/helpers/errorUtil.js", "../../../node_modules/zod/v3/types.js", "../../../node_modules/zod/v3/external.js", "../../../node_modules/zod/index.js", "../../../src/common/errors.ts", "../../../node_modules/src/entity.ts", "../../../node_modules/src/logger.ts", "../../../node_modules/src/table.ts", "../../../node_modules/src/column.ts", "../../../node_modules/src/pg-core/table.ts", "../../../node_modules/src/pg-core/primary-keys.ts", "../../../node_modules/src/column-builder.ts", "../../../node_modules/src/pg-core/foreign-keys.ts", "../../../node_modules/src/tracing-utils.ts", "../../../node_modules/src/pg-core/unique-constraint.ts", "../../../node_modules/src/pg-core/utils/array.ts", "../../../node_modules/src/pg-core/columns/common.ts", "../../../node_modules/src/pg-core/columns/enum.ts", "../../../node_modules/src/subquery.ts", "../../../node_modules/drizzle-orm/version.js", "../../../node_modules/src/tracing.ts", "../../../node_modules/src/view-common.ts", "../../../node_modules/src/sql/sql.ts", "../../../node_modules/src/sql/expressions/conditions.ts", "../../../node_modules/src/sql/expressions/select.ts", "../../../node_modules/src/sql/expressions/index.ts", "../../../node_modules/src/relations.ts", "../../../node_modules/src/alias.ts", "../../../node_modules/src/selection-proxy.ts", "../../../node_modules/src/query-promise.ts", "../../../node_modules/src/sqlite-core/table.ts", "../../../node_modules/src/utils.ts", "../../../node_modules/src/sqlite-core/query-builders/delete.ts", "../../../node_modules/src/sqlite-core/query-builders/insert.ts", "../../../node_modules/src/errors.ts", "../../../node_modules/src/sql/functions/aggregate.ts", "../../../node_modules/src/sql/functions/vector.ts", "../../../node_modules/src/sql/functions/index.ts", "../../../node_modules/src/sql/index.ts", "../../../node_modules/src/sqlite-core/foreign-keys.ts", "../../../node_modules/src/sqlite-core/unique-constraint.ts", "../../../node_modules/src/sqlite-core/columns/common.ts", "../../../node_modules/src/sqlite-core/columns/blob.ts", "../../../node_modules/src/sqlite-core/columns/custom.ts", "../../../node_modules/src/sqlite-core/columns/integer.ts", "../../../node_modules/src/sqlite-core/columns/numeric.ts", "../../../node_modules/src/sqlite-core/columns/real.ts", "../../../node_modules/src/sqlite-core/columns/text.ts", "../../../node_modules/src/sqlite-core/columns/index.ts", "../../../node_modules/src/sqlite-core/view-base.ts", "../../../node_modules/src/sqlite-core/dialect.ts", "../../../node_modules/src/query-builders/query-builder.ts", "../../../node_modules/src/sqlite-core/query-builders/select.ts", "../../../node_modules/src/sqlite-core/query-builders/query-builder.ts", "../../../node_modules/drizzle-orm/sqlite-core/query-builders/select.types.js", "../../../node_modules/src/sqlite-core/query-builders/update.ts", "../../../node_modules/src/sqlite-core/query-builders/index.ts", "../../../node_modules/src/sqlite-core/query-builders/query.ts", "../../../node_modules/src/sqlite-core/query-builders/raw.ts", "../../../node_modules/src/sqlite-core/db.ts", "../../../node_modules/src/sqlite-core/alias.ts", "../../../node_modules/src/sqlite-core/checks.ts", "../../../node_modules/src/sqlite-core/indexes.ts", "../../../node_modules/src/sqlite-core/primary-keys.ts", "../../../node_modules/src/sqlite-core/session.ts", "../../../node_modules/drizzle-orm/sqlite-core/subquery.js", "../../../node_modules/src/sqlite-core/view-common.ts", "../../../node_modules/src/sqlite-core/utils.ts", "../../../node_modules/src/sqlite-core/view.ts", "../../../node_modules/src/sqlite-core/index.ts", "../../../node_modules/src/d1/session.ts", "../../../node_modules/src/d1/driver.ts", "../../../node_modules/src/d1/index.ts", "../../../node_modules/src/expressions.ts", "../../../node_modules/drizzle-orm/operations.js", "../../../node_modules/src/index.ts", "../../../node_modules/src/mysql-core/alias.ts", "../../../node_modules/src/mysql-core/checks.ts", "../../../node_modules/src/mysql-core/table.ts", "../../../node_modules/src/mysql-core/foreign-keys.ts", "../../../node_modules/src/mysql-core/unique-constraint.ts", "../../../node_modules/src/mysql-core/columns/common.ts", "../../../node_modules/src/mysql-core/columns/bigint.ts", "../../../node_modules/src/mysql-core/columns/binary.ts", "../../../node_modules/src/mysql-core/columns/boolean.ts", "../../../node_modules/src/mysql-core/columns/char.ts", "../../../node_modules/src/mysql-core/columns/custom.ts", "../../../node_modules/src/mysql-core/columns/date.ts", "../../../node_modules/src/mysql-core/columns/datetime.ts", "../../../node_modules/src/mysql-core/columns/decimal.ts", "../../../node_modules/src/mysql-core/columns/double.ts", "../../../node_modules/src/mysql-core/columns/enum.ts", "../../../node_modules/src/mysql-core/columns/float.ts", "../../../node_modules/src/mysql-core/columns/int.ts", "../../../node_modules/src/mysql-core/columns/json.ts", "../../../node_modules/src/mysql-core/columns/mediumint.ts", "../../../node_modules/src/mysql-core/columns/real.ts", "../../../node_modules/src/mysql-core/columns/serial.ts", "../../../node_modules/src/mysql-core/columns/smallint.ts", "../../../node_modules/src/mysql-core/columns/text.ts", "../../../node_modules/src/mysql-core/columns/time.ts", "../../../node_modules/src/mysql-core/columns/date.common.ts", "../../../node_modules/src/mysql-core/columns/timestamp.ts", "../../../node_modules/src/mysql-core/columns/tinyint.ts", "../../../node_modules/src/mysql-core/columns/varbinary.ts", "../../../node_modules/src/mysql-core/columns/varchar.ts", "../../../node_modules/src/mysql-core/columns/year.ts", "../../../node_modules/src/mysql-core/columns/index.ts", "../../../node_modules/src/mysql-core/query-builders/delete.ts", "../../../node_modules/src/mysql-core/query-builders/insert.ts", "../../../node_modules/src/mysql-core/view-base.ts", "../../../node_modules/src/mysql-core/dialect.ts", "../../../node_modules/src/mysql-core/query-builders/select.ts", "../../../node_modules/src/mysql-core/query-builders/query-builder.ts", "../../../node_modules/drizzle-orm/mysql-core/query-builders/select.types.js", "../../../node_modules/src/mysql-core/query-builders/update.ts", "../../../node_modules/src/mysql-core/query-builders/index.ts", "../../../node_modules/src/mysql-core/query-builders/query.ts", "../../../node_modules/src/mysql-core/db.ts", "../../../node_modules/src/mysql-core/indexes.ts", "../../../node_modules/src/mysql-core/primary-keys.ts", "../../../node_modules/src/mysql-core/view-common.ts", "../../../node_modules/src/mysql-core/view.ts", "../../../node_modules/src/mysql-core/schema.ts", "../../../node_modules/src/mysql-core/session.ts", "../../../node_modules/drizzle-orm/mysql-core/subquery.js", "../../../node_modules/src/mysql-core/utils.ts", "../../../node_modules/src/mysql-core/index.ts", "../../../node_modules/src/pg-core/alias.ts", "../../../node_modules/src/pg-core/checks.ts", "../../../node_modules/src/pg-core/columns/int.common.ts", "../../../node_modules/src/pg-core/columns/bigint.ts", "../../../node_modules/src/pg-core/columns/bigserial.ts", "../../../node_modules/src/pg-core/columns/boolean.ts", "../../../node_modules/src/pg-core/columns/char.ts", "../../../node_modules/src/pg-core/columns/cidr.ts", "../../../node_modules/src/pg-core/columns/custom.ts", "../../../node_modules/src/pg-core/columns/date.common.ts", "../../../node_modules/src/pg-core/columns/date.ts", "../../../node_modules/src/pg-core/columns/double-precision.ts", "../../../node_modules/src/pg-core/columns/inet.ts", "../../../node_modules/src/pg-core/columns/integer.ts", "../../../node_modules/src/pg-core/columns/interval.ts", "../../../node_modules/src/pg-core/columns/json.ts", "../../../node_modules/src/pg-core/columns/jsonb.ts", "../../../node_modules/src/pg-core/columns/line.ts", "../../../node_modules/src/pg-core/columns/macaddr.ts", "../../../node_modules/src/pg-core/columns/macaddr8.ts", "../../../node_modules/src/pg-core/columns/numeric.ts", "../../../node_modules/src/pg-core/columns/point.ts", "../../../node_modules/src/pg-core/columns/postgis_extension/utils.ts", "../../../node_modules/src/pg-core/columns/postgis_extension/geometry.ts", "../../../node_modules/src/pg-core/columns/real.ts", "../../../node_modules/src/pg-core/columns/serial.ts", "../../../node_modules/src/pg-core/columns/smallint.ts", "../../../node_modules/src/pg-core/columns/smallserial.ts", "../../../node_modules/src/pg-core/columns/text.ts", "../../../node_modules/src/pg-core/columns/time.ts", "../../../node_modules/src/pg-core/columns/timestamp.ts", "../../../node_modules/src/pg-core/columns/uuid.ts", "../../../node_modules/src/pg-core/columns/varchar.ts", "../../../node_modules/src/pg-core/columns/vector_extension/bit.ts", "../../../node_modules/src/pg-core/columns/vector_extension/halfvec.ts", "../../../node_modules/src/pg-core/columns/vector_extension/sparsevec.ts", "../../../node_modules/src/pg-core/columns/vector_extension/vector.ts", "../../../node_modules/src/pg-core/columns/index.ts", "../../../node_modules/src/pg-core/query-builders/delete.ts", "../../../node_modules/src/pg-core/query-builders/insert.ts", "../../../node_modules/src/pg-core/view-base.ts", "../../../node_modules/src/pg-core/dialect.ts", "../../../node_modules/src/pg-core/query-builders/select.ts", "../../../node_modules/src/pg-core/query-builders/query-builder.ts", "../../../node_modules/src/pg-core/query-builders/refresh-materialized-view.ts", "../../../node_modules/drizzle-orm/pg-core/query-builders/select.types.js", "../../../node_modules/src/pg-core/query-builders/update.ts", "../../../node_modules/src/pg-core/query-builders/index.ts", "../../../node_modules/src/pg-core/query-builders/query.ts", "../../../node_modules/src/pg-core/query-builders/raw.ts", "../../../node_modules/src/pg-core/db.ts", "../../../node_modules/src/pg-core/indexes.ts", "../../../node_modules/src/pg-core/sequence.ts", "../../../node_modules/src/pg-core/view-common.ts", "../../../node_modules/src/pg-core/view.ts", "../../../node_modules/src/pg-core/schema.ts", "../../../node_modules/src/pg-core/session.ts", "../../../node_modules/drizzle-orm/pg-core/subquery.js", "../../../node_modules/src/pg-core/utils.ts", "../../../node_modules/src/pg-core/utils/index.ts", "../../../node_modules/src/pg-core/index.ts", "../../../node_modules/src/index.ts", "../../../src/database/schema.ts", "../../../src/database/client.ts", "../../../src/tasks/repository.ts", "../../../src/workflows/repository.ts", "../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../node_modules/uuid/dist/esm-browser/native.js", "../../../node_modules/uuid/dist/esm-browser/v4.js", "../../../node_modules/uuid/dist/esm-browser/index.js", "../../../src/workflows/service.ts", "../../../src/tasks/service.ts", "../../../src/workflows/import-show/types.ts", "../../../src/shows/repository.ts", "../bundle-tHy9MI/middleware-loader.entry.ts", "../bundle-tHy9MI/middleware-insertion-facade.js", "../../../src/worker.ts", "../../../src/app.ts", "../../../node_modules/@hono/zod-openapi/dist/index.mjs", "../../../node_modules/@asteasolutions/zod-to-openapi/dist/index.mjs", "../../../node_modules/@hono/zod-validator/dist/esm/index.js", "../../../node_modules/hono/dist/validator/index.js", "../../../node_modules/hono/dist/validator/validator.js", "../../../node_modules/hono/dist/helper/cookie/index.js", "../../../node_modules/hono/dist/utils/cookie.js", "../../../node_modules/hono/dist/utils/url.js", "../../../node_modules/hono/dist/utils/buffer.js", "../../../node_modules/hono/dist/utils/crypto.js", "../../../node_modules/hono/dist/index.js", "../../../node_modules/hono/dist/hono.js", "../../../node_modules/hono/dist/hono-base.js", "../../../node_modules/hono/dist/compose.js", "../../../node_modules/hono/dist/context.js", "../../../node_modules/hono/dist/request.js", "../../../node_modules/hono/dist/request/constants.js", "../../../node_modules/hono/dist/utils/body.js", "../../../node_modules/hono/dist/utils/html.js", "../../../node_modules/hono/dist/router.js", "../../../node_modules/hono/dist/utils/constants.js", "../../../node_modules/hono/dist/router/reg-exp-router/index.js", "../../../node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/hono/dist/router/smart-router/index.js", "../../../node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/hono/dist/router/trie-router/index.js", "../../../node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/@hono/swagger-ui/dist/index.js", "../../../node_modules/hono/dist/helper/html/index.js", "../../../node_modules/hono/dist/middleware/cors/index.js", "../../../node_modules/hono/dist/middleware/logger/index.js", "../../../node_modules/hono/dist/utils/color.js", "../../../src/auth/middleware.ts", "../../../node_modules/hono/dist/helper/factory/index.js", "../../../node_modules/hono/dist/middleware/jwt/index.js", "../../../node_modules/hono/dist/middleware/jwt/jwt.js", "../../../node_modules/hono/dist/utils/jwt/index.js", "../../../node_modules/hono/dist/utils/jwt/jwt.js", "../../../node_modules/hono/dist/utils/encode.js", "../../../node_modules/hono/dist/utils/jwt/jwa.js", "../../../node_modules/hono/dist/utils/jwt/jws.js", "../../../node_modules/hono/dist/helper/adapter/index.js", "../../../node_modules/hono/dist/utils/jwt/types.js", "../../../node_modules/hono/dist/utils/jwt/utf8.js", "../../../src/health/routes.ts", "../../../src/shows/routes.ts", "../../../src/shows/schemas.ts", "../../../src/workflows/import-show/rss-parser.ts", "../../../src/episodes/routes.ts", "../../../src/episodes/schemas.ts", "../../../src/audio/routes.ts", "../../../src/audio/schemas.ts", "../../../src/feed/routes.ts", "../../../src/tasks/routes.ts", "../../../src/workflows/routes.ts", "../../../src/storage/routes.ts", "../../../src/utils/storage.ts", "../../../src/campaigns/routes.ts", "../../../src/campaigns/schemas.ts", "../../../src/organizations/routes.ts", "../../../src/events/publisher.ts", "../../../src/shows/service.ts", "../../../src/episodes/repository.ts", "../../../src/episodes/service.ts", "../../../src/audio/service.ts", "../../../src/audio/repository.ts", "../../../src/utils/index.ts", "../../../src/utils/r2-presigned-url.ts", "../../../node_modules/aws4fetch/dist/aws4fetch.esm.mjs", "../../../src/images/service.ts", "../../../src/campaigns/repository.ts", "../../../src/campaigns/service.ts", "../../../src/campaigns/creative-upload-service.ts", "../../../src/organizations/service.ts", "../../../src/auth/auth0-service.ts", "../../../node_modules/auth0/src/management/management-client.ts", "../../../node_modules/auth0/src/management/__generated/index.ts", "../../../node_modules/auth0/src/management/__generated/managers/actions-manager.ts", "../../../node_modules/auth0/src/lib/runtime.ts", "../../../node_modules/auth0/src/lib/retry.ts", "../../../node_modules/auth0/src/lib/errors.ts", "../../../node_modules/auth0/src/lib/models.ts", "../../../node_modules/auth0/src/management/__generated/managers/anomaly-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/attack-protection-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/blacklists-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/branding-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/client-grants-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/clients-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/connections-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/custom-domains-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/device-credentials-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/email-templates-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/emails-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/flows-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/forms-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/grants-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/guardian-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/hooks-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/jobs-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/keys-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/log-streams-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/logs-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/network-acls-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/organizations-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/prompts-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/refresh-tokens-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/resource-servers-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/risk-assessments-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/roles-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/rules-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/rules-configs-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/self-service-profiles-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/sessions-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/stats-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/tenants-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/tickets-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/token-exchange-profiles-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/user-blocks-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/users-manager.ts", "../../../node_modules/auth0/src/management/__generated/managers/users-by-email-manager.ts", "../../../node_modules/auth0/src/management/token-provider-middleware.ts", "../../../node_modules/auth0/src/management/token-provider.ts", "../../../node_modules/auth0/src/auth/index.ts", "../../../node_modules/auth0/src/auth/backchannel.ts", "../../../node_modules/auth0/src/auth/base-auth-api.ts", "../../../node_modules/auth0/src/auth/client-authentication.ts", "../../../node_modules/auth0/node_modules/jose/dist/browser/index.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/base64url.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/buffer_utils.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/webcrypto.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/util/errors.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/crypto_key.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/invalid_key_input.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/is_key_like.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/is_disjoint.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/is_object.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/check_key_length.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/key/import.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/asn1.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/jwk_to_key.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/check_key_type.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/validate_crit.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/validate_algorithms.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jws/compact/verify.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jws/flattened/verify.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/verify.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/subtle_dsa.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jwt/verify.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/jwt_claims_set.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/epoch.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/lib/secs.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jws/compact/sign.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jws/flattened/sign.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/sign.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jwt/sign.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jwt/produce.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jwks/local.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/jwks/remote.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/runtime/fetch_jwks.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/util/decode_protected_header.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/util/base64url.js", "../../../node_modules/auth0/node_modules/jose/dist/browser/util/decode_jwt.js", "../../../node_modules/auth0/src/lib/middleware/telemetry-middleware.ts", "../../../node_modules/auth0/src/utils.ts", "../../../node_modules/auth0/src/version.ts", "../../../node_modules/auth0/src/auth/database.ts", "../../../node_modules/auth0/src/auth/oauth.ts", "../../../node_modules/auth0/src/auth/id-token-validator.ts", "../../../node_modules/auth0/src/auth/passwordless.ts", "../../../node_modules/auth0/src/auth/tokenExchange.ts", "../../../src/tasks/processor.ts", "../../../src/encoding/container.ts", "../../../node_modules/@cloudflare/containers/src/index.ts", "../../../node_modules/@cloudflare/containers/src/lib/container.ts", "../../../node_modules/@cloudflare/containers/src/lib/helpers.ts", "../../../node_modules/@cloudflare/containers/src/lib/utils.ts", "../../../src/workflows/audio-processing/index.ts", "../../../src/workflows/audio-processing/types.ts", "../../../src/workflows/audio-processing/initialize-workflow.ts", "../../../src/workflows/audio-processing/tts-encode.ts", "../../../src/workflows/audio-processing/progress-reporter.ts", "../../../src/workflows/audio-processing/audio-chunking.ts", "../../../src/workflows/audio-processing/transcribe-chunks.ts", "../../../src/workflows/audio-processing/cleanup-resources.ts", "../../../src/workflows/audio-processing/utils.ts", "../../../src/workflows/import-show/index.ts", "../../../src/workflows/import-show/step-classes.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/markus/Projects/sesamy/sesamy-fm-api/.wrangler/tmp/dev-5O3uws",
  "sourcesContent": ["/* @__NO_SIDE_EFFECTS__ */\nexport function rawHeaders(headers) {\n\tconst rawHeaders = [];\n\tfor (const key in headers) {\n\t\tif (Array.isArray(headers[key])) {\n\t\t\tfor (const h of headers[key]) {\n\t\t\t\trawHeaders.push(key, h);\n\t\t\t}\n\t\t} else {\n\t\t\trawHeaders.push(key, headers[key]);\n\t\t}\n\t}\n\treturn rawHeaders;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function mergeFns(...functions) {\n\treturn function(...args) {\n\t\tfor (const fn of functions) {\n\t\t\tfn(...args);\n\t\t}\n\t};\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function createNotImplementedError(name) {\n\treturn new Error(`[unenv] ${name} is not implemented yet!`);\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplemented(name) {\n\tconst fn = () => {\n\t\tthrow createNotImplementedError(name);\n\t};\n\treturn Object.assign(fn, { __unenv__: true });\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedAsync(name) {\n\tconst fn = notImplemented(name);\n\tfn.__promisify__ = () => notImplemented(name + \".__promisify__\");\n\tfn.native = fn;\n\treturn fn;\n}\n/* @__NO_SIDE_EFFECTS__ */\nexport function notImplementedClass(name) {\n\treturn class {\n\t\t__unenv__ = true;\n\t\tconstructor() {\n\t\t\tthrow new Error(`[unenv] ${name} is not implemented yet!`);\n\t\t}\n\t};\n}\n", "import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\nconst _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();\nconst _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;\nconst nodeTiming = {\n\tname: \"node\",\n\tentryType: \"node\",\n\tstartTime: 0,\n\tduration: 0,\n\tnodeStart: 0,\n\tv8Start: 0,\n\tbootstrapComplete: 0,\n\tenvironment: 0,\n\tloopStart: 0,\n\tloopExit: 0,\n\tidleTime: 0,\n\tuvMetricsInfo: {\n\t\tloopCount: 0,\n\t\tevents: 0,\n\t\teventsWaiting: 0\n\t},\n\tdetail: undefined,\n\ttoJSON() {\n\t\treturn this;\n\t}\n};\n// PerformanceEntry\nexport class PerformanceEntry {\n\t__unenv__ = true;\n\tdetail;\n\tentryType = \"event\";\n\tname;\n\tstartTime;\n\tconstructor(name, options) {\n\t\tthis.name = name;\n\t\tthis.startTime = options?.startTime || _performanceNow();\n\t\tthis.detail = options?.detail;\n\t}\n\tget duration() {\n\t\treturn _performanceNow() - this.startTime;\n\t}\n\ttoJSON() {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tentryType: this.entryType,\n\t\t\tstartTime: this.startTime,\n\t\t\tduration: this.duration,\n\t\t\tdetail: this.detail\n\t\t};\n\t}\n}\n// PerformanceMark\nexport const PerformanceMark = class PerformanceMark extends PerformanceEntry {\n\tentryType = \"mark\";\n\tconstructor() {\n\t\t// @ts-ignore\n\t\tsuper(...arguments);\n\t}\n\tget duration() {\n\t\treturn 0;\n\t}\n};\n// PerformanceMark\nexport class PerformanceMeasure extends PerformanceEntry {\n\tentryType = \"measure\";\n}\n// PerformanceResourceTiming\nexport class PerformanceResourceTiming extends PerformanceEntry {\n\tentryType = \"resource\";\n\tserverTiming = [];\n\tconnectEnd = 0;\n\tconnectStart = 0;\n\tdecodedBodySize = 0;\n\tdomainLookupEnd = 0;\n\tdomainLookupStart = 0;\n\tencodedBodySize = 0;\n\tfetchStart = 0;\n\tinitiatorType = \"\";\n\tname = \"\";\n\tnextHopProtocol = \"\";\n\tredirectEnd = 0;\n\tredirectStart = 0;\n\trequestStart = 0;\n\tresponseEnd = 0;\n\tresponseStart = 0;\n\tsecureConnectionStart = 0;\n\tstartTime = 0;\n\ttransferSize = 0;\n\tworkerStart = 0;\n\tresponseStatus = 0;\n}\n// PerformanceObserverEntryList\nexport class PerformanceObserverEntryList {\n\t__unenv__ = true;\n\tgetEntries() {\n\t\treturn [];\n\t}\n\tgetEntriesByName(_name, _type) {\n\t\treturn [];\n\t}\n\tgetEntriesByType(type) {\n\t\treturn [];\n\t}\n}\n// Performance\nexport class Performance {\n\t__unenv__ = true;\n\ttimeOrigin = _timeOrigin;\n\teventCounts = new Map();\n\t_entries = [];\n\t_resourceTimingBufferSize = 0;\n\tnavigation = undefined;\n\ttiming = undefined;\n\ttimerify(_fn, _options) {\n\t\tthrow createNotImplementedError(\"Performance.timerify\");\n\t}\n\tget nodeTiming() {\n\t\treturn nodeTiming;\n\t}\n\teventLoopUtilization() {\n\t\treturn {};\n\t}\n\tmarkResourceTiming() {\n\t\t// TODO: create a new PerformanceResourceTiming entry\n\t\t// so that performance.getEntries, getEntriesByName, and getEntriesByType return it\n\t\t// see: https://nodejs.org/api/perf_hooks.html#performancemarkresourcetimingtiminginfo-requestedurl-initiatortype-global-cachemode-bodyinfo-responsestatus-deliverytype\n\t\treturn new PerformanceResourceTiming(\"\");\n\t}\n\tonresourcetimingbufferfull = null;\n\tnow() {\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n\t\tif (this.timeOrigin === _timeOrigin) {\n\t\t\treturn _performanceNow();\n\t\t}\n\t\treturn Date.now() - this.timeOrigin;\n\t}\n\tclearMarks(markName) {\n\t\tthis._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== \"mark\");\n\t}\n\tclearMeasures(measureName) {\n\t\tthis._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== \"measure\");\n\t}\n\tclearResourceTimings() {\n\t\tthis._entries = this._entries.filter((e) => e.entryType !== \"resource\" || e.entryType !== \"navigation\");\n\t}\n\tgetEntries() {\n\t\treturn this._entries;\n\t}\n\tgetEntriesByName(name, type) {\n\t\treturn this._entries.filter((e) => e.name === name && (!type || e.entryType === type));\n\t}\n\tgetEntriesByType(type) {\n\t\treturn this._entries.filter((e) => e.entryType === type);\n\t}\n\tmark(name, options) {\n\t\t// @ts-expect-error constructor is not protected\n\t\tconst entry = new PerformanceMark(name, options);\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tmeasure(measureName, startOrMeasureOptions, endMark) {\n\t\tlet start;\n\t\tlet end;\n\t\tif (typeof startOrMeasureOptions === \"string\") {\n\t\t\tstart = this.getEntriesByName(startOrMeasureOptions, \"mark\")[0]?.startTime;\n\t\t\tend = this.getEntriesByName(endMark, \"mark\")[0]?.startTime;\n\t\t} else {\n\t\t\tstart = Number.parseFloat(startOrMeasureOptions?.start) || this.now();\n\t\t\tend = Number.parseFloat(startOrMeasureOptions?.end) || this.now();\n\t\t}\n\t\tconst entry = new PerformanceMeasure(measureName, {\n\t\t\tstartTime: start,\n\t\t\tdetail: {\n\t\t\t\tstart,\n\t\t\t\tend\n\t\t\t}\n\t\t});\n\t\tthis._entries.push(entry);\n\t\treturn entry;\n\t}\n\tsetResourceTimingBufferSize(maxSize) {\n\t\tthis._resourceTimingBufferSize = maxSize;\n\t}\n\taddEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.addEventListener\");\n\t}\n\tremoveEventListener(type, listener, options) {\n\t\tthrow createNotImplementedError(\"Performance.removeEventListener\");\n\t}\n\tdispatchEvent(event) {\n\t\tthrow createNotImplementedError(\"Performance.dispatchEvent\");\n\t}\n\ttoJSON() {\n\t\treturn this;\n\t}\n}\n// PerformanceObserver\nexport class PerformanceObserver {\n\t__unenv__ = true;\n\tstatic supportedEntryTypes = [];\n\t_callback = null;\n\tconstructor(callback) {\n\t\tthis._callback = callback;\n\t}\n\ttakeRecords() {\n\t\treturn [];\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.disconnect\");\n\t}\n\tobserve(options) {\n\t\tthrow createNotImplementedError(\"PerformanceObserver.observe\");\n\t}\n\tbind(fn) {\n\t\treturn fn;\n\t}\n\trunInAsyncScope(fn, thisArg, ...args) {\n\t\treturn fn.call(thisArg, ...args);\n\t}\n\tasyncId() {\n\t\treturn 0;\n\t}\n\ttriggerAsyncId() {\n\t\treturn 0;\n\t}\n\temitDestroy() {\n\t\treturn this;\n\t}\n}\n// workerd implements a subset of globalThis.performance (as of last check, only timeOrigin set to 0 + now() implemented)\n// We already use performance.now() from globalThis.performance, if provided (see top of this file)\n// If we detect this condition, we can just use polyfill instead.\nexport const performance = globalThis.performance && \"addEventListener\" in globalThis.performance ? globalThis.performance : new Performance();\n", "import { IntervalHistogram, RecordableHistogram } from \"./internal/perf_hooks/histogram.mjs\";\nimport { performance, Performance, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceObserverEntryList, PerformanceObserver, PerformanceResourceTiming } from \"./internal/perf_hooks/performance.mjs\";\nexport * from \"./internal/perf_hooks/performance.mjs\";\n// prettier-ignore\nimport { NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, NODE_PERFORMANCE_ENTRY_TYPE_GC, NODE_PERFORMANCE_ENTRY_TYPE_HTTP, NODE_PERFORMANCE_ENTRY_TYPE_HTTP2, NODE_PERFORMANCE_ENTRY_TYPE_NET, NODE_PERFORMANCE_ENTRY_TYPE_DNS, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN, NODE_PERFORMANCE_MILESTONE_ENVIRONMENT, NODE_PERFORMANCE_MILESTONE_NODE_START, NODE_PERFORMANCE_MILESTONE_V8_START, NODE_PERFORMANCE_MILESTONE_LOOP_START, NODE_PERFORMANCE_MILESTONE_LOOP_EXIT, NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE } from \"./internal/perf_hooks/constants.mjs\";\n// prettier-ignore\nexport const constants = {\n\tNODE_PERFORMANCE_GC_MAJOR,\n\tNODE_PERFORMANCE_GC_MINOR,\n\tNODE_PERFORMANCE_GC_INCREMENTAL,\n\tNODE_PERFORMANCE_GC_WEAKCB,\n\tNODE_PERFORMANCE_GC_FLAGS_NO,\n\tNODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED,\n\tNODE_PERFORMANCE_GC_FLAGS_FORCED,\n\tNODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING,\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE,\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY,\n\tNODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE,\n\tNODE_PERFORMANCE_ENTRY_TYPE_GC,\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP,\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP2,\n\tNODE_PERFORMANCE_ENTRY_TYPE_NET,\n\tNODE_PERFORMANCE_ENTRY_TYPE_DNS,\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP,\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN,\n\tNODE_PERFORMANCE_MILESTONE_ENVIRONMENT,\n\tNODE_PERFORMANCE_MILESTONE_NODE_START,\n\tNODE_PERFORMANCE_MILESTONE_V8_START,\n\tNODE_PERFORMANCE_MILESTONE_LOOP_START,\n\tNODE_PERFORMANCE_MILESTONE_LOOP_EXIT,\n\tNODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE\n};\nexport const monitorEventLoopDelay = function(_options) {\n\treturn new IntervalHistogram();\n};\nexport const createHistogram = function(_options) {\n\treturn new RecordableHistogram();\n};\nexport default {\n\tPerformance,\n\tPerformanceMark,\n\tPerformanceEntry,\n\tPerformanceMeasure,\n\tPerformanceObserverEntryList,\n\tPerformanceObserver,\n\tPerformanceResourceTiming,\n\tperformance,\n\tconstants,\n\tcreateHistogram,\n\tmonitorEventLoopDelay\n};\n", "import {\n  performance,\n  Performance,\n  PerformanceEntry,\n  PerformanceMark,\n  PerformanceMeasure,\n  PerformanceObserver,\n  PerformanceObserverEntryList,\n  PerformanceResourceTiming\n} from \"node:perf_hooks\";\nglobalThis.performance = performance;\nglobalThis.Performance = Performance;\nglobalThis.PerformanceEntry = PerformanceEntry;\nglobalThis.PerformanceMark = PerformanceMark;\nglobalThis.PerformanceMeasure = PerformanceMeasure;\nglobalThis.PerformanceObserver = PerformanceObserver;\nglobalThis.PerformanceObserverEntryList = PerformanceObserverEntryList;\nglobalThis.PerformanceResourceTiming = PerformanceResourceTiming;\n", "export default Object.assign(() => {}, { __unenv__: true });\n", "import { Writable } from \"node:stream\";\nimport noop from \"../mock/noop.mjs\";\nimport { notImplemented, notImplementedClass } from \"../_internal/utils.mjs\";\nconst _console = globalThis.console;\n// undocumented public APIs\nexport const _ignoreErrors = true;\nexport const _stderr = new Writable();\nexport const _stdout = new Writable();\nexport const log = _console?.log ?? noop;\nexport const info = _console?.info ?? log;\nexport const trace = _console?.trace ?? info;\nexport const debug = _console?.debug ?? log;\nexport const table = _console?.table ?? log;\nexport const error = _console?.error ?? log;\nexport const warn = _console?.warn ?? error;\n// https://developer.chrome.com/docs/devtools/console/api#createtask\nexport const createTask = _console?.createTask ?? /* @__PURE__ */ notImplemented(\"console.createTask\");\nexport const assert = /* @__PURE__ */ notImplemented(\"console.assert\");\n// noop\nexport const clear = _console?.clear ?? noop;\nexport const count = _console?.count ?? noop;\nexport const countReset = _console?.countReset ?? noop;\nexport const dir = _console?.dir ?? noop;\nexport const dirxml = _console?.dirxml ?? noop;\nexport const group = _console?.group ?? noop;\nexport const groupEnd = _console?.groupEnd ?? noop;\nexport const groupCollapsed = _console?.groupCollapsed ?? noop;\nexport const profile = _console?.profile ?? noop;\nexport const profileEnd = _console?.profileEnd ?? noop;\nexport const time = _console?.time ?? noop;\nexport const timeEnd = _console?.timeEnd ?? noop;\nexport const timeLog = _console?.timeLog ?? noop;\nexport const timeStamp = _console?.timeStamp ?? noop;\nexport const Console = _console?.Console ?? /* @__PURE__ */ notImplementedClass(\"console.Console\");\nexport const _times = /* @__PURE__ */ new Map();\nexport function context() {\n\t// TODO: Should be Console with all the methods\n\treturn _console;\n}\nexport const _stdoutErrorHandler = noop;\nexport const _stderrErrorHandler = noop;\nexport default {\n\t_times,\n\t_ignoreErrors,\n\t_stdoutErrorHandler,\n\t_stderrErrorHandler,\n\t_stdout,\n\t_stderr,\n\tassert,\n\tclear,\n\tConsole,\n\tcount,\n\tcountReset,\n\tdebug,\n\tdir,\n\tdirxml,\n\terror,\n\tcontext,\n\tcreateTask,\n\tgroup,\n\tgroupEnd,\n\tgroupCollapsed,\n\tinfo,\n\tlog,\n\tprofile,\n\tprofileEnd,\n\ttable,\n\ttime,\n\ttimeEnd,\n\ttimeLog,\n\ttimeStamp,\n\ttrace,\n\twarn\n};\n", "import {\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times,\n  Console\n} from \"unenv/node/console\";\nexport {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n} from \"unenv/node/console\";\nconst workerdConsole = globalThis[\"console\"];\nexport const {\n  assert,\n  clear,\n  // @ts-expect-error undocumented public API\n  context,\n  count,\n  countReset,\n  // @ts-expect-error undocumented public API\n  createTask,\n  debug,\n  dir,\n  dirxml,\n  error,\n  group,\n  groupCollapsed,\n  groupEnd,\n  info,\n  log,\n  profile,\n  profileEnd,\n  table,\n  time,\n  timeEnd,\n  timeLog,\n  timeStamp,\n  trace,\n  warn\n} = workerdConsole;\nObject.assign(workerdConsole, {\n  Console,\n  _ignoreErrors,\n  _stderr,\n  _stderrErrorHandler,\n  _stdout,\n  _stdoutErrorHandler,\n  _times\n});\nexport default workerdConsole;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/console\";\nglobalThis.console = defaultExport;", "// https://nodejs.org/api/process.html#processhrtime\nexport const hrtime = /* @__PURE__ */ Object.assign(function hrtime(startTime) {\n\tconst now = Date.now();\n\t// millis to seconds\n\tconst seconds = Math.trunc(now / 1e3);\n\t// convert millis to nanos\n\tconst nanos = now % 1e3 * 1e6;\n\tif (startTime) {\n\t\tlet diffSeconds = seconds - startTime[0];\n\t\tlet diffNanos = nanos - startTime[0];\n\t\tif (diffNanos < 0) {\n\t\t\tdiffSeconds = diffSeconds - 1;\n\t\t\tdiffNanos = 1e9 + diffNanos;\n\t\t}\n\t\treturn [diffSeconds, diffNanos];\n\t}\n\treturn [seconds, nanos];\n}, { bigint: function bigint() {\n\t// Convert milliseconds to nanoseconds\n\treturn BigInt(Date.now() * 1e6);\n} });\n", "export class ReadStream {\n\tfd;\n\tisRaw = false;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tsetRawMode(mode) {\n\t\tthis.isRaw = mode;\n\t\treturn this;\n\t}\n}\n", "export class WriteStream {\n\tfd;\n\tcolumns = 80;\n\trows = 24;\n\tisTTY = false;\n\tconstructor(fd) {\n\t\tthis.fd = fd;\n\t}\n\tclearLine(dir, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tclearScreenDown(callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tcursorTo(x, y, callback) {\n\t\tcallback && typeof callback === \"function\" && callback();\n\t\treturn false;\n\t}\n\tmoveCursor(dx, dy, callback) {\n\t\tcallback && callback();\n\t\treturn false;\n\t}\n\tgetColorDepth(env) {\n\t\treturn 1;\n\t}\n\thasColors(count, env) {\n\t\treturn false;\n\t}\n\tgetWindowSize() {\n\t\treturn [this.columns, this.rows];\n\t}\n\twrite(str, encoding, cb) {\n\t\tif (str instanceof Uint8Array) {\n\t\t\tstr = new TextDecoder().decode(str);\n\t\t}\n\t\ttry {\n\t\t\tconsole.log(str);\n\t\t} catch {}\n\t\tcb && typeof cb === \"function\" && cb();\n\t\treturn false;\n\t}\n}\n", "import { ReadStream } from \"./internal/tty/read-stream.mjs\";\nimport { WriteStream } from \"./internal/tty/write-stream.mjs\";\nexport { ReadStream } from \"./internal/tty/read-stream.mjs\";\nexport { WriteStream } from \"./internal/tty/write-stream.mjs\";\nexport const isatty = function() {\n\treturn false;\n};\nexport default {\n\tReadStream,\n\tWriteStream,\n\tisatty\n};\n", "// Extracted from .nvmrc\nexport const NODE_VERSION = \"22.14.0\";\n", "import { EventEmitter } from \"node:events\";\nimport { ReadStream, WriteStream } from \"node:tty\";\nimport { notImplemented, createNotImplementedError } from \"../../../_internal/utils.mjs\";\n// node-version.ts is generated at build time\nimport { NODE_VERSION } from \"./node-version.mjs\";\nexport class Process extends EventEmitter {\n\tenv;\n\thrtime;\n\tnextTick;\n\tconstructor(impl) {\n\t\tsuper();\n\t\tthis.env = impl.env;\n\t\tthis.hrtime = impl.hrtime;\n\t\tthis.nextTick = impl.nextTick;\n\t\tfor (const prop of [...Object.getOwnPropertyNames(Process.prototype), ...Object.getOwnPropertyNames(EventEmitter.prototype)]) {\n\t\t\tconst value = this[prop];\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tthis[prop] = value.bind(this);\n\t\t\t}\n\t\t}\n\t}\n\t// --- event emitter ---\n\temitWarning(warning, type, code) {\n\t\tconsole.warn(`${code ? `[${code}] ` : \"\"}${type ? `${type}: ` : \"\"}${warning}`);\n\t}\n\temit(...args) {\n\t\t// @ts-ignore\n\t\treturn super.emit(...args);\n\t}\n\tlisteners(eventName) {\n\t\treturn super.listeners(eventName);\n\t}\n\t// --- stdio (lazy initializers) ---\n\t#stdin;\n\t#stdout;\n\t#stderr;\n\tget stdin() {\n\t\treturn this.#stdin ??= new ReadStream(0);\n\t}\n\tget stdout() {\n\t\treturn this.#stdout ??= new WriteStream(1);\n\t}\n\tget stderr() {\n\t\treturn this.#stderr ??= new WriteStream(2);\n\t}\n\t// --- cwd ---\n\t#cwd = \"/\";\n\tchdir(cwd) {\n\t\tthis.#cwd = cwd;\n\t}\n\tcwd() {\n\t\treturn this.#cwd;\n\t}\n\t// --- dummy props and getters ---\n\tarch = \"\";\n\tplatform = \"\";\n\targv = [];\n\targv0 = \"\";\n\texecArgv = [];\n\texecPath = \"\";\n\ttitle = \"\";\n\tpid = 200;\n\tppid = 100;\n\tget version() {\n\t\treturn `v${NODE_VERSION}`;\n\t}\n\tget versions() {\n\t\treturn { node: NODE_VERSION };\n\t}\n\tget allowedNodeEnvironmentFlags() {\n\t\treturn new Set();\n\t}\n\tget sourceMapsEnabled() {\n\t\treturn false;\n\t}\n\tget debugPort() {\n\t\treturn 0;\n\t}\n\tget throwDeprecation() {\n\t\treturn false;\n\t}\n\tget traceDeprecation() {\n\t\treturn false;\n\t}\n\tget features() {\n\t\treturn {};\n\t}\n\tget release() {\n\t\treturn {};\n\t}\n\tget connected() {\n\t\treturn false;\n\t}\n\tget config() {\n\t\treturn {};\n\t}\n\tget moduleLoadList() {\n\t\treturn [];\n\t}\n\tconstrainedMemory() {\n\t\treturn 0;\n\t}\n\tavailableMemory() {\n\t\treturn 0;\n\t}\n\tuptime() {\n\t\treturn 0;\n\t}\n\tresourceUsage() {\n\t\treturn {};\n\t}\n\t// --- noop methods ---\n\tref() {\n\t\t// noop\n\t}\n\tunref() {\n\t\t// noop\n\t}\n\t// --- unimplemented methods ---\n\tumask() {\n\t\tthrow createNotImplementedError(\"process.umask\");\n\t}\n\tgetBuiltinModule() {\n\t\treturn undefined;\n\t}\n\tgetActiveResourcesInfo() {\n\t\tthrow createNotImplementedError(\"process.getActiveResourcesInfo\");\n\t}\n\texit() {\n\t\tthrow createNotImplementedError(\"process.exit\");\n\t}\n\treallyExit() {\n\t\tthrow createNotImplementedError(\"process.reallyExit\");\n\t}\n\tkill() {\n\t\tthrow createNotImplementedError(\"process.kill\");\n\t}\n\tabort() {\n\t\tthrow createNotImplementedError(\"process.abort\");\n\t}\n\tdlopen() {\n\t\tthrow createNotImplementedError(\"process.dlopen\");\n\t}\n\tsetSourceMapsEnabled() {\n\t\tthrow createNotImplementedError(\"process.setSourceMapsEnabled\");\n\t}\n\tloadEnvFile() {\n\t\tthrow createNotImplementedError(\"process.loadEnvFile\");\n\t}\n\tdisconnect() {\n\t\tthrow createNotImplementedError(\"process.disconnect\");\n\t}\n\tcpuUsage() {\n\t\tthrow createNotImplementedError(\"process.cpuUsage\");\n\t}\n\tsetUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.setUncaughtExceptionCaptureCallback\");\n\t}\n\thasUncaughtExceptionCaptureCallback() {\n\t\tthrow createNotImplementedError(\"process.hasUncaughtExceptionCaptureCallback\");\n\t}\n\tinitgroups() {\n\t\tthrow createNotImplementedError(\"process.initgroups\");\n\t}\n\topenStdin() {\n\t\tthrow createNotImplementedError(\"process.openStdin\");\n\t}\n\tassert() {\n\t\tthrow createNotImplementedError(\"process.assert\");\n\t}\n\tbinding() {\n\t\tthrow createNotImplementedError(\"process.binding\");\n\t}\n\t// --- attached interfaces ---\n\tpermission = { has: /* @__PURE__ */ notImplemented(\"process.permission.has\") };\n\treport = {\n\t\tdirectory: \"\",\n\t\tfilename: \"\",\n\t\tsignal: \"SIGUSR2\",\n\t\tcompact: false,\n\t\treportOnFatalError: false,\n\t\treportOnSignal: false,\n\t\treportOnUncaughtException: false,\n\t\tgetReport: /* @__PURE__ */ notImplemented(\"process.report.getReport\"),\n\t\twriteReport: /* @__PURE__ */ notImplemented(\"process.report.writeReport\")\n\t};\n\tfinalization = {\n\t\tregister: /* @__PURE__ */ notImplemented(\"process.finalization.register\"),\n\t\tunregister: /* @__PURE__ */ notImplemented(\"process.finalization.unregister\"),\n\t\tregisterBeforeExit: /* @__PURE__ */ notImplemented(\"process.finalization.registerBeforeExit\")\n\t};\n\tmemoryUsage = Object.assign(() => ({\n\t\tarrayBuffers: 0,\n\t\trss: 0,\n\t\texternal: 0,\n\t\theapTotal: 0,\n\t\theapUsed: 0\n\t}), { rss: () => 0 });\n\t// --- undefined props ---\n\tmainModule = undefined;\n\tdomain = undefined;\n\t// optional\n\tsend = undefined;\n\texitCode = undefined;\n\tchannel = undefined;\n\tgetegid = undefined;\n\tgeteuid = undefined;\n\tgetgid = undefined;\n\tgetgroups = undefined;\n\tgetuid = undefined;\n\tsetegid = undefined;\n\tseteuid = undefined;\n\tsetgid = undefined;\n\tsetgroups = undefined;\n\tsetuid = undefined;\n\t// internals\n\t_events = undefined;\n\t_eventsCount = undefined;\n\t_exiting = undefined;\n\t_maxListeners = undefined;\n\t_debugEnd = undefined;\n\t_debugProcess = undefined;\n\t_fatalException = undefined;\n\t_getActiveHandles = undefined;\n\t_getActiveRequests = undefined;\n\t_kill = undefined;\n\t_preload_modules = undefined;\n\t_rawDebug = undefined;\n\t_startProfilerIdleNotifier = undefined;\n\t_stopProfilerIdleNotifier = undefined;\n\t_tickCallback = undefined;\n\t_disconnect = undefined;\n\t_handleQueue = undefined;\n\t_pendingMessage = undefined;\n\t_channel = undefined;\n\t_send = undefined;\n\t_linkedBinding = undefined;\n}\n", "import { hrtime as UnenvHrTime } from \"unenv/node/internal/process/hrtime\";\nimport { Process as UnenvProcess } from \"unenv/node/internal/process/process\";\nconst globalProcess = globalThis[\"process\"];\nexport const getBuiltinModule = globalProcess.getBuiltinModule;\nexport const { exit, platform, nextTick } = getBuiltinModule(\n  \"node:process\"\n);\nconst unenvProcess = new UnenvProcess({\n  env: globalProcess.env,\n  hrtime: UnenvHrTime,\n  nextTick\n});\nexport const {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  finalization,\n  features,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  on,\n  off,\n  once,\n  pid,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n} = unenvProcess;\nconst _process = {\n  abort,\n  addListener,\n  allowedNodeEnvironmentFlags,\n  hasUncaughtExceptionCaptureCallback,\n  setUncaughtExceptionCaptureCallback,\n  loadEnvFile,\n  sourceMapsEnabled,\n  arch,\n  argv,\n  argv0,\n  chdir,\n  config,\n  connected,\n  constrainedMemory,\n  availableMemory,\n  cpuUsage,\n  cwd,\n  debugPort,\n  dlopen,\n  disconnect,\n  emit,\n  emitWarning,\n  env,\n  eventNames,\n  execArgv,\n  execPath,\n  exit,\n  finalization,\n  features,\n  getBuiltinModule,\n  getActiveResourcesInfo,\n  getMaxListeners,\n  hrtime,\n  kill,\n  listeners,\n  listenerCount,\n  memoryUsage,\n  nextTick,\n  on,\n  off,\n  once,\n  pid,\n  platform,\n  ppid,\n  prependListener,\n  prependOnceListener,\n  rawListeners,\n  release,\n  removeAllListeners,\n  removeListener,\n  report,\n  resourceUsage,\n  setMaxListeners,\n  setSourceMapsEnabled,\n  stderr,\n  stdin,\n  stdout,\n  title,\n  throwDeprecation,\n  traceDeprecation,\n  umask,\n  uptime,\n  version,\n  versions,\n  // @ts-expect-error old API\n  domain,\n  initgroups,\n  moduleLoadList,\n  reallyExit,\n  openStdin,\n  assert,\n  binding,\n  send,\n  exitCode,\n  channel,\n  getegid,\n  geteuid,\n  getgid,\n  getgroups,\n  getuid,\n  setegid,\n  seteuid,\n  setgid,\n  setgroups,\n  setuid,\n  permission,\n  mainModule,\n  _events,\n  _eventsCount,\n  _exiting,\n  _maxListeners,\n  _debugEnd,\n  _debugProcess,\n  _fatalException,\n  _getActiveHandles,\n  _getActiveRequests,\n  _kill,\n  _preload_modules,\n  _rawDebug,\n  _startProfilerIdleNotifier,\n  _stopProfilerIdleNotifier,\n  _tickCallback,\n  _disconnect,\n  _handleQueue,\n  _pendingMessage,\n  _channel,\n  _send,\n  _linkedBinding\n};\nexport default _process;\n", "import { default as defaultExport } from \"@cloudflare/unenv-preset/node/process\";\nglobalThis.process = defaultExport;", "// src/http-exception.ts\nvar HTTPException = class extends Error {\n  res;\n  status;\n  constructor(status = 500, options) {\n    super(options?.message, { cause: options?.cause });\n    this.res = options?.res;\n    this.status = status;\n  }\n  getResponse() {\n    if (this.res) {\n      const newResponse = new Response(this.res.body, {\n        status: this.status,\n        headers: this.res.headers\n      });\n      return newResponse;\n    }\n    return new Response(this.message, {\n      status: this.status\n    });\n  }\n};\nexport {\n  HTTPException\n};\n", "export var util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nexport var objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nexport const ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n", "import { util } from \"./helpers/util.js\";\nexport const ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nexport const quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexport class ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n", "import { ZodIssueCode } from \"../ZodError.js\";\nimport { util, ZodParsedType } from \"../helpers/util.js\";\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\nexport default errorMap;\n", "import defaultErrorMap from \"./locales/en.js\";\nlet overrideErrorMap = defaultErrorMap;\nexport { defaultErrorMap };\nexport function setErrorMap(map) {\n    overrideErrorMap = map;\n}\nexport function getErrorMap() {\n    return overrideErrorMap;\n}\n", "import { getErrorMap } from \"../errors.js\";\nimport defaultErrorMap from \"../locales/en.js\";\nexport const makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nexport const EMPTY_PATH = [];\nexport function addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === defaultErrorMap ? undefined : defaultErrorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nexport class ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nexport const INVALID = Object.freeze({\n    status: \"aborted\",\n});\nexport const DIRTY = (value) => ({ status: \"dirty\", value });\nexport const OK = (value) => ({ status: \"valid\", value });\nexport const isAborted = (x) => x.status === \"aborted\";\nexport const isDirty = (x) => x.status === \"dirty\";\nexport const isValid = (x) => x.status === \"valid\";\nexport const isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n", "export {};\n", "export var errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n", "import { ZodError, ZodIssueCode, } from \"./ZodError.js\";\nimport { defaultErrorMap, getErrorMap } from \"./errors.js\";\nimport { errorUtil } from \"./helpers/errorUtil.js\";\nimport { DIRTY, INVALID, OK, ParseStatus, addIssueToContext, isAborted, isAsync, isDirty, isValid, makeIssue, } from \"./helpers/parseUtil.js\";\nimport { util, ZodParsedType, getParsedType } from \"./helpers/util.js\";\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nexport class ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nexport function datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nexport class ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport class ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nexport class ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nexport class ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nexport class ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nexport class ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nexport class ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nexport class ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nexport class ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nexport class ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!isValid(base))\n                        return INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nexport { ZodEffects as ZodTransformer };\nexport class ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nexport const BRAND = Symbol(\"zod_brand\");\nexport class ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nexport class ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nexport class ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nexport function custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nexport { ZodType as Schema, ZodType as ZodSchema };\nexport const late = {\n    object: ZodObject.lazycreate,\n};\nexport var ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nexport const coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nexport { anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, dateType as date, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, instanceOfType as instanceof, intersectionType as intersection, lazyType as lazy, literalType as literal, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, recordType as record, setType as set, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, };\nexport const NEVER = INVALID;\n", "export * from \"./errors.js\";\nexport * from \"./helpers/parseUtil.js\";\nexport * from \"./helpers/typeAliases.js\";\nexport * from \"./helpers/util.js\";\nexport * from \"./types.js\";\nexport * from \"./ZodError.js\";\n", "import * as z from \"./v3/external.js\";\nexport * from \"./v3/external.js\";\nexport { z };\nexport default z;\n", "import type { ErrorHandler } from \"hono\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { ZodError } from \"zod\";\n\nexport const errorHandler: ErrorHandler = (err, c) => {\n  // Handle Zod validation errors\n  if (err instanceof ZodError) {\n    const validationErrors = err.errors\n      .map((error) => `${error.path.join(\".\")} ${error.message}`)\n      .join(\", \");\n\n    const problem = {\n      type: \"validation_error\",\n      title: \"Validation Error\",\n      status: 400,\n      detail: validationErrors,\n      instance: c.req.path,\n    };\n\n    return c.json(problem, 400);\n  }\n\n  // Handle HTTP exceptions\n  if (err instanceof HTTPException) {\n    let problem;\n\n    try {\n      // Try to parse as RFC 7807 problem\n      problem = JSON.parse(err.message);\n    } catch {\n      // Fallback to generic problem\n      const status = err.status;\n      let type = \"internal_error\";\n      let title = \"Internal Server Error\";\n\n      switch (status) {\n        case 400:\n          type = \"validation_error\";\n          title = \"Validation Error\";\n          break;\n        case 401:\n          type = \"unauthorized\";\n          title = \"Unauthorized\";\n          break;\n        case 403:\n          type = \"forbidden\";\n          title = \"Forbidden\";\n          break;\n        case 404:\n          type = \"not_found\";\n          title = \"Not Found\";\n          break;\n        case 409:\n          type = \"conflict\";\n          title = \"Conflict\";\n          break;\n        default:\n          type = \"internal_error\";\n          title = \"Internal Server Error\";\n      }\n\n      problem = {\n        type,\n        title,\n        status,\n        detail: err.message || title,\n        instance: c.req.path,\n      };\n    }\n\n    return c.json(problem, err.status);\n  }\n\n  // Handle generic errors\n  const problem = {\n    type: \"internal_error\",\n    title: \"Internal Server Error\",\n    status: 500,\n    detail: \"An unexpected error occurred\",\n    instance: c.req.path,\n  };\n\n  return c.json(problem, 500);\n};\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\nexport class NotFoundError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"NotFoundError\";\n  }\n}\n\nexport class ConflictError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ConflictError\";\n  }\n}\n", "export const entityKind = Symbol.for('drizzle:entityKind');\nexport const hasOwnEntityKind = Symbol.for('drizzle:hasOwnEntityKind');\n\nexport interface DrizzleEntity {\n\t[entityKind]: string;\n}\n\nexport type DrizzleEntityClass<T> =\n\t& ((abstract new(...args: any[]) => T) | (new(...args: any[]) => T))\n\t& DrizzleEntity;\n\nexport function is<T extends DrizzleEntityClass<any>>(value: any, type: T): value is InstanceType<T> {\n\tif (!value || typeof value !== 'object') {\n\t\treturn false;\n\t}\n\n\tif (value instanceof type) { // eslint-disable-line no-instanceof/no-instanceof\n\t\treturn true;\n\t}\n\n\tif (!Object.prototype.hasOwnProperty.call(type, entityKind)) {\n\t\tthrow new Error(\n\t\t\t`Class \"${\n\t\t\t\ttype.name ?? '<unknown>'\n\t\t\t}\" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`,\n\t\t);\n\t}\n\n\tlet cls = value.constructor;\n\tif (cls) {\n\t\t// Traverse the prototype chain to find the entityKind\n\t\twhile (cls) {\n\t\t\tif (entityKind in cls && cls[entityKind] === type[entityKind]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tcls = Object.getPrototypeOf(cls);\n\t\t}\n\t}\n\n\treturn false;\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport interface Logger {\n\tlogQuery(query: string, params: unknown[]): void;\n}\n\nexport interface LogWriter {\n\twrite(message: string): void;\n}\n\nexport class ConsoleLogWriter implements LogWriter {\n\tstatic readonly [entityKind]: string = 'ConsoleLogWriter';\n\n\twrite(message: string) {\n\t\tconsole.log(message);\n\t}\n}\n\nexport class DefaultLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'DefaultLogger';\n\n\treadonly writer: LogWriter;\n\n\tconstructor(config?: { writer: LogWriter }) {\n\t\tthis.writer = config?.writer ?? new ConsoleLogWriter();\n\t}\n\n\tlogQuery(query: string, params: unknown[]): void {\n\t\tconst stringifiedParams = params.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(p);\n\t\t\t} catch {\n\t\t\t\treturn String(p);\n\t\t\t}\n\t\t});\n\t\tconst paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';\n\t\tthis.writer.write(`Query: ${query}${paramsStr}`);\n\t}\n}\n\nexport class NoopLogger implements Logger {\n\tstatic readonly [entityKind]: string = 'NoopLogger';\n\n\tlogQuery(): void {\n\t\t// noop\n\t}\n}\n", "import type { Column, GetColumnData } from './column.ts';\nimport { entityKind } from './entity.ts';\nimport type { OptionalKeyOnly, RequiredKeyOnly } from './operations.ts';\nimport type { ExtraConfigColumn } from './pg-core/index.ts';\nimport type { SQLWrapper } from './sql/sql.ts';\nimport type { Simplify, Update } from './utils.ts';\n\nexport interface TableConfig<TColumn extends Column = Column<any>> {\n\tname: string;\n\tschema: string | undefined;\n\tcolumns: Record<string, TColumn>;\n\tdialect: string;\n}\n\nexport type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Required<\n\tUpdate<T, TUpdate>\n>;\n\n/** @internal */\nexport const TableName = Symbol.for('drizzle:Name');\n\n/** @internal */\nexport const Schema = Symbol.for('drizzle:Schema');\n\n/** @internal */\nexport const Columns = Symbol.for('drizzle:Columns');\n\n/** @internal */\nexport const ExtraConfigColumns = Symbol.for('drizzle:ExtraConfigColumns');\n\n/** @internal */\nexport const OriginalName = Symbol.for('drizzle:OriginalName');\n\n/** @internal */\nexport const BaseName = Symbol.for('drizzle:BaseName');\n\n/** @internal */\nexport const IsAlias = Symbol.for('drizzle:IsAlias');\n\n/** @internal */\nexport const ExtraConfigBuilder = Symbol.for('drizzle:ExtraConfigBuilder');\n\nconst IsDrizzleTable = Symbol.for('drizzle:IsDrizzleTable');\n\nexport interface Table<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends TableConfig = TableConfig,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n\nexport class Table<T extends TableConfig = TableConfig> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Table';\n\n\tdeclare readonly _: {\n\t\treadonly brand: 'Table';\n\t\treadonly config: T;\n\t\treadonly name: T['name'];\n\t\treadonly schema: T['schema'];\n\t\treadonly columns: T['columns'];\n\t\treadonly inferSelect: InferSelectModel<Table<T>>;\n\t\treadonly inferInsert: InferInsertModel<Table<T>>;\n\t};\n\n\tdeclare readonly $inferSelect: InferSelectModel<Table<T>>;\n\tdeclare readonly $inferInsert: InferInsertModel<Table<T>>;\n\n\t/** @internal */\n\tstatic readonly Symbol = {\n\t\tName: TableName as typeof TableName,\n\t\tSchema: Schema as typeof Schema,\n\t\tOriginalName: OriginalName as typeof OriginalName,\n\t\tColumns: Columns as typeof Columns,\n\t\tExtraConfigColumns: ExtraConfigColumns as typeof ExtraConfigColumns,\n\t\tBaseName: BaseName as typeof BaseName,\n\t\tIsAlias: IsAlias as typeof IsAlias,\n\t\tExtraConfigBuilder: ExtraConfigBuilder as typeof ExtraConfigBuilder,\n\t};\n\n\t/**\n\t * @internal\n\t * Can be changed if the table is aliased.\n\t */\n\t[TableName]: string;\n\n\t/**\n\t * @internal\n\t * Used to store the original name of the table, before any aliasing.\n\t */\n\t[OriginalName]: string;\n\n\t/** @internal */\n\t[Schema]: string | undefined;\n\n\t/** @internal */\n\t[Columns]!: T['columns'];\n\n\t/** @internal */\n\t[ExtraConfigColumns]!: Record<string, ExtraConfigColumn>;\n\n\t/**\n\t *  @internal\n\t * Used to store the table name before the transformation via the `tableCreator` functions.\n\t */\n\t[BaseName]: string;\n\n\t/** @internal */\n\t[IsAlias] = false;\n\n\t/** @internal */\n\t[IsDrizzleTable] = true;\n\n\t/** @internal */\n\t[ExtraConfigBuilder]: ((self: any) => Record<string, unknown>) | undefined = undefined;\n\n\tconstructor(name: string, schema: string | undefined, baseName: string) {\n\t\tthis[TableName] = this[OriginalName] = name;\n\t\tthis[Schema] = schema;\n\t\tthis[BaseName] = baseName;\n\t}\n}\n\nexport function isTable(table: unknown): table is Table {\n\treturn typeof table === 'object' && table !== null && IsDrizzleTable in table;\n}\n\n/**\n * Any table with a specified boundary.\n *\n * @example\n\t```ts\n\t// Any table with a specific name\n\ttype AnyUsersTable = AnyTable<{ name: 'users' }>;\n\t```\n *\n * To describe any table with any config, simply use `Table` without any type arguments, like this:\n *\n\t```ts\n\tfunction needsTable(table: Table) {\n\t\t...\n\t}\n\t```\n */\nexport type AnyTable<TPartial extends Partial<TableConfig>> = Table<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport function getTableName<T extends Table>(table: T): T['_']['name'] {\n\treturn table[TableName];\n}\n\nexport function getTableUniqueName<T extends Table>(table: T): `${T['_']['schema']}.${T['_']['name']}` {\n\treturn `${table[Schema] ?? 'public'}.${table[TableName]}`;\n}\n\nexport type MapColumnName<TName extends string, TColumn extends Column, TDBColumNames extends boolean> =\n\tTDBColumNames extends true ? TColumn['_']['name']\n\t\t: TName;\n\nexport type InferModelFromColumns<\n\tTColumns extends Record<string, Column>,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = Simplify<\n\tTInferMode extends 'insert' ?\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as RequiredKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t\t& {\n\t\t\t\t[\n\t\t\t\t\tKey in keyof TColumns & string as OptionalKeyOnly<\n\t\t\t\t\t\tMapColumnName<Key, TColumns[Key], TConfig['dbColumnNames']>,\n\t\t\t\t\t\tTColumns[Key]\n\t\t\t\t\t>\n\t\t\t\t]?: GetColumnData<TColumns[Key], 'query'>;\n\t\t\t}\n\t\t: {\n\t\t\t[\n\t\t\t\tKey in keyof TColumns & string as MapColumnName<\n\t\t\t\t\tKey,\n\t\t\t\t\tTColumns[Key],\n\t\t\t\t\tTConfig['dbColumnNames']\n\t\t\t\t>\n\t\t\t]: GetColumnData<TColumns[Key], 'query'>;\n\t\t}\n>;\n\n/** @deprecated Use one of the alternatives: {@link InferSelectModel} / {@link InferInsertModel}, or `table.$inferSelect` / `table.$inferInsert`\n */\nexport type InferModel<\n\tTTable extends Table,\n\tTInferMode extends 'select' | 'insert' = 'select',\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], TInferMode, TConfig>;\n\nexport type InferSelectModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'select', TConfig>;\n\nexport type InferInsertModel<\n\tTTable extends Table,\n\tTConfig extends { dbColumnNames: boolean } = { dbColumnNames: false },\n> = InferModelFromColumns<TTable['_']['columns'], 'insert', TConfig>;\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tGeneratedIdentityConfig,\n} from './column-builder.ts';\nimport { entityKind } from './entity.ts';\nimport type { DriverValueMapper, SQL, SQLWrapper } from './sql/sql.ts';\nimport type { Table } from './table.ts';\nimport type { Update } from './utils.ts';\n\nexport interface ColumnBaseConfig<\n\tTDataType extends ColumnDataType,\n\tTColumnType extends string,\n> extends ColumnBuilderBaseConfig<TDataType, TColumnType> {\n\ttableName: string;\n\tnotNull: boolean;\n\thasDefault: boolean;\n\tisPrimaryKey: boolean;\n\tisAutoincrement: boolean;\n\thasRuntimeDefault: boolean;\n}\n\nexport type ColumnTypeConfig<T extends ColumnBaseConfig<ColumnDataType, string>, TTypeConfig extends object> = T & {\n\tbrand: 'Column';\n\ttableName: T['tableName'];\n\tname: T['name'];\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: T['data'];\n\tdriverParam: T['driverParam'];\n\tnotNull: T['notNull'];\n\thasDefault: T['hasDefault'];\n\tisPrimaryKey: T['isPrimaryKey'];\n\tisAutoincrement: T['isAutoincrement'];\n\thasRuntimeDefault: T['hasRuntimeDefault'];\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseColumn: infer U } ? U : unknown;\n\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n} & TTypeConfig;\n\nexport type ColumnRuntimeConfig<TData, TRuntimeConfig extends object> = ColumnBuilderRuntimeConfig<\n\tTData,\n\tTRuntimeConfig\n>;\n\nexport interface Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTRuntimeConfig extends object = object,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTTypeConfig extends object = object,\n> extends DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\n/*\n\t`Column` only accepts a full `ColumnConfig` as its generic.\n\tTo infer parts of the config, use `AnyColumn` that accepts a partial config.\n\tSee `GetColumnData` for example usage of inferring.\n*/\nexport abstract class Column<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n> implements DriverValueMapper<T['data'], T['driverParam']>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Column';\n\n\tdeclare readonly _: ColumnTypeConfig<T, TTypeConfig>;\n\n\treadonly name: string;\n\treadonly primary: boolean;\n\treadonly notNull: boolean;\n\treadonly default: T['data'] | SQL | undefined;\n\treadonly defaultFn: (() => T['data'] | SQL) | undefined;\n\treadonly onUpdateFn: (() => T['data'] | SQL) | undefined;\n\treadonly hasDefault: boolean;\n\treadonly isUnique: boolean;\n\treadonly uniqueName: string | undefined;\n\treadonly uniqueType: string | undefined;\n\treadonly dataType: T['dataType'];\n\treadonly columnType: T['columnType'];\n\treadonly enumValues: T['enumValues'] = undefined;\n\treadonly generated: GeneratedColumnConfig<T['data']> | undefined = undefined;\n\treadonly generatedIdentity: GeneratedIdentityConfig | undefined = undefined;\n\n\tprotected config: ColumnRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(\n\t\treadonly table: Table,\n\t\tconfig: ColumnRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tthis.config = config;\n\t\tthis.name = config.name;\n\t\tthis.notNull = config.notNull;\n\t\tthis.default = config.default;\n\t\tthis.defaultFn = config.defaultFn;\n\t\tthis.onUpdateFn = config.onUpdateFn;\n\t\tthis.hasDefault = config.hasDefault;\n\t\tthis.primary = config.primaryKey;\n\t\tthis.isUnique = config.isUnique;\n\t\tthis.uniqueName = config.uniqueName;\n\t\tthis.uniqueType = config.uniqueType;\n\t\tthis.dataType = config.dataType as T['dataType'];\n\t\tthis.columnType = config.columnType;\n\t\tthis.generated = config.generated;\n\t\tthis.generatedIdentity = config.generatedIdentity;\n\t}\n\n\tabstract getSQLType(): string;\n\n\tmapFromDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\tmapToDriverValue(value: unknown): unknown {\n\t\treturn value;\n\t}\n\n\t// ** @internal */\n\tshouldDisableInsert(): boolean {\n\t\treturn this.config.generated !== undefined && this.config.generated.type !== 'byDefault';\n\t}\n}\n\nexport type UpdateColConfig<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTUpdate extends Partial<ColumnBaseConfig<ColumnDataType, string>>,\n> = Update<T, TUpdate>;\n\nexport type AnyColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = Column<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport type GetColumnData<TColumn extends Column, TInferMode extends 'query' | 'raw' = 'query'> =\n\t// dprint-ignore\n\tTInferMode extends 'raw' // Raw mode\n\t\t? TColumn['_']['data'] // Just return the underlying type\n\t\t: TColumn['_']['notNull'] extends true // Query mode\n\t\t? TColumn['_']['data'] // Query mode, not null\n\t\t: TColumn['_']['data'] | null; // Query mode, nullable\n\nexport type InferColumnsDataTypes<TColumns extends Record<string, Column>> = {\n\t[Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;\n};\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { PgColumn, PgColumnBuilder, PgColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type PgTableExtraConfig = Record<\n\tstring,\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<PgColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:PgInlineForeignKeys');\n\nexport class PgTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'PgTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/**@internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]: ((self: Record<string, PgColumn>) => PgTableExtraConfig) | undefined =\n\t\tundefined;\n}\n\nexport type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;\n\nexport type PgTableWithColumns<T extends TableConfig> =\n\t& PgTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\n/** @internal */\nexport function pgTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig: ((self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig) | undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): PgTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\tdialect: 'pg';\n}> {\n\tconst rawTable = new PgTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst builtColumnsForExtraConfig = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as PgColumnBuilder;\n\t\t\tconst column = colBuilder.buildExtraConfigColumn(rawTable);\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;\n\n\tif (extraConfig) {\n\t\ttable[PgTable.Symbol.ExtraConfigBuilder] = extraConfig as any;\n\t}\n\n\treturn table;\n}\n\nexport interface PgTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, PgColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildExtraConfigColumns<TTableName, TColumnsMap, 'pg'>) => PgTableExtraConfig,\n\t): PgTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'pg'>;\n\t\tdialect: 'pg';\n\t}>;\n}\n\nexport const pgTable: PgTableFn = (name, columns, extraConfig) => {\n\treturn pgTableWithSchema(name, columns, extraConfig, undefined);\n};\n\nexport function pgTableCreator(customizeTableName: (name: string) => string): PgTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyPgColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'PgPrimaryKey';\n\n\treadonly columns: AnyPgColumn<{}>[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: PgTable, columns: AnyPgColumn<{}>[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { Column } from './column.ts';\nimport type { MySqlColumn } from './mysql-core/index.ts';\nimport type { ExtraConfigColumn, PgColumn, PgSequenceOptions } from './pg-core/index.ts';\nimport type { SQL } from './sql/sql.ts';\nimport type { SQLiteColumn } from './sqlite-core/index.ts';\nimport type { Simplify } from './utils.ts';\n\nexport type ColumnDataType =\n\t| 'string'\n\t| 'number'\n\t| 'boolean'\n\t| 'array'\n\t| 'json'\n\t| 'date'\n\t| 'bigint'\n\t| 'custom'\n\t| 'buffer';\n\nexport type Dialect = 'pg' | 'mysql' | 'sqlite' | 'common';\n\nexport type GeneratedStorageMode = 'virtual' | 'stored';\n\nexport type GeneratedType = 'always' | 'byDefault';\n\nexport type GeneratedColumnConfig<TDataType> = {\n\tas: TDataType | SQL | (() => SQL);\n\ttype?: GeneratedType;\n\tmode?: GeneratedStorageMode;\n};\n\nexport type GeneratedIdentityConfig = {\n\tsequenceName?: string;\n\tsequenceOptions?: PgSequenceOptions;\n\ttype: 'always' | 'byDefault';\n};\n\nexport interface ColumnBuilderBaseConfig<TDataType extends ColumnDataType, TColumnType extends string> {\n\tname: string;\n\tdataType: TDataType;\n\tcolumnType: TColumnType;\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: string[] | undefined;\n\tgenerated: GeneratedColumnConfig<unknown> | undefined;\n}\n\nexport type MakeColumnConfig<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTableName extends string,\n\tTData = T extends { $type: infer U } ? U : T['data'],\n> = {\n\tname: T['name'];\n\ttableName: TTableName;\n\tdataType: T['dataType'];\n\tcolumnType: T['columnType'];\n\tdata: TData;\n\tdriverParam: T['driverParam'];\n\tnotNull: T extends { notNull: true } ? true : false;\n\thasDefault: T extends { hasDefault: true } ? true : false;\n\tisPrimaryKey: T extends { isPrimaryKey: true } ? true : false;\n\tisAutoincrement: T extends { isAutoincrement: true } ? true : false;\n\thasRuntimeDefault: T extends { hasRuntimeDefault: true } ? true : false;\n\tenumValues: T['enumValues'];\n\tbaseColumn: T extends { baseBuilder: infer U extends ColumnBuilderBase } ? BuildColumn<TTableName, U, 'common'>\n\t\t: never;\n\tgenerated: T['generated'] extends object ? T['generated'] : undefined;\n} & {};\n\nexport type ColumnBuilderTypeConfig<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> = Simplify<\n\t& {\n\t\tbrand: 'ColumnBuilder';\n\t\tname: T['name'];\n\t\tdataType: T['dataType'];\n\t\tcolumnType: T['columnType'];\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverParam'];\n\t\tnotNull: T extends { notNull: infer U } ? U : boolean;\n\t\thasDefault: T extends { hasDefault: infer U } ? U : boolean;\n\t\tenumValues: T['enumValues'];\n\t\tgenerated: GeneratedColumnConfig<T['data']> | undefined;\n\t}\n\t& TTypeConfig\n>;\n\nexport type ColumnBuilderRuntimeConfig<TData, TRuntimeConfig extends object = object> = {\n\tname: string;\n\tnotNull: boolean;\n\tdefault: TData | SQL | undefined;\n\tdefaultFn: (() => TData | SQL) | undefined;\n\tonUpdateFn: (() => TData | SQL) | undefined;\n\thasDefault: boolean;\n\tprimaryKey: boolean;\n\tisUnique: boolean;\n\tuniqueName: string | undefined;\n\tuniqueType: string | undefined;\n\tdataType: string;\n\tcolumnType: string;\n\tgenerated: GeneratedColumnConfig<TData> | undefined;\n\tgeneratedIdentity: GeneratedIdentityConfig | undefined;\n} & TRuntimeConfig;\n\nexport interface ColumnBuilderExtraConfig {\n\tprimaryKeyHasDefault?: boolean;\n}\n\nexport type NotNull<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tnotNull: true;\n\t};\n};\n\nexport type HasDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasDefault: true;\n\t};\n};\n\nexport type IsPrimaryKey<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisPrimaryKey: true;\n\t};\n};\n\nexport type IsAutoincrement<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\tisAutoincrement: true;\n\t};\n};\n\nexport type HasRuntimeDefault<T extends ColumnBuilderBase> = T & {\n\t_: {\n\t\thasRuntimeDefault: true;\n\t};\n};\n\nexport type $Type<T extends ColumnBuilderBase, TType> = T & {\n\t_: {\n\t\t$type: TType;\n\t};\n};\n\nexport type HasGenerated<T extends ColumnBuilderBase, TGenerated extends {} = {}> = T & {\n\t_: {\n\t\thasDefault: true;\n\t\tgenerated: TGenerated;\n\t};\n};\n\nexport type IsIdentityByDefault<\n\tT extends ColumnBuilderBase,\n\tTType extends 'always' | 'byDefault',\n> = T & {\n\t_: {\n\t\tnotNull: true;\n\t\thasDefault: true;\n\t\tgenerated: { as: any; type: TType };\n\t};\n};\n\nexport interface ColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> {\n\t_: ColumnBuilderTypeConfig<T, TTypeConfig>;\n}\n\n// To understand how to use `ColumnBuilder` and `AnyColumnBuilder`, see `Column` and `AnyColumn` documentation.\nexport abstract class ColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> implements ColumnBuilderBase<T, TTypeConfig> {\n\tstatic readonly [entityKind]: string = 'ColumnBuilder';\n\n\tdeclare _: ColumnBuilderTypeConfig<T, TTypeConfig>;\n\n\tprotected config: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tnotNull: false,\n\t\t\tdefault: undefined,\n\t\t\thasDefault: false,\n\t\t\tprimaryKey: false,\n\t\t\tisUnique: false,\n\t\t\tuniqueName: undefined,\n\t\t\tuniqueType: undefined,\n\t\t\tdataType,\n\t\t\tcolumnType,\n\t\t\tgenerated: undefined,\n\t\t} as ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>;\n\t}\n\n\t/**\n\t * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.\n\t *\n\t * @example\n\t * ```ts\n\t * const users = pgTable('users', {\n\t * \tid: integer('id').$type<UserId>().primaryKey(),\n\t * \tdetails: json('details').$type<UserDetails>().notNull(),\n\t * });\n\t * ```\n\t */\n\t$type<TType>(): $Type<this, TType> {\n\t\treturn this as $Type<this, TType>;\n\t}\n\n\t/**\n\t * Adds a `not null` clause to the column definition.\n\t *\n\t * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.\n\t */\n\tnotNull(): NotNull<this> {\n\t\tthis.config.notNull = true;\n\t\treturn this as NotNull<this>;\n\t}\n\n\t/**\n\t * Adds a `default <value>` clause to the column definition.\n\t *\n\t * Affects the `insert` model of the table - columns *with* `default` are optional on insert.\n\t *\n\t * If you need to set a dynamic default value, use {@link $defaultFn} instead.\n\t */\n\tdefault(value: (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL): HasDefault<this> {\n\t\tthis.config.default = value;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Adds a dynamic default value to the column.\n\t * The function will be called when the row is inserted, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$defaultFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasRuntimeDefault<HasDefault<this>> {\n\t\tthis.config.defaultFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasRuntimeDefault<HasDefault<this>>;\n\t}\n\n\t/**\n\t * Alias for {@link $defaultFn}.\n\t */\n\t$default = this.$defaultFn;\n\n\t/**\n\t * Adds a dynamic update value to the column.\n\t * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.\n\t * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.\n\t *\n\t * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.\n\t */\n\t$onUpdateFn(\n\t\tfn: () => (this['_'] extends { $type: infer U } ? U : this['_']['data']) | SQL,\n\t): HasDefault<this> {\n\t\tthis.config.onUpdateFn = fn;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n\n\t/**\n\t * Alias for {@link $onUpdateFn}.\n\t */\n\t$onUpdate = this.$onUpdateFn;\n\n\t/**\n\t * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.\n\t *\n\t * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.\n\t */\n\tprimaryKey(): TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t: IsPrimaryKey<NotNull<this>>\n\t{\n\t\tthis.config.primaryKey = true;\n\t\tthis.config.notNull = true;\n\t\treturn this as TExtraConfig['primaryKeyHasDefault'] extends true ? IsPrimaryKey<HasDefault<NotNull<this>>>\n\t\t\t: IsPrimaryKey<NotNull<this>>;\n\t}\n\n\tabstract generatedAlwaysAs(\n\t\tas: SQL | T['data'] | (() => SQL),\n\t\tconfig?: Partial<GeneratedColumnConfig<unknown>>,\n\t): HasGenerated<this>;\n}\n\nexport type BuildColumn<\n\tTTableName extends string,\n\tTBuilder extends ColumnBuilderBase,\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? PgColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: TDialect extends 'common' ? Column<MakeColumnConfig<TBuilder['_'], TTableName>>\n\t: never;\n\nexport type BuildIndexColumn<\n\tTDialect extends Dialect,\n> = TDialect extends 'pg' ? ExtraConfigColumn : never;\n\n// TODO\n// try to make sql as well + indexRaw\n\n// optional after everything will be working as expected\n// also try to leave only needed methods for extraConfig\n// make an error if I pass .asc() to fk and so on\n\nexport type BuildColumns<\n\tTTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildColumn<TTableName, TConfigMap[Key], TDialect>;\n\t}\n\t& {};\n\nexport type BuildExtraConfigColumns<\n\t_TTableName extends string,\n\tTConfigMap extends Record<string, ColumnBuilderBase>,\n\tTDialect extends Dialect,\n> =\n\t& {\n\t\t[Key in keyof TConfigMap]: BuildIndexColumn<TDialect>;\n\t}\n\t& {};\n\nexport type ChangeColumnTableName<TColumn extends Column, TAlias extends string, TDialect extends Dialect> =\n\tTDialect extends 'pg' ? PgColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'mysql' ? MySqlColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: TDialect extends 'sqlite' ? SQLiteColumn<MakeColumnConfig<TColumn['_'], TAlias>>\n\t\t: never;\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyPgColumn, PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: PgColumn[];\n\treadonly foreignTable: PgTable;\n\treadonly foreignColumns: PgColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'PgForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined = 'no action';\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined = 'no action';\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: PgColumn[];\n\t\t\tforeignColumns: PgColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as PgTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action === undefined ? 'no action' : action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'PgForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: PgTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[PgTable.Symbol.Name],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[PgTable.Symbol.Name],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends PgColumn[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TTableName }> };\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyPgColumn<{ tableName: TTableName }>, ...AnyPgColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "export function iife<T extends unknown[], U>(fn: (...args: T) => U, ...args: T): U {\n\treturn fn(...args);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport { PgTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: PgTable, columns: string[]) {\n\treturn `${table[PgTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: PgColumn[];\n\t/** @internal */\n\tnullsNotDistinctConfig = false;\n\n\tconstructor(\n\t\tcolumns: PgColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\tnullsNotDistinct() {\n\t\tthis.nullsNotDistinctConfig = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'PgUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [PgColumn, ...PgColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'PgUniqueConstraint';\n\n\treadonly columns: PgColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: PgTable, columns: PgColumn[], nullsNotDistinct: boolean, name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t\tthis.nullsNotDistinct = nullsNotDistinct;\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "function parsePgArrayValue(arrayString: string, startFrom: number, inQuotes: boolean): [string, number] {\n\tfor (let i = startFrom; i < arrayString.length; i++) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === '\\\\') {\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i + 1];\n\t\t}\n\n\t\tif (inQuotes) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === ',' || char === '}') {\n\t\t\treturn [arrayString.slice(startFrom, i).replace(/\\\\/g, ''), i];\n\t\t}\n\t}\n\n\treturn [arrayString.slice(startFrom).replace(/\\\\/g, ''), arrayString.length];\n}\n\nexport function parsePgNestedArray(arrayString: string, startFrom = 0): [any[], number] {\n\tconst result: any[] = [];\n\tlet i = startFrom;\n\tlet lastCharIsComma = false;\n\n\twhile (i < arrayString.length) {\n\t\tconst char = arrayString[i];\n\n\t\tif (char === ',') {\n\t\t\tif (lastCharIsComma || i === startFrom) {\n\t\t\t\tresult.push('');\n\t\t\t}\n\t\t\tlastCharIsComma = true;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tlastCharIsComma = false;\n\n\t\tif (char === '\\\\') {\n\t\t\ti += 2;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '\"') {\n\t\t\tconst [value, startFrom] = parsePgArrayValue(arrayString, i + 1, true);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (char === '}') {\n\t\t\treturn [result, i + 1];\n\t\t}\n\n\t\tif (char === '{') {\n\t\t\tconst [value, startFrom] = parsePgNestedArray(arrayString, i + 1);\n\t\t\tresult.push(value);\n\t\t\ti = startFrom;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);\n\t\tresult.push(value);\n\t\ti = newStartFrom;\n\t}\n\n\treturn [result, i];\n}\n\nexport function parsePgArray(arrayString: string): any[] {\n\tconst [result] = parsePgNestedArray(arrayString, 1);\n\treturn result;\n}\n\nexport function makePgArray(array: any[]): string {\n\treturn `{${\n\t\tarray.map((item) => {\n\t\t\tif (Array.isArray(item)) {\n\t\t\t\treturn makePgArray(item);\n\t\t\t}\n\n\t\t\tif (typeof item === 'string') {\n\t\t\t\treturn `\"${item.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')}\"`;\n\t\t\t}\n\n\t\t\treturn `${item}`;\n\t\t}).join(',')\n\t}}`;\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tGeneratedColumnConfig,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport type { Update } from '~/utils.ts';\n\nimport type { SQL } from '~/index.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/pg-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/pg-core/foreign-keys.ts';\nimport type { AnyPgTable, PgTable } from '~/pg-core/table.ts';\nimport { iife } from '~/tracing-utils.ts';\nimport type { PgIndexOpClass } from '../indexes.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\nimport { makePgArray, parsePgArray } from '../utils/array.ts';\n\nexport interface ReferenceConfig {\n\tref: () => PgColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface PgColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'pg' }> {}\n\nexport abstract class PgColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }, TExtraConfig>\n\timplements PgColumnBuilderBase<T, TTypeConfig>\n{\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\tstatic readonly [entityKind]: string = 'PgColumnBuilder';\n\n\tarray(size?: number): PgArrayBuilder<\n\t\t& {\n\t\t\tname: T['name'];\n\t\t\tdataType: 'array';\n\t\t\tcolumnType: 'PgArray';\n\t\t\tdata: T['data'][];\n\t\t\tdriverParam: T['driverParam'][] | string;\n\t\t\tenumValues: T['enumValues'];\n\t\t\tgenerated: GeneratedColumnConfig<T['data']>;\n\t\t}\n\t\t& (T extends { notNull: true } ? { notNull: true } : {})\n\t\t& (T extends { hasDefault: true } ? { hasDefault: true } : {}),\n\t\tT\n\t> {\n\t\treturn new PgArrayBuilder(this.config.name, this as PgColumnBuilder<any, any>, size);\n\t}\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t\tconfig?: { nulls: 'distinct' | 'not distinct' },\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\tthis.config.uniqueType = config?.nulls;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL)): HasGenerated<this> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: 'stored',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: PgColumn, table: PgTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn iife(\n\t\t\t\t(ref, actions) => {\n\t\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t\t});\n\t\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t\t}\n\t\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t\t}\n\t\t\t\t\treturn builder.build(table);\n\t\t\t\t},\n\t\t\t\tref,\n\t\t\t\tactions,\n\t\t\t);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgColumn<MakeColumnConfig<T, TTableName>>;\n\n\t/** @internal */\n\tbuildExtraConfigColumn<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): ExtraConfigColumn {\n\t\treturn new ExtraConfigColumn(table, this.config);\n\t}\n}\n\n// To understand how to use `PgColumn` and `PgColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class PgColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = {},\n\tTTypeConfig extends object = {},\n> extends Column<T, TRuntimeConfig, TTypeConfig & { dialect: 'pg' }> {\n\tstatic readonly [entityKind]: string = 'PgColumn';\n\n\tconstructor(\n\t\toverride readonly table: PgTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type IndexedExtraConfigType = { order?: 'asc' | 'desc'; nulls?: 'first' | 'last'; opClass?: string };\n\nexport class ExtraConfigColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T, IndexedExtraConfigType> {\n\tstatic readonly [entityKind]: string = 'ExtraConfigColumn';\n\n\toverride getSQLType(): string {\n\t\treturn this.getSQLType();\n\t}\n\n\tindexConfig: IndexedExtraConfigType = {\n\t\torder: this.config.order ?? 'asc',\n\t\tnulls: this.config.nulls ?? 'last',\n\t\topClass: this.config.opClass,\n\t};\n\tdefaultConfig: IndexedExtraConfigType = {\n\t\torder: 'asc',\n\t\tnulls: 'last',\n\t\topClass: undefined,\n\t};\n\n\tasc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'asc';\n\t\treturn this;\n\t}\n\n\tdesc(): Omit<this, 'asc' | 'desc'> {\n\t\tthis.indexConfig.order = 'desc';\n\t\treturn this;\n\t}\n\n\tnullsFirst(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'first';\n\t\treturn this;\n\t}\n\n\tnullsLast(): Omit<this, 'nullsFirst' | 'nullsLast'> {\n\t\tthis.indexConfig.nulls = 'last';\n\t\treturn this;\n\t}\n\n\t/**\n\t * ### PostgreSQL documentation quote\n\t *\n\t * > An operator class with optional parameters can be specified for each column of an index.\n\t * The operator class identifies the operators to be used by the index for that column.\n\t * For example, a B-tree index on four-byte integers would use the int4_ops class;\n\t * this operator class includes comparison functions for four-byte integers.\n\t * In practice the default operator class for the column's data type is usually sufficient.\n\t * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.\n\t * For example, we might want to sort a complex-number data type either by absolute value or by real part.\n\t * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.\n\t * More information about operator classes check:\n\t *\n\t * ### Useful links\n\t * https://www.postgresql.org/docs/current/sql-createindex.html\n\t *\n\t * https://www.postgresql.org/docs/current/indexes-opclass.html\n\t *\n\t * https://www.postgresql.org/docs/current/xindex.html\n\t *\n\t * ### Additional types\n\t * If you have the `pg_vector` extension installed in your database, you can use the\n\t * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param opClass\n\t * @returns\n\t */\n\top(opClass: PgIndexOpClass): Omit<this, 'op'> {\n\t\tthis.indexConfig.opClass = opClass;\n\t\treturn this;\n\t}\n}\n\nexport class IndexedColumn {\n\tstatic readonly [entityKind]: string = 'IndexedColumn';\n\tconstructor(\n\t\tname: string | undefined,\n\t\ttype: string,\n\t\tindexConfig: IndexedExtraConfigType,\n\t) {\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.indexConfig = indexConfig;\n\t}\n\n\tname: string | undefined;\n\ttype: string;\n\tindexConfig: IndexedExtraConfigType;\n}\n\nexport type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = PgColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport class PgArrayBuilder<\n\tT extends ColumnBuilderBaseConfig<'array', 'PgArray'>,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tbaseBuilder: PgColumnBuilder<TBase>;\n\t\tsize: number | undefined;\n\t},\n\t{\n\t\tbaseBuilder: PgColumnBuilder<TBase>;\n\t}\n> {\n\tstatic override readonly [entityKind] = 'PgArrayBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\tbaseBuilder: PgArrayBuilder<T, TBase>['config']['baseBuilder'],\n\t\tsize: number | undefined,\n\t) {\n\t\tsuper(name, 'array', 'PgArray');\n\t\tthis.config.baseBuilder = baseBuilder;\n\t\tthis.config.size = size;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgArray<MakeColumnConfig<T, TTableName>, TBase> {\n\t\tconst baseColumn = this.config.baseBuilder.build(table);\n\t\treturn new PgArray<MakeColumnConfig<T, TTableName>, TBase>(\n\t\t\ttable as AnyPgTable<{ name: MakeColumnConfig<T, TTableName>['tableName'] }>,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t\tbaseColumn,\n\t\t);\n\t}\n}\n\nexport class PgArray<\n\tT extends ColumnBaseConfig<'array', 'PgArray'>,\n\tTBase extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumn<T> {\n\treadonly size: number | undefined;\n\n\tstatic readonly [entityKind]: string = 'PgArray';\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgArrayBuilder<T, TBase>['config'],\n\t\treadonly baseColumn: PgColumn,\n\t\treadonly range?: [number | undefined, number | undefined],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.size = config.size;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `${this.baseColumn.getSQLType()}[${typeof this.size === 'number' ? this.size : ''}]`;\n\t}\n\n\toverride mapFromDriverValue(value: unknown[] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\t// Thank you node-postgres for not parsing enum arrays\n\t\t\tvalue = parsePgArray(value);\n\t\t}\n\t\treturn value.map((v) => this.baseColumn.mapFromDriverValue(v));\n\t}\n\n\toverride mapToDriverValue(value: unknown[], isNestedArray = false): unknown[] | string {\n\t\tconst a = value.map((v) =>\n\t\t\tv === null\n\t\t\t\t? null\n\t\t\t\t: is(this.baseColumn, PgArray)\n\t\t\t\t? this.baseColumn.mapToDriverValue(v as unknown[], true)\n\t\t\t\t: this.baseColumn.mapToDriverValue(v)\n\t\t);\n\t\tif (isNestedArray) return a;\n\t\treturn makePgArray(a);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgEnumColumnBuilderInitial<TName extends string, TValues extends [string, ...string[]]> =\n\tPgEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'PgEnumColumn';\n\t\tdata: TValues[number];\n\t\tenumValues: TValues;\n\t\tdriverParam: string;\n\t\tgenerated: undefined;\n\t}>;\n\nconst isPgEnumSym = Symbol.for('drizzle:isPgEnum');\nexport interface PgEnum<TValues extends [string, ...string[]]> {\n\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, TValues>;\n\n\treadonly enumName: string;\n\treadonly enumValues: TValues;\n\treadonly schema: string | undefined;\n\t/** @internal */\n\t[isPgEnumSym]: true;\n}\n\nexport function isPgEnum(obj: unknown): obj is PgEnum<[string, ...string[]]> {\n\treturn !!obj && typeof obj === 'function' && isPgEnumSym in obj && obj[isPgEnumSym] === true;\n}\n\nexport class PgEnumColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] },\n> extends PgColumnBuilder<T, { enum: PgEnum<T['enumValues']> }> {\n\tstatic readonly [entityKind]: string = 'PgEnumColumnBuilder';\n\n\tconstructor(name: string, enumInstance: PgEnum<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgEnumColumn');\n\t\tthis.config.enum = enumInstance;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgEnumColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgEnumColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgEnumColumn<T extends ColumnBaseConfig<'string', 'PgEnumColumn'> & { enumValues: [string, ...string[]] }>\n\textends PgColumn<T, { enum: PgEnum<T['enumValues']> }>\n{\n\tstatic readonly [entityKind]: string = 'PgEnumColumn';\n\n\treadonly enum = this.config.enum;\n\toverride readonly enumValues = this.config.enum.enumValues;\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgEnumColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.enum = config.enum;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.enum.enumName;\n\t}\n}\n\n// Gratitude to zod for the enum function types\nexport function pgEnum<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n): PgEnum<Writable<T>> {\n\treturn pgEnumWithSchema(enumName, values, undefined);\n}\n\n/** @internal */\nexport function pgEnumWithSchema<U extends string, T extends Readonly<[U, ...U[]]>>(\n\tenumName: string,\n\tvalues: T | Writable<T>,\n\tschema?: string,\n): PgEnum<Writable<T>> {\n\tconst enumInstance: PgEnum<Writable<T>> = Object.assign(\n\t\t<TName extends string>(name: TName): PgEnumColumnBuilderInitial<TName, Writable<T>> =>\n\t\t\tnew PgEnumColumnBuilder(name, enumInstance),\n\t\t{\n\t\t\tenumName,\n\t\t\tenumValues: values,\n\t\t\tschema,\n\t\t\t[isPgEnumSym]: true,\n\t\t} as const,\n\t);\n\n\treturn enumInstance;\n}\n", "import { entityKind } from './entity.ts';\nimport type { SQL, SQLWrapper } from './sql/sql.ts';\n\nexport interface Subquery<\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTAlias extends string = string,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> extends SQLWrapper {\n\t// SQLWrapper runtime implementation is defined in 'sql/sql.ts'\n}\nexport class Subquery<\n\tTAlias extends string = string,\n\tTSelectedFields extends Record<string, unknown> = Record<string, unknown>,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Subquery';\n\n\tdeclare _: {\n\t\tbrand: 'Subquery';\n\t\tsql: SQL;\n\t\tselectedFields: TSelectedFields;\n\t\talias: TAlias;\n\t\tisWith: boolean;\n\t};\n\n\tconstructor(sql: SQL, selection: Record<string, unknown>, alias: string, isWith = false) {\n\t\tthis._ = {\n\t\t\tbrand: 'Subquery',\n\t\t\tsql,\n\t\t\tselectedFields: selection as TSelectedFields,\n\t\t\talias: alias as TAlias,\n\t\t\tisWith,\n\t\t};\n\t}\n\n\t// getSQL(): SQL<unknown> {\n\t// \treturn new SQL([this]);\n\t// }\n}\n\nexport class WithSubquery<\n\tTAlias extends string = string,\n\tTSelection extends Record<string, unknown> = Record<string, unknown>,\n> extends Subquery<TAlias, TSelection> {\n\tstatic readonly [entityKind]: string = 'WithSubquery';\n}\n", "// package.json\nvar version = \"0.33.0\";\n\n// src/version.ts\nvar compatibilityVersion = 7;\nexport {\n  compatibilityVersion,\n  version as npmVersion\n};\n", "import type { Span, Tracer } from '@opentelemetry/api';\nimport { iife } from '~/tracing-utils.ts';\nimport { npmVersion } from '~/version.ts';\n\nlet otel: typeof import('@opentelemetry/api') | undefined;\nlet rawTracer: Tracer | undefined;\n// try {\n// \totel = await import('@opentelemetry/api');\n// } catch (err: any) {\n// \tif (err.code !== 'MODULE_NOT_FOUND' && err.code !== 'ERR_MODULE_NOT_FOUND') {\n// \t\tthrow err;\n// \t}\n// }\n\ntype SpanName =\n\t| 'drizzle.operation'\n\t| 'drizzle.prepareQuery'\n\t| 'drizzle.buildSQL'\n\t| 'drizzle.execute'\n\t| 'drizzle.driver.execute'\n\t| 'drizzle.mapResponse';\n\n/** @internal */\nexport const tracer = {\n\tstartActiveSpan<F extends (span?: Span) => unknown>(name: SpanName, fn: F): ReturnType<F> {\n\t\tif (!otel) {\n\t\t\treturn fn() as ReturnType<F>;\n\t\t}\n\n\t\tif (!rawTracer) {\n\t\t\trawTracer = otel.trace.getTracer('drizzle-orm', npmVersion);\n\t\t}\n\n\t\treturn iife(\n\t\t\t(otel, rawTracer) =>\n\t\t\t\trawTracer.startActiveSpan(\n\t\t\t\t\tname,\n\t\t\t\t\t((span: Span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn fn(span);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\tcode: otel.SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\tmessage: e instanceof Error ? e.message : 'Unknown error', // eslint-disable-line no-instanceof/no-instanceof\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as F,\n\t\t\t\t),\n\t\t\totel,\n\t\t\trawTracer,\n\t\t);\n\t},\n};\n", "export const ViewBaseConfig = Symbol.for('drizzle:ViewBaseConfig');\n", "import { entityKind, is } from '~/entity.ts';\nimport type { SelectedFields } from '~/operations.ts';\nimport { isPgEnum } from '~/pg-core/columns/enum.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { tracer } from '~/tracing.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { AnyColumn } from '../column.ts';\nimport { Column } from '../column.ts';\nimport { Table } from '../table.ts';\n\n/**\n * This class is used to indicate a primitive param value that is used in `sql` tag.\n * It is only used on type level and is never instantiated at runtime.\n * If you see a value of this type in the code, its runtime value is actually the primitive param value.\n */\nexport class FakePrimitiveParam {\n\tstatic readonly [entityKind]: string = 'FakePrimitiveParam';\n}\n\nexport type Chunk =\n\t| string\n\t| Table\n\t| View\n\t| AnyColumn\n\t| Name\n\t| Param\n\t| Placeholder\n\t| SQL;\n\nexport interface BuildQueryConfig {\n\tescapeName(name: string): string;\n\tescapeParam(num: number, value: unknown): string;\n\tescapeString(str: string): string;\n\tprepareTyping?: (encoder: DriverValueEncoder<unknown, unknown>) => QueryTypingsValue;\n\tparamStartIndex?: { value: number };\n\tinlineParams?: boolean;\n\tinvokeSource?: 'indexes' | undefined;\n}\n\nexport type QueryTypingsValue = 'json' | 'decimal' | 'time' | 'timestamp' | 'uuid' | 'date' | 'none';\n\nexport interface Query {\n\tsql: string;\n\tparams: unknown[];\n}\n\nexport interface QueryWithTypings extends Query {\n\ttypings?: QueryTypingsValue[];\n}\n\n/**\n * Any value that implements the `getSQL` method. The implementations include:\n * - `Table`\n * - `Column`\n * - `View`\n * - `Subquery`\n * - `SQL`\n * - `SQL.Aliased`\n * - `Placeholder`\n * - `Param`\n */\nexport interface SQLWrapper {\n\tgetSQL(): SQL;\n\tshouldOmitSQLParens?(): boolean;\n}\n\nexport function isSQLWrapper(value: unknown): value is SQLWrapper {\n\treturn value !== null && value !== undefined && typeof (value as any).getSQL === 'function';\n}\n\nfunction mergeQueries(queries: QueryWithTypings[]): QueryWithTypings {\n\tconst result: QueryWithTypings = { sql: '', params: [] };\n\tfor (const query of queries) {\n\t\tresult.sql += query.sql;\n\t\tresult.params.push(...query.params);\n\t\tif (query.typings?.length) {\n\t\t\tif (!result.typings) {\n\t\t\t\tresult.typings = [];\n\t\t\t}\n\t\t\tresult.typings.push(...query.typings);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class StringChunk implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'StringChunk';\n\n\treadonly value: string[];\n\n\tconstructor(value: string | string[]) {\n\t\tthis.value = Array.isArray(value) ? value : [value];\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\nexport class SQL<T = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQL';\n\n\tdeclare _: {\n\t\tbrand: 'SQL';\n\t\ttype: T;\n\t};\n\n\t/** @internal */\n\tdecoder: DriverValueDecoder<T, any> = noopDecoder;\n\tprivate shouldInlineParams = false;\n\n\tconstructor(readonly queryChunks: SQLChunk[]) {}\n\n\tappend(query: SQL): this {\n\t\tthis.queryChunks.push(...query.queryChunks);\n\t\treturn this;\n\t}\n\n\ttoQuery(config: BuildQueryConfig): QueryWithTypings {\n\t\treturn tracer.startActiveSpan('drizzle.buildSQL', (span) => {\n\t\t\tconst query = this.buildQueryFromSourceParams(this.queryChunks, config);\n\t\t\tspan?.setAttributes({\n\t\t\t\t'drizzle.query.text': query.sql,\n\t\t\t\t'drizzle.query.params': JSON.stringify(query.params),\n\t\t\t});\n\t\t\treturn query;\n\t\t});\n\t}\n\n\tbuildQueryFromSourceParams(chunks: SQLChunk[], _config: BuildQueryConfig): Query {\n\t\tconst config = Object.assign({}, _config, {\n\t\t\tinlineParams: _config.inlineParams || this.shouldInlineParams,\n\t\t\tparamStartIndex: _config.paramStartIndex || { value: 0 },\n\t\t});\n\n\t\tconst {\n\t\t\tescapeName,\n\t\t\tescapeParam,\n\t\t\tprepareTyping,\n\t\t\tinlineParams,\n\t\t\tparamStartIndex,\n\t\t} = config;\n\n\t\treturn mergeQueries(chunks.map((chunk): QueryWithTypings => {\n\t\t\tif (is(chunk, StringChunk)) {\n\t\t\t\treturn { sql: chunk.value.join(''), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Name)) {\n\t\t\t\treturn { sql: escapeName(chunk.value), params: [] };\n\t\t\t}\n\n\t\t\tif (chunk === undefined) {\n\t\t\t\treturn { sql: '', params: [] };\n\t\t\t}\n\n\t\t\tif (Array.isArray(chunk)) {\n\t\t\t\tconst result: SQLChunk[] = [new StringChunk('(')];\n\t\t\t\tfor (const [i, p] of chunk.entries()) {\n\t\t\t\t\tresult.push(p);\n\t\t\t\t\tif (i < chunk.length - 1) {\n\t\t\t\t\t\tresult.push(new StringChunk(', '));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(new StringChunk(')'));\n\t\t\t\treturn this.buildQueryFromSourceParams(result, config);\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL)) {\n\t\t\t\treturn this.buildQueryFromSourceParams(chunk.queryChunks, {\n\t\t\t\t\t...config,\n\t\t\t\t\tinlineParams: inlineParams || chunk.shouldInlineParams,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (is(chunk, Table)) {\n\t\t\t\tconst schemaName = chunk[Table.Symbol.Schema];\n\t\t\t\tconst tableName = chunk[Table.Symbol.Name];\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(tableName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(tableName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Column)) {\n\t\t\t\tif (_config.invokeSource === 'indexes') {\n\t\t\t\t\treturn { sql: escapeName(chunk.name), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.table[Table.Symbol.Name]) + '.' + escapeName(chunk.name), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, View)) {\n\t\t\t\tconst schemaName = chunk[ViewBaseConfig].schema;\n\t\t\t\tconst viewName = chunk[ViewBaseConfig].name;\n\t\t\t\treturn {\n\t\t\t\t\tsql: schemaName === undefined\n\t\t\t\t\t\t? escapeName(viewName)\n\t\t\t\t\t\t: escapeName(schemaName) + '.' + escapeName(viewName),\n\t\t\t\t\tparams: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(chunk, Param)) {\n\t\t\t\tif (is(chunk.value, Placeholder)) {\n\t\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t\t}\n\n\t\t\t\tconst mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);\n\n\t\t\t\tif (is(mappedValue, SQL)) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([mappedValue], config);\n\t\t\t\t}\n\n\t\t\t\tif (inlineParams) {\n\t\t\t\t\treturn { sql: this.mapInlineParam(mappedValue, config), params: [] };\n\t\t\t\t}\n\n\t\t\t\tlet typings: QueryTypingsValue[] = ['none'];\n\t\t\t\tif (prepareTyping) {\n\t\t\t\t\ttypings = [prepareTyping(chunk.encoder)];\n\t\t\t\t}\n\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };\n\t\t\t}\n\n\t\t\tif (is(chunk, Placeholder)) {\n\t\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t\t}\n\n\t\t\tif (is(chunk, SQL.Aliased) && chunk.fieldAlias !== undefined) {\n\t\t\t\treturn { sql: escapeName(chunk.fieldAlias), params: [] };\n\t\t\t}\n\n\t\t\tif (is(chunk, Subquery)) {\n\t\t\t\tif (chunk._.isWith) {\n\t\t\t\t\treturn { sql: escapeName(chunk._.alias), params: [] };\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk._.sql,\n\t\t\t\t\tnew StringChunk(') '),\n\t\t\t\t\tnew Name(chunk._.alias),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (isPgEnum(chunk)) {\n\t\t\t\tif (chunk.schema) {\n\t\t\t\t\treturn { sql: escapeName(chunk.schema) + '.' + escapeName(chunk.enumName), params: [] };\n\t\t\t\t}\n\t\t\t\treturn { sql: escapeName(chunk.enumName), params: [] };\n\t\t\t}\n\n\t\t\tif (isSQLWrapper(chunk)) {\n\t\t\t\tif (chunk.shouldOmitSQLParens?.()) {\n\t\t\t\t\treturn this.buildQueryFromSourceParams([chunk.getSQL()], config);\n\t\t\t\t}\n\t\t\t\treturn this.buildQueryFromSourceParams([\n\t\t\t\t\tnew StringChunk('('),\n\t\t\t\t\tchunk.getSQL(),\n\t\t\t\t\tnew StringChunk(')'),\n\t\t\t\t], config);\n\t\t\t}\n\n\t\t\tif (inlineParams) {\n\t\t\t\treturn { sql: this.mapInlineParam(chunk, config), params: [] };\n\t\t\t}\n\n\t\t\treturn { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ['none'] };\n\t\t}));\n\t}\n\n\tprivate mapInlineParam(\n\t\tchunk: unknown,\n\t\t{ escapeString }: BuildQueryConfig,\n\t): string {\n\t\tif (chunk === null) {\n\t\t\treturn 'null';\n\t\t}\n\t\tif (typeof chunk === 'number' || typeof chunk === 'boolean') {\n\t\t\treturn chunk.toString();\n\t\t}\n\t\tif (typeof chunk === 'string') {\n\t\t\treturn escapeString(chunk);\n\t\t}\n\t\tif (typeof chunk === 'object') {\n\t\t\tconst mappedValueAsString = chunk.toString();\n\t\t\tif (mappedValueAsString === '[object Object]') {\n\t\t\t\treturn escapeString(JSON.stringify(chunk));\n\t\t\t}\n\t\t\treturn escapeString(mappedValueAsString);\n\t\t}\n\t\tthrow new Error('Unexpected param value: ' + chunk);\n\t}\n\n\tgetSQL(): SQL {\n\t\treturn this;\n\t}\n\n\tas(alias: string): SQL.Aliased<T>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(): SQL<TData>;\n\t/**\n\t * @deprecated\n\t * Use ``sql<DataType>`query`.as(alias)`` instead.\n\t */\n\tas<TData>(alias: string): SQL.Aliased<TData>;\n\tas(alias?: string): SQL<T> | SQL.Aliased<T> {\n\t\t// TODO: remove with deprecated overloads\n\t\tif (alias === undefined) {\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new SQL.Aliased(this, alias);\n\t}\n\n\tmapWith<\n\t\tTDecoder extends\n\t\t\t| DriverValueDecoder<any, any>\n\t\t\t| DriverValueDecoder<any, any>['mapFromDriverValue'],\n\t>(decoder: TDecoder): SQL<GetDecoderResult<TDecoder>> {\n\t\tthis.decoder = typeof decoder === 'function' ? { mapFromDriverValue: decoder } : decoder;\n\t\treturn this as SQL<GetDecoderResult<TDecoder>>;\n\t}\n\n\tinlineParams(): this {\n\t\tthis.shouldInlineParams = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * This method is used to conditionally include a part of the query.\n\t *\n\t * @param condition - Condition to check\n\t * @returns itself if the condition is `true`, otherwise `undefined`\n\t */\n\tif(condition: any | undefined): this | undefined {\n\t\treturn condition ? this : undefined;\n\t}\n}\n\nexport type GetDecoderResult<T> = T extends Column ? T['_']['data'] : T extends\n\t| DriverValueDecoder<infer TData, any>\n\t| DriverValueDecoder<infer TData, any>['mapFromDriverValue'] ? TData\n: never;\n\n/**\n * Any DB name (table, column, index etc.)\n */\nexport class Name implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Name';\n\n\tprotected brand!: 'Name';\n\n\tconstructor(readonly value: string) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/**\n * Any DB name (table, column, index etc.)\n * @deprecated Use `sql.identifier` instead.\n */\nexport function name(value: string): Name {\n\treturn new Name(value);\n}\n\nexport interface DriverValueDecoder<TData, TDriverParam> {\n\tmapFromDriverValue(value: TDriverParam): TData;\n}\n\nexport interface DriverValueEncoder<TData, TDriverParam> {\n\tmapToDriverValue(value: TData): TDriverParam | SQL;\n}\n\nexport function isDriverValueEncoder(value: unknown): value is DriverValueEncoder<any, any> {\n\treturn typeof value === 'object' && value !== null && 'mapToDriverValue' in value\n\t\t&& typeof (value as any).mapToDriverValue === 'function';\n}\n\nexport const noopDecoder: DriverValueDecoder<any, any> = {\n\tmapFromDriverValue: (value) => value,\n};\n\nexport const noopEncoder: DriverValueEncoder<any, any> = {\n\tmapToDriverValue: (value) => value,\n};\n\nexport interface DriverValueMapper<TData, TDriverParam>\n\textends DriverValueDecoder<TData, TDriverParam>, DriverValueEncoder<TData, TDriverParam>\n{}\n\nexport const noopMapper: DriverValueMapper<any, any> = {\n\t...noopDecoder,\n\t...noopEncoder,\n};\n\n/** Parameter value that is optionally bound to an encoder (for example, a column). */\nexport class Param<TDataType = unknown, TDriverParamType = TDataType> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Param';\n\n\tprotected brand!: 'BoundParamValue';\n\n\t/**\n\t * @param value - Parameter value\n\t * @param encoder - Encoder to convert the value to a driver parameter\n\t */\n\tconstructor(\n\t\treadonly value: TDataType,\n\t\treadonly encoder: DriverValueEncoder<TDataType, TDriverParamType> = noopEncoder,\n\t) {}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.param` instead. */\nexport function param<TData, TDriver>(\n\tvalue: TData,\n\tencoder?: DriverValueEncoder<TData, TDriver>,\n): Param<TData, TDriver> {\n\treturn new Param(value, encoder);\n}\n\n/**\n * Anything that can be passed to the `` sql`...` `` tagged function.\n */\nexport type SQLChunk =\n\t| StringChunk\n\t| SQLChunk[]\n\t| SQLWrapper\n\t| SQL\n\t| Table\n\t| View\n\t| Subquery\n\t| AnyColumn\n\t| Param\n\t| Name\n\t| undefined\n\t| FakePrimitiveParam\n\t| Placeholder;\n\nexport function sql<T>(strings: TemplateStringsArray, ...params: any[]): SQL<T>;\n/*\n\tThe type of `params` is specified as `SQLChunk[]`, but that's slightly incorrect -\n\tin runtime, users won't pass `FakePrimitiveParam` instances as `params` - they will pass primitive values\n\twhich will be wrapped in `Param`. That's why the overload specifies `params` as `any[]` and not as `SQLSourceParam[]`.\n\tThis type is used to make our lives easier and the type checker happy.\n*/\nexport function sql(strings: TemplateStringsArray, ...params: SQLChunk[]): SQL {\n\tconst queryChunks: SQLChunk[] = [];\n\tif (params.length > 0 || (strings.length > 0 && strings[0] !== '')) {\n\t\tqueryChunks.push(new StringChunk(strings[0]!));\n\t}\n\tfor (const [paramIndex, param] of params.entries()) {\n\t\tqueryChunks.push(param, new StringChunk(strings[paramIndex + 1]!));\n\t}\n\n\treturn new SQL(queryChunks);\n}\n\nexport namespace sql {\n\texport function empty(): SQL {\n\t\treturn new SQL([]);\n\t}\n\n\t/** @deprecated - use `sql.join()` */\n\texport function fromList(list: SQLChunk[]): SQL {\n\t\treturn new SQL(list);\n\t}\n\n\t/**\n\t * Convenience function to create an SQL query from a raw string.\n\t * @param str The raw SQL query string.\n\t */\n\texport function raw(str: string): SQL {\n\t\treturn new SQL([new StringChunk(str)]);\n\t}\n\n\t/**\n\t * Join a list of SQL chunks with a separator.\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`]);\n\t * // sql`abc`\n\t * ```\n\t * @example\n\t * ```ts\n\t * const query = sql.join([sql`a`, sql`b`, sql`c`], sql`, `);\n\t * // sql`a, b, c`\n\t * ```\n\t */\n\texport function join(chunks: SQLChunk[], separator?: SQLChunk): SQL {\n\t\tconst result: SQLChunk[] = [];\n\t\tfor (const [i, chunk] of chunks.entries()) {\n\t\t\tif (i > 0 && separator !== undefined) {\n\t\t\t\tresult.push(separator);\n\t\t\t}\n\t\t\tresult.push(chunk);\n\t\t}\n\t\treturn new SQL(result);\n\t}\n\n\t/**\n\t * Create a SQL chunk that represents a DB identifier (table, column, index etc.).\n\t * When used in a query, the identifier will be escaped based on the DB engine.\n\t * For example, in PostgreSQL, identifiers are escaped with double quotes.\n\t *\n\t * **WARNING: This function does not offer any protection against SQL injections, so you must validate any user input beforehand.**\n\t *\n\t * @example ```ts\n\t * const query = sql`SELECT * FROM ${sql.identifier('my-table')}`;\n\t * // 'SELECT * FROM \"my-table\"'\n\t * ```\n\t */\n\texport function identifier(value: string): Name {\n\t\treturn new Name(value);\n\t}\n\n\texport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\t\treturn new Placeholder(name);\n\t}\n\n\texport function param<TData, TDriver>(\n\t\tvalue: TData,\n\t\tencoder?: DriverValueEncoder<TData, TDriver>,\n\t): Param<TData, TDriver> {\n\t\treturn new Param(value, encoder);\n\t}\n}\n\nexport namespace SQL {\n\texport class Aliased<T = unknown> implements SQLWrapper {\n\t\tstatic readonly [entityKind]: string = 'SQL.Aliased';\n\n\t\tdeclare _: {\n\t\t\tbrand: 'SQL.Aliased';\n\t\t\ttype: T;\n\t\t};\n\n\t\t/** @internal */\n\t\tisSelectionField = false;\n\n\t\tconstructor(\n\t\t\treadonly sql: SQL,\n\t\t\treadonly fieldAlias: string,\n\t\t) {}\n\n\t\tgetSQL(): SQL {\n\t\t\treturn this.sql;\n\t\t}\n\n\t\t/** @internal */\n\t\tclone() {\n\t\t\treturn new Aliased(this.sql, this.fieldAlias);\n\t\t}\n\t}\n}\n\nexport class Placeholder<TName extends string = string, TValue = any> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'Placeholder';\n\n\tdeclare protected: TValue;\n\n\tconstructor(readonly name: TName) {}\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([this]);\n\t}\n}\n\n/** @deprecated Use `sql.placeholder` instead. */\nexport function placeholder<TName extends string>(name: TName): Placeholder<TName> {\n\treturn new Placeholder(name);\n}\n\nexport function fillPlaceholders(params: unknown[], values: Record<string, unknown>): unknown[] {\n\treturn params.map((p) => {\n\t\tif (is(p, Placeholder)) {\n\t\t\tif (!(p.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn values[p.name];\n\t\t}\n\n\t\tif (is(p, Param) && is(p.value, Placeholder)) {\n\t\t\tif (!(p.value.name in values)) {\n\t\t\t\tthrow new Error(`No value for placeholder \"${p.value.name}\" was provided`);\n\t\t\t}\n\n\t\t\treturn p.encoder.mapToDriverValue(values[p.value.name]);\n\t\t}\n\n\t\treturn p;\n\t});\n}\n\nexport type ColumnsSelection = Record<string, unknown>;\n\nexport abstract class View<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'View';\n\n\tdeclare _: {\n\t\tbrand: 'View';\n\t\tviewBrand: string;\n\t\tname: TName;\n\t\texisting: TExisting;\n\t\tselectedFields: TSelection;\n\t};\n\n\t/** @internal */\n\t[ViewBaseConfig]: {\n\t\tname: TName;\n\t\toriginalName: TName;\n\t\tschema: string | undefined;\n\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\tisExisting: TExisting;\n\t\tquery: TExisting extends true ? undefined : SQL;\n\t\tisAlias: boolean;\n\t};\n\n\tconstructor(\n\t\t{ name, schema, selectedFields, query }: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields<AnyColumn, Table>;\n\t\t\tquery: SQL | undefined;\n\t\t},\n\t) {\n\t\tthis[ViewBaseConfig] = {\n\t\t\tname,\n\t\t\toriginalName: name,\n\t\t\tschema,\n\t\t\tselectedFields,\n\t\t\tquery: query as (TExisting extends true ? undefined : SQL),\n\t\t\tisExisting: !query as TExisting,\n\t\t\tisAlias: false,\n\t\t};\n\t}\n\n\tgetSQL(): SQL<unknown> {\n\t\treturn new SQL([this]);\n\t}\n}\n\n// Defined separately from the Column class to resolve circular dependency\nColumn.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Table class to resolve circular dependency\nTable.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n\n// Defined separately from the Column class to resolve circular dependency\nSubquery.prototype.getSQL = function() {\n\treturn new SQL([this]);\n};\n", "import { type AnyColumn, Column, type GetColumnData } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tisDriverValueEncoder,\n\tisSQLWrapper,\n\tParam,\n\tPlaceholder,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n\ttype SQLWrapper,\n\tStringChunk,\n\tView,\n} from '../sql.ts';\n\nexport function bindIfParam(value: unknown, column: SQLWrapper): SQLChunk {\n\tif (\n\t\tisDriverValueEncoder(column)\n\t\t&& !isSQLWrapper(value)\n\t\t&& !is(value, Param)\n\t\t&& !is(value, Placeholder)\n\t\t&& !is(value, Column)\n\t\t&& !is(value, Table)\n\t\t&& !is(value, View)\n\t) {\n\t\treturn new Param(value, column);\n\t}\n\treturn value as SQLChunk;\n}\n\nexport interface BinaryOperator {\n\t<TColumn extends Column>(\n\t\tleft: TColumn,\n\t\tright: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\t): SQL;\n\t<T>(left: SQL.Aliased<T>, right: T | SQLWrapper): SQL;\n\t<T extends SQLWrapper>(\n\t\tleft: Exclude<T, SQL.Aliased | Column>,\n\t\tright: unknown,\n\t): SQL;\n}\n\n/**\n * Test that two values are equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is null, you may want to use\n * `isNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford\n * db.select().from(cars)\n *   .where(eq(cars.make, 'Ford'))\n * ```\n *\n * @see isNull for a way to test equality to NULL.\n */\nexport const eq: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} = ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that two values are not equal.\n *\n * Remember that the SQL standard dictates that\n * two NULL values are not equal, so if you want to test\n * whether a value is not null, you may want to use\n * `isNotNull` instead.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars not made by Ford\n * db.select().from(cars)\n *   .where(ne(cars.make, 'Ford'))\n * ```\n *\n * @see isNotNull for a way to test whether a value is not null.\n */\nexport const ne: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <> ${bindIfParam(right, left)}`;\n};\n\n/**\n * Combine a list of conditions with the `and` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     and(\n *       eq(cars.make, 'Volvo'),\n *       eq(cars.year, 1950),\n *     )\n *   )\n * ```\n */\nexport function and(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function and(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' and ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Combine a list of conditions with the `or` operator. Conditions\n * that are equal `undefined` are automatically ignored.\n *\n * ## Examples\n *\n * ```ts\n * db.select().from(cars)\n *   .where(\n *     or(\n *       eq(cars.make, 'GM'),\n *       eq(cars.make, 'Ford'),\n *     )\n *   )\n * ```\n */\nexport function or(...conditions: (SQLWrapper | undefined)[]): SQL | undefined;\nexport function or(\n\t...unfilteredConditions: (SQLWrapper | undefined)[]\n): SQL | undefined {\n\tconst conditions = unfilteredConditions.filter(\n\t\t(c): c is Exclude<typeof c, undefined> => c !== undefined,\n\t);\n\n\tif (conditions.length === 0) {\n\t\treturn undefined;\n\t}\n\n\tif (conditions.length === 1) {\n\t\treturn new SQL(conditions);\n\t}\n\n\treturn new SQL([\n\t\tnew StringChunk('('),\n\t\tsql.join(conditions, new StringChunk(' or ')),\n\t\tnew StringChunk(')'),\n\t]);\n}\n\n/**\n * Negate the meaning of an expression using the `not` keyword.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars _not_ made by GM or Ford.\n * db.select().from(cars)\n *   .where(not(inArray(cars.make, ['GM', 'Ford'])))\n * ```\n */\nexport function not(condition: SQLWrapper): SQL {\n\treturn sql`not ${condition}`;\n}\n\n/**\n * Test that the first expression passed is greater than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made after 2000.\n * db.select().from(cars)\n *   .where(gt(cars.year, 2000))\n * ```\n *\n * @see gte for greater-than-or-equal\n */\nexport const gt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} > ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is greater than\n * or equal to the second expression. Use `gt` to\n * test whether an expression is strictly greater\n * than another.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made on or after 2000.\n * db.select().from(cars)\n *   .where(gte(cars.year, 2000))\n * ```\n *\n * @see gt for a strictly greater-than condition\n */\nexport const gte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} >= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lt(cars.year, 2000))\n * ```\n *\n * @see lte for less-than-or-equal\n */\nexport const lt: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} < ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test that the first expression passed is less than\n * or equal to the second expression.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made before 2000.\n * db.select().from(cars)\n *   .where(lte(cars.year, 2000))\n * ```\n *\n * @see lt for a strictly less-than condition\n */\nexport const lte: BinaryOperator = (left: SQLWrapper, right: unknown): SQL => {\n\treturn sql`${left} <= ${bindIfParam(right, left)}`;\n};\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value from a list passed as the second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by Ford or GM.\n * db.select().from(cars)\n *   .where(inArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see notInArray for the inverse of this test\n */\nexport function inArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function inArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`false`;\n\t\t}\n\t\treturn sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether the first parameter, a column or expression,\n * has a value that is not present in a list passed as the\n * second argument.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made by any company except Ford or GM.\n * db.select().from(cars)\n *   .where(notInArray(cars.make, ['Ford', 'GM']))\n * ```\n *\n * @see inArray for the inverse of this test\n */\nexport function notInArray<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function notInArray(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\treturn sql`true`;\n\t\t}\n\t\treturn sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;\n\t}\n\n\treturn sql`${column} not in ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test whether an expression is NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have no discontinuedAt date.\n * db.select().from(cars)\n *   .where(isNull(cars.discontinuedAt))\n * ```\n *\n * @see isNotNull for the inverse of this test\n */\nexport function isNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is null`;\n}\n\n/**\n * Test whether an expression is not NULL. By the SQL standard,\n * NULL is neither equal nor not equal to itself, so\n * it's recommended to use `isNull` and `notIsNull` for\n * comparisons to NULL.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars that have been discontinued.\n * db.select().from(cars)\n *   .where(isNotNull(cars.discontinuedAt))\n * ```\n *\n * @see isNull for the inverse of this test\n */\nexport function isNotNull(value: SQLWrapper): SQL {\n\treturn sql`${value} is not null`;\n}\n\n/**\n * Test whether a subquery evaluates to have any rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column has a match in a cities\n * // table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     exists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see notExists for the inverse of this test\n */\nexport function exists(subquery: SQLWrapper): SQL {\n\treturn sql`exists ${subquery}`;\n}\n\n/**\n * Test whether a subquery doesn't include any result\n * rows.\n *\n * ## Examples\n *\n * ```ts\n * // Users whose `homeCity` column doesn't match\n * // a row in the cities table.\n * db\n *   .select()\n *   .from(users)\n *   .where(\n *     notExists(db.select()\n *       .from(cities)\n *       .where(eq(users.homeCity, cities.id))),\n *   );\n * ```\n *\n * @see exists for the inverse of this test\n */\nexport function notExists(subquery: SQLWrapper): SQL {\n\treturn sql`not exists ${subquery}`;\n}\n\n/**\n * Test whether an expression is between two values. This\n * is an easier way to express range tests, which would be\n * expressed mathematically as `x <= a <= y` but in SQL\n * would have to be like `a >= x AND a <= y`.\n *\n * Between is inclusive of the endpoints: if `column`\n * is equal to `min` or `max`, it will be TRUE.\n *\n * ## Examples\n *\n * ```ts\n * // Select cars made between 1990 and 2000\n * db.select().from(cars)\n *   .where(between(cars.year, 1990, 2000))\n * ```\n *\n * @see notBetween for the inverse of this test\n */\nexport function between<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function between<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function between<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function between(column: SQLWrapper, min: unknown, max: unknown): SQL {\n\treturn sql`${column} between ${bindIfParam(min, column)} and ${\n\t\tbindIfParam(\n\t\t\tmax,\n\t\t\tcolumn,\n\t\t)\n\t}`;\n}\n\n/**\n * Test whether an expression is not between two values.\n *\n * This, like `between`, includes its endpoints, so if\n * the `column` is equal to `min` or `max`, in this case\n * it will evaluate to FALSE.\n *\n * ## Examples\n *\n * ```ts\n * // Exclude cars made in the 1970s\n * db.select().from(cars)\n *   .where(notBetween(cars.year, 1970, 1979))\n * ```\n *\n * @see between for the inverse of this test\n */\nexport function notBetween<T>(\n\tcolumn: SQL.Aliased,\n\tmin: T | SQLWrapper,\n\tmax: T | SQLWrapper,\n): SQL;\nexport function notBetween<TColumn extends AnyColumn>(\n\tcolumn: TColumn,\n\tmin: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n\tmax: GetColumnData<TColumn, 'raw'> | SQLWrapper,\n): SQL;\nexport function notBetween<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tmin: unknown,\n\tmax: unknown,\n): SQL;\nexport function notBetween(\n\tcolumn: SQLWrapper,\n\tmin: unknown,\n\tmax: unknown,\n): SQL {\n\treturn sql`${column} not between ${\n\t\tbindIfParam(\n\t\t\tmin,\n\t\t\tcolumn,\n\t\t)\n\t} and ${bindIfParam(max, column)}`;\n}\n\n/**\n * Compare a column to a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(like(cars.name, '%Turbo%'))\n * ```\n *\n * @see ilike for a case-insensitive version of this condition\n */\nexport function like(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} like ${value}`;\n}\n\n/**\n * The inverse of like - this tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"ROver\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see like for the inverse condition\n * @see notIlike for a case-insensitive version of this condition\n */\nexport function notLike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not like ${value}`;\n}\n\n/**\n * Case-insensitively compare a column to a pattern,\n * which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * Unlike like, this performs a case-insensitive comparison.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars with 'Turbo' in their names.\n * db.select().from(cars)\n *   .where(ilike(cars.name, '%Turbo%'))\n * ```\n *\n * @see like for a case-sensitive version of this condition\n */\nexport function ilike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} ilike ${value}`;\n}\n\n/**\n * The inverse of ilike - this case-insensitively tests that a given column\n * does not match a pattern, which can include `%` and `_`\n * characters to match multiple variations. Including `%`\n * in the pattern matches zero or more characters, and including\n * `_` will match a single character.\n *\n * ## Examples\n *\n * ```ts\n * // Select all cars that don't have \"Rover\" in their name.\n * db.select().from(cars)\n *   .where(notLike(cars.name, '%Rover%'))\n * ```\n *\n * @see ilike for the inverse condition\n * @see notLike for a case-sensitive version of this condition\n */\nexport function notIlike(column: Column, value: string | SQLWrapper): SQL {\n\treturn sql`${column} not ilike ${value}`;\n}\n\n/**\n * Test that a column or expression contains all elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\" and \"ORM\".\n * db.select().from(posts)\n *   .where(arrayContains(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContained to find if an array contains all elements of a column or expression\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContains<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContains<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContains(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContains requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} @> ${array}`;\n\t}\n\n\treturn sql`${column} @> ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that the list passed as the second argument contains\n * all elements of a column or expression.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both,\n * // but filtering posts that have additional tags.\n * db.select().from(posts)\n *   .where(arrayContained(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayOverlaps to find if a column or expression contains any elements of an array\n */\nexport function arrayContained<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayContained<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayContained(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayContained requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} <@ ${array}`;\n\t}\n\n\treturn sql`${column} <@ ${bindIfParam(values, column)}`;\n}\n\n/**\n * Test that a column or expression contains any elements of\n * the list passed as the second argument.\n *\n * ## Throws\n *\n * The argument passed in the second array can't be empty:\n * if an empty is provided, this method will throw.\n *\n * ## Examples\n *\n * ```ts\n * // Select posts where its tags contain \"Typescript\", \"ORM\" or both.\n * db.select().from(posts)\n *   .where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']))\n * ```\n *\n * @see arrayContains to find if a column or expression contains all elements of an array\n * @see arrayContained to find if an array contains all elements of a column or expression\n */\nexport function arrayOverlaps<T>(\n\tcolumn: SQL.Aliased<T>,\n\tvalues: (T | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<TColumn extends Column>(\n\tcolumn: TColumn,\n\tvalues: (GetColumnData<TColumn, 'raw'> | Placeholder) | SQLWrapper,\n): SQL;\nexport function arrayOverlaps<T extends SQLWrapper>(\n\tcolumn: Exclude<T, SQL.Aliased | Column>,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL;\nexport function arrayOverlaps(\n\tcolumn: SQLWrapper,\n\tvalues: (unknown | Placeholder)[] | SQLWrapper,\n): SQL {\n\tif (Array.isArray(values)) {\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('arrayOverlaps requires at least one value');\n\t\t}\n\t\tconst array = sql`${bindIfParam(values, column)}`;\n\t\treturn sql`${column} && ${array}`;\n\t}\n\n\treturn sql`${column} && ${bindIfParam(values, column)}`;\n}\n", "import type { AnyColumn } from '../../column.ts';\nimport type { SQL, SQLWrapper } from '../sql.ts';\nimport { sql } from '../sql.ts';\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in ascending\n * order. By the SQL standard, ascending order is the\n * default, so it is not usually necessary to specify\n * ascending sort order.\n *\n * ## Examples\n *\n * ```ts\n * // Return cars, starting with the oldest models\n * // and going in ascending order to the newest.\n * db.select().from(cars)\n *   .orderBy(asc(cars.year));\n * ```\n *\n * @see desc to sort in descending order\n */\nexport function asc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} asc`;\n}\n\n/**\n * Used in sorting, this specifies that the given\n * column or expression should be sorted in descending\n * order.\n *\n * ## Examples\n *\n * ```ts\n * // Select users, with the most recently created\n * // records coming first.\n * db.select().from(users)\n *   .orderBy(desc(users.createdAt));\n * ```\n *\n * @see asc to sort in ascending order\n */\nexport function desc(column: AnyColumn | SQLWrapper): SQL {\n\treturn sql`${column} desc`;\n}\n", "export * from './conditions.ts';\nexport * from './select.ts';\n", "import { type AnyTable, getTableUniqueName, type InferModelFromColumns, Table } from '~/table.ts';\nimport { type AnyColumn, Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { PrimaryKeyBuilder } from './pg-core/primary-keys.ts';\nimport {\n\tand,\n\tasc,\n\tbetween,\n\tdesc,\n\teq,\n\texists,\n\tgt,\n\tgte,\n\tilike,\n\tinArray,\n\tisNotNull,\n\tisNull,\n\tlike,\n\tlt,\n\tlte,\n\tne,\n\tnot,\n\tnotBetween,\n\tnotExists,\n\tnotIlike,\n\tnotInArray,\n\tnotLike,\n\tor,\n} from './sql/expressions/index.ts';\nimport { type Placeholder, SQL, sql } from './sql/sql.ts';\nimport type { Assume, ColumnsWithTable, Equal, Simplify, ValueOrArray } from './utils.ts';\n\nexport abstract class Relation<TTableName extends string = string> {\n\tstatic readonly [entityKind]: string = 'Relation';\n\n\tdeclare readonly $brand: 'Relation';\n\treadonly referencedTableName: TTableName;\n\tfieldName!: string;\n\n\tconstructor(\n\t\treadonly sourceTable: Table,\n\t\treadonly referencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly relationName: string | undefined,\n\t) {\n\t\tthis.referencedTableName = referencedTable[Table.Symbol.Name] as TTableName;\n\t}\n\n\tabstract withFieldName(fieldName: string): Relation<TTableName>;\n}\n\nexport class Relations<\n\tTTableName extends string = string,\n\tTConfig extends Record<string, Relation> = Record<string, Relation>,\n> {\n\tstatic readonly [entityKind]: string = 'Relations';\n\n\tdeclare readonly $brand: 'Relations';\n\n\tconstructor(\n\t\treadonly table: AnyTable<{ name: TTableName }>,\n\t\treadonly config: (helpers: TableRelationsHelpers<TTableName>) => TConfig,\n\t) {}\n}\n\nexport class One<\n\tTTableName extends string = string,\n\tTIsNullable extends boolean = boolean,\n> extends Relation<TTableName> {\n\tstatic readonly [entityKind]: string = 'One';\n\n\tdeclare protected $relationBrand: 'One';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config:\n\t\t\t| RelationConfig<\n\t\t\t\tTTableName,\n\t\t\t\tstring,\n\t\t\t\tAnyColumn<{ tableName: TTableName }>[]\n\t\t\t>\n\t\t\t| undefined,\n\t\treadonly isNullable: TIsNullable,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): One<TTableName> {\n\t\tconst relation = new One(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t\tthis.isNullable,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport class Many<TTableName extends string> extends Relation<TTableName> {\n\tstatic readonly [entityKind]: string = 'Many';\n\n\tdeclare protected $relationBrand: 'Many';\n\n\tconstructor(\n\t\tsourceTable: Table,\n\t\treferencedTable: AnyTable<{ name: TTableName }>,\n\t\treadonly config: { relationName: string } | undefined,\n\t) {\n\t\tsuper(sourceTable, referencedTable, config?.relationName);\n\t}\n\n\twithFieldName(fieldName: string): Many<TTableName> {\n\t\tconst relation = new Many(\n\t\t\tthis.sourceTable,\n\t\t\tthis.referencedTable,\n\t\t\tthis.config,\n\t\t);\n\t\trelation.fieldName = fieldName;\n\t\treturn relation;\n\t}\n}\n\nexport type TableRelationsKeysOnly<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n\tK extends keyof TSchema,\n> = TSchema[K] extends Relations<TTableName> ? K : never;\n\nexport type ExtractTableRelationsFromSchema<\n\tTSchema extends Record<string, unknown>,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TableRelationsKeysOnly<\n\t\t\t\tTSchema,\n\t\t\t\tTTableName,\n\t\t\t\tK\n\t\t\t>\n\t\t]: TSchema[K] extends Relations<TTableName, infer TConfig> ? TConfig : never;\n\t}\n>;\n\nexport type ExtractObjectValues<T> = T[keyof T];\n\nexport type ExtractRelationsFromTableExtraConfigSchema<\n\tTConfig extends unknown[],\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TConfig as TConfig[K] extends Relations<any> ? K\n\t\t\t\t: never\n\t\t]: TConfig[K] extends Relations<infer TRelationConfig> ? TRelationConfig\n\t\t\t: never;\n\t}\n>;\n\nexport function getOperators() {\n\treturn {\n\t\tand,\n\t\tbetween,\n\t\teq,\n\t\texists,\n\t\tgt,\n\t\tgte,\n\t\tilike,\n\t\tinArray,\n\t\tisNull,\n\t\tisNotNull,\n\t\tlike,\n\t\tlt,\n\t\tlte,\n\t\tne,\n\t\tnot,\n\t\tnotBetween,\n\t\tnotExists,\n\t\tnotLike,\n\t\tnotIlike,\n\t\tnotInArray,\n\t\tor,\n\t\tsql,\n\t};\n}\n\nexport type Operators = ReturnType<typeof getOperators>;\n\nexport function getOrderByOperators() {\n\treturn {\n\t\tsql,\n\t\tasc,\n\t\tdesc,\n\t};\n}\n\nexport type OrderByOperators = ReturnType<typeof getOrderByOperators>;\n\nexport type FindTableByDBName<\n\tTSchema extends TablesRelationalConfig,\n\tTTableName extends string,\n> = ExtractObjectValues<\n\t{\n\t\t[\n\t\t\tK in keyof TSchema as TSchema[K]['dbName'] extends TTableName ? K\n\t\t\t\t: never\n\t\t]: TSchema[K];\n\t}\n>;\n\nexport type DBQueryConfig<\n\tTRelationType extends 'one' | 'many' = 'one' | 'many',\n\tTIsRoot extends boolean = boolean,\n\tTSchema extends TablesRelationalConfig = TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig = TableRelationalConfig,\n> =\n\t& {\n\t\tcolumns?: {\n\t\t\t[K in keyof TTableConfig['columns']]?: boolean;\n\t\t};\n\t\twith?: {\n\t\t\t[K in keyof TTableConfig['relations']]?:\n\t\t\t\t| true\n\t\t\t\t| DBQueryConfig<\n\t\t\t\t\tTTableConfig['relations'][K] extends One ? 'one' : 'many',\n\t\t\t\t\tfalse,\n\t\t\t\t\tTSchema,\n\t\t\t\t\tFindTableByDBName<\n\t\t\t\t\t\tTSchema,\n\t\t\t\t\t\tTTableConfig['relations'][K]['referencedTableName']\n\t\t\t\t\t>\n\t\t\t\t>;\n\t\t};\n\t\textras?:\n\t\t\t| Record<string, SQL.Aliased>\n\t\t\t| ((\n\t\t\t\tfields: Simplify<\n\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t>,\n\t\t\t\toperators: { sql: Operators['sql'] },\n\t\t\t) => Record<string, SQL.Aliased>);\n\t}\n\t& (TRelationType extends 'many' ?\n\t\t\t& {\n\t\t\t\twhere?:\n\t\t\t\t\t| SQL\n\t\t\t\t\t| undefined\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: Operators,\n\t\t\t\t\t) => SQL | undefined);\n\t\t\t\torderBy?:\n\t\t\t\t\t| ValueOrArray<AnyColumn | SQL>\n\t\t\t\t\t| ((\n\t\t\t\t\t\tfields: Simplify<\n\t\t\t\t\t\t\t[TTableConfig['columns']] extends [never] ? {}\n\t\t\t\t\t\t\t\t: TTableConfig['columns']\n\t\t\t\t\t\t>,\n\t\t\t\t\t\toperators: OrderByOperators,\n\t\t\t\t\t) => ValueOrArray<AnyColumn | SQL>);\n\t\t\t\tlimit?: number | Placeholder;\n\t\t\t}\n\t\t\t& (TIsRoot extends true ? {\n\t\t\t\t\toffset?: number | Placeholder;\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t: {});\n\nexport interface TableRelationalConfig {\n\ttsName: string;\n\tdbName: string;\n\tcolumns: Record<string, Column>;\n\trelations: Record<string, Relation>;\n\tprimaryKey: AnyColumn[];\n\tschema?: string;\n}\n\nexport type TablesRelationalConfig = Record<string, TableRelationalConfig>;\n\nexport interface RelationalSchemaConfig<\n\tTSchema extends TablesRelationalConfig,\n> {\n\tfullSchema: Record<string, unknown>;\n\tschema: TSchema;\n\ttableNamesMap: Record<string, string>;\n}\n\nexport type ExtractTablesWithRelations<\n\tTSchema extends Record<string, unknown>,\n> = {\n\t[\n\t\tK in keyof TSchema as TSchema[K] extends Table ? K\n\t\t\t: never\n\t]: TSchema[K] extends Table ? {\n\t\t\ttsName: K & string;\n\t\t\tdbName: TSchema[K]['_']['name'];\n\t\t\tcolumns: TSchema[K]['_']['columns'];\n\t\t\trelations: ExtractTableRelationsFromSchema<\n\t\t\t\tTSchema,\n\t\t\t\tTSchema[K]['_']['name']\n\t\t\t>;\n\t\t\tprimaryKey: AnyColumn[];\n\t\t}\n\t\t: never;\n};\n\nexport type ReturnTypeOrValue<T> = T extends (...args: any[]) => infer R ? R\n\t: T;\n\nexport type BuildRelationResult<\n\tTSchema extends TablesRelationalConfig,\n\tTInclude,\n\tTRelations extends Record<string, Relation>,\n> = {\n\t[\n\t\tK in\n\t\t\t& NonUndefinedKeysOnly<TInclude>\n\t\t\t& keyof TRelations\n\t]: TRelations[K] extends infer TRel extends Relation ? BuildQueryResult<\n\t\t\tTSchema,\n\t\t\tFindTableByDBName<TSchema, TRel['referencedTableName']>,\n\t\t\tAssume<TInclude[K], true | Record<string, unknown>>\n\t\t> extends infer TResult ? TRel extends One ?\n\t\t\t\t\t| TResult\n\t\t\t\t\t| (Equal<TRel['isNullable'], false> extends true ? null : never)\n\t\t\t: TResult[]\n\t\t: never\n\t\t: never;\n};\n\nexport type NonUndefinedKeysOnly<T> =\n\t& ExtractObjectValues<\n\t\t{\n\t\t\t[K in keyof T as T[K] extends undefined ? never : K]: K;\n\t\t}\n\t>\n\t& keyof T;\n\nexport type BuildQueryResult<\n\tTSchema extends TablesRelationalConfig,\n\tTTableConfig extends TableRelationalConfig,\n\tTFullSelection extends true | Record<string, unknown>,\n> = Equal<TFullSelection, true> extends true ? InferModelFromColumns<TTableConfig['columns']>\n\t: TFullSelection extends Record<string, unknown> ? Simplify<\n\t\t\t& (TFullSelection['columns'] extends Record<string, unknown> ? InferModelFromColumns<\n\t\t\t\t\t{\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tK in Equal<\n\t\t\t\t\t\t\t\tExclude<\n\t\t\t\t\t\t\t\t\tTFullSelection['columns'][\n\t\t\t\t\t\t\t\t\t\t& keyof TFullSelection['columns']\n\t\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t> extends true ? Exclude<\n\t\t\t\t\t\t\t\t\tkeyof TTableConfig['columns'],\n\t\t\t\t\t\t\t\t\tNonUndefinedKeysOnly<TFullSelection['columns']>\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t& {\n\t\t\t\t\t\t\t\t\t\t[K in keyof TFullSelection['columns']]: Equal<\n\t\t\t\t\t\t\t\t\t\t\tTFullSelection['columns'][K],\n\t\t\t\t\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t\t\t\t\t> extends true ? K\n\t\t\t\t\t\t\t\t\t\t\t: never;\n\t\t\t\t\t\t\t\t\t}[keyof TFullSelection['columns']]\n\t\t\t\t\t\t\t\t\t& keyof TTableConfig['columns']\n\t\t\t\t\t\t]: TTableConfig['columns'][K];\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t: InferModelFromColumns<TTableConfig['columns']>)\n\t\t\t& (TFullSelection['extras'] extends\n\t\t\t\t| Record<string, unknown>\n\t\t\t\t| ((...args: any[]) => Record<string, unknown>) ? {\n\t\t\t\t\t[\n\t\t\t\t\t\tK in NonUndefinedKeysOnly<\n\t\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>\n\t\t\t\t\t\t>\n\t\t\t\t\t]: Assume<\n\t\t\t\t\t\tReturnTypeOrValue<TFullSelection['extras']>[K],\n\t\t\t\t\t\tSQL.Aliased\n\t\t\t\t\t>['_']['type'];\n\t\t\t\t}\n\t\t\t\t: {})\n\t\t\t& (TFullSelection['with'] extends Record<string, unknown> ? BuildRelationResult<\n\t\t\t\t\tTSchema,\n\t\t\t\t\tTFullSelection['with'],\n\t\t\t\t\tTTableConfig['relations']\n\t\t\t\t>\n\t\t\t\t: {})\n\t\t>\n\t: never;\n\nexport interface RelationConfig<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> {\n\trelationName?: string;\n\tfields: TColumns;\n\treferences: ColumnsWithTable<TTableName, TForeignTableName, TColumns>;\n}\n\nexport function extractTablesRelationalConfig<\n\tTTables extends TablesRelationalConfig,\n>(\n\tschema: Record<string, unknown>,\n\tconfigHelpers: (table: Table) => any,\n): { tables: TTables; tableNamesMap: Record<string, string> } {\n\tif (\n\t\tObject.keys(schema).length === 1\n\t\t&& 'default' in schema\n\t\t&& !is(schema['default'], Table)\n\t) {\n\t\tschema = schema['default'] as Record<string, unknown>;\n\t}\n\n\t// table DB name -> schema table key\n\tconst tableNamesMap: Record<string, string> = {};\n\t// Table relations found before their tables - need to buffer them until we know the schema table key\n\tconst relationsBuffer: Record<\n\t\tstring,\n\t\t{ relations: Record<string, Relation>; primaryKey?: AnyColumn[] }\n\t> = {};\n\tconst tablesConfig: TablesRelationalConfig = {};\n\tfor (const [key, value] of Object.entries(schema)) {\n\t\tif (is(value, Table)) {\n\t\t\tconst dbName = getTableUniqueName(value);\n\t\t\tconst bufferedRelations = relationsBuffer[dbName];\n\t\t\ttableNamesMap[dbName] = key;\n\t\t\ttablesConfig[key] = {\n\t\t\t\ttsName: key,\n\t\t\t\tdbName: value[Table.Symbol.Name],\n\t\t\t\tschema: value[Table.Symbol.Schema],\n\t\t\t\tcolumns: value[Table.Symbol.Columns],\n\t\t\t\trelations: bufferedRelations?.relations ?? {},\n\t\t\t\tprimaryKey: bufferedRelations?.primaryKey ?? [],\n\t\t\t};\n\n\t\t\t// Fill in primary keys\n\t\t\tfor (\n\t\t\t\tconst column of Object.values(\n\t\t\t\t\t(value as Table)[Table.Symbol.Columns],\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (column.primary) {\n\t\t\t\t\ttablesConfig[key]!.primaryKey.push(column);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.((value as Table)[Table.Symbol.ExtraConfigColumns]);\n\t\t\tif (extraConfig) {\n\t\t\t\tfor (const configEntry of Object.values(extraConfig)) {\n\t\t\t\t\tif (is(configEntry, PrimaryKeyBuilder)) {\n\t\t\t\t\t\ttablesConfig[key]!.primaryKey.push(...configEntry.columns);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (is(value, Relations)) {\n\t\t\tconst dbName = getTableUniqueName(value.table);\n\t\t\tconst tableName = tableNamesMap[dbName];\n\t\t\tconst relations: Record<string, Relation> = value.config(\n\t\t\t\tconfigHelpers(value.table),\n\t\t\t);\n\t\t\tlet primaryKey: AnyColumn[] | undefined;\n\n\t\t\tfor (const [relationName, relation] of Object.entries(relations)) {\n\t\t\t\tif (tableName) {\n\t\t\t\t\tconst tableConfig = tablesConfig[tableName]!;\n\t\t\t\t\ttableConfig.relations[relationName] = relation;\n\t\t\t\t\tif (primaryKey) {\n\t\t\t\t\t\ttableConfig.primaryKey.push(...primaryKey);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!(dbName in relationsBuffer)) {\n\t\t\t\t\t\trelationsBuffer[dbName] = {\n\t\t\t\t\t\t\trelations: {},\n\t\t\t\t\t\t\tprimaryKey,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\trelationsBuffer[dbName]!.relations[relationName] = relation;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { tables: tablesConfig as TTables, tableNamesMap };\n}\n\nexport function relations<\n\tTTableName extends string,\n\tTRelations extends Record<string, Relation<any>>,\n>(\n\ttable: AnyTable<{ name: TTableName }>,\n\trelations: (helpers: TableRelationsHelpers<TTableName>) => TRelations,\n): Relations<TTableName, TRelations> {\n\treturn new Relations<TTableName, TRelations>(\n\t\ttable,\n\t\t(helpers: TableRelationsHelpers<TTableName>) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(relations(helpers)).map(([key, value]) => [\n\t\t\t\t\tkey,\n\t\t\t\t\tvalue.withFieldName(key),\n\t\t\t\t]),\n\t\t\t) as TRelations,\n\t);\n}\n\nexport function createOne<TTableName extends string>(sourceTable: Table) {\n\treturn function one<\n\t\tTForeignTable extends Table,\n\t\tTColumns extends [\n\t\t\tAnyColumn<{ tableName: TTableName }>,\n\t\t\t...AnyColumn<{ tableName: TTableName }>[],\n\t\t],\n\t>(\n\t\ttable: TForeignTable,\n\t\tconfig?: RelationConfig<TTableName, TForeignTable['_']['name'], TColumns>,\n\t): One<\n\t\tTForeignTable['_']['name'],\n\t\tEqual<TColumns[number]['_']['notNull'], true>\n\t> {\n\t\treturn new One(\n\t\t\tsourceTable,\n\t\t\ttable,\n\t\t\tconfig,\n\t\t\t(config?.fields.reduce<boolean>((res, f) => res && f.notNull, true)\n\t\t\t\t?? false) as Equal<TColumns[number]['_']['notNull'], true>,\n\t\t);\n\t};\n}\n\nexport function createMany(sourceTable: Table) {\n\treturn function many<TForeignTable extends Table>(\n\t\treferencedTable: TForeignTable,\n\t\tconfig?: { relationName: string },\n\t): Many<TForeignTable['_']['name']> {\n\t\treturn new Many(sourceTable, referencedTable, config);\n\t};\n}\n\nexport interface NormalizedRelation {\n\tfields: AnyColumn[];\n\treferences: AnyColumn[];\n}\n\nexport function normalizeRelation(\n\tschema: TablesRelationalConfig,\n\ttableNamesMap: Record<string, string>,\n\trelation: Relation,\n): NormalizedRelation {\n\tif (is(relation, One) && relation.config) {\n\t\treturn {\n\t\t\tfields: relation.config.fields,\n\t\t\treferences: relation.config.references,\n\t\t};\n\t}\n\n\tconst referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];\n\tif (!referencedTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${relation.referencedTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst referencedTableConfig = schema[referencedTableTsName];\n\tif (!referencedTableConfig) {\n\t\tthrow new Error(`Table \"${referencedTableTsName}\" not found in schema`);\n\t}\n\n\tconst sourceTable = relation.sourceTable;\n\tconst sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];\n\tif (!sourceTableTsName) {\n\t\tthrow new Error(\n\t\t\t`Table \"${sourceTable[Table.Symbol.Name]}\" not found in schema`,\n\t\t);\n\t}\n\n\tconst reverseRelations: Relation[] = [];\n\tfor (\n\t\tconst referencedTableRelation of Object.values(\n\t\t\treferencedTableConfig.relations,\n\t\t)\n\t) {\n\t\tif (\n\t\t\t(relation.relationName\n\t\t\t\t&& relation !== referencedTableRelation\n\t\t\t\t&& referencedTableRelation.relationName === relation.relationName)\n\t\t\t|| (!relation.relationName\n\t\t\t\t&& referencedTableRelation.referencedTable === relation.sourceTable)\n\t\t) {\n\t\t\treverseRelations.push(referencedTableRelation);\n\t\t}\n\t}\n\n\tif (reverseRelations.length > 1) {\n\t\tthrow relation.relationName\n\t\t\t? new Error(\n\t\t\t\t`There are multiple relations with name \"${relation.relationName}\" in table \"${referencedTableTsName}\"`,\n\t\t\t)\n\t\t\t: new Error(\n\t\t\t\t`There are multiple relations between \"${referencedTableTsName}\" and \"${\n\t\t\t\t\trelation.sourceTable[Table.Symbol.Name]\n\t\t\t\t}\". Please specify relation name`,\n\t\t\t);\n\t}\n\n\tif (\n\t\treverseRelations[0]\n\t\t&& is(reverseRelations[0], One)\n\t\t&& reverseRelations[0].config\n\t) {\n\t\treturn {\n\t\t\tfields: reverseRelations[0].config.references,\n\t\t\treferences: reverseRelations[0].config.fields,\n\t\t};\n\t}\n\n\tthrow new Error(\n\t\t`There is not enough information to infer relation \"${sourceTableTsName}.${relation.fieldName}\"`,\n\t);\n}\n\nexport function createTableRelationsHelpers<TTableName extends string>(\n\tsourceTable: AnyTable<{ name: TTableName }>,\n) {\n\treturn {\n\t\tone: createOne<TTableName>(sourceTable),\n\t\tmany: createMany(sourceTable),\n\t};\n}\n\nexport type TableRelationsHelpers<TTableName extends string> = ReturnType<\n\ttypeof createTableRelationsHelpers<TTableName>\n>;\n\nexport interface BuildRelationalQueryResult<\n\tTTable extends Table = Table,\n\tTColumn extends Column = Column,\n> {\n\ttableTsKey: string;\n\tselection: {\n\t\tdbKey: string;\n\t\ttsKey: string;\n\t\tfield: TColumn | SQL | SQL.Aliased;\n\t\trelationTableTsKey: string | undefined;\n\t\tisJson: boolean;\n\t\tisExtra?: boolean;\n\t\tselection: BuildRelationalQueryResult<TTable>['selection'];\n\t}[];\n\tsql: TTable | SQL;\n}\n\nexport function mapRelationalRow(\n\ttablesConfig: TablesRelationalConfig,\n\ttableConfig: TableRelationalConfig,\n\trow: unknown[],\n\tbuildQueryResultSelection: BuildRelationalQueryResult['selection'],\n\tmapColumnValue: (value: unknown) => unknown = (value) => value,\n): Record<string, unknown> {\n\tconst result: Record<string, unknown> = {};\n\n\tfor (\n\t\tconst [\n\t\t\tselectionItemIndex,\n\t\t\tselectionItem,\n\t\t] of buildQueryResultSelection.entries()\n\t) {\n\t\tif (selectionItem.isJson) {\n\t\t\tconst relation = tableConfig.relations[selectionItem.tsKey]!;\n\t\t\tconst rawSubRows = row[selectionItemIndex] as\n\t\t\t\t| unknown[]\n\t\t\t\t| null\n\t\t\t\t| [null]\n\t\t\t\t| string;\n\t\t\tconst subRows = typeof rawSubRows === 'string'\n\t\t\t\t? (JSON.parse(rawSubRows) as unknown[])\n\t\t\t\t: rawSubRows;\n\t\t\tresult[selectionItem.tsKey] = is(relation, One)\n\t\t\t\t? subRows\n\t\t\t\t\t&& mapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRows,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t: (subRows as unknown[][]).map((subRow) =>\n\t\t\t\t\tmapRelationalRow(\n\t\t\t\t\t\ttablesConfig,\n\t\t\t\t\t\ttablesConfig[selectionItem.relationTableTsKey!]!,\n\t\t\t\t\t\tsubRow,\n\t\t\t\t\t\tselectionItem.selection,\n\t\t\t\t\t\tmapColumnValue,\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t} else {\n\t\t\tconst value = mapColumnValue(row[selectionItemIndex]);\n\t\t\tconst field = selectionItem.field!;\n\t\t\tlet decoder;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tresult[selectionItem.tsKey] = value === null ? null : decoder.mapFromDriverValue(value);\n\t\t}\n\t}\n\n\treturn result;\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport type { Relation } from './relations.ts';\nimport type { View } from './sql/sql.ts';\nimport { SQL, sql } from './sql/sql.ts';\nimport { Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class ColumnAliasProxyHandler<TColumn extends Column> implements ProxyHandler<TColumn> {\n\tstatic readonly [entityKind]: string = 'ColumnAliasProxyHandler';\n\n\tconstructor(private table: Table | View) {}\n\n\tget(columnObj: TColumn, prop: string | symbol): any {\n\t\tif (prop === 'table') {\n\t\t\treturn this.table;\n\t\t}\n\n\t\treturn columnObj[prop as keyof TColumn];\n\t}\n}\n\nexport class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'TableAliasProxyHandler';\n\n\tconstructor(private alias: string, private replaceOriginalName: boolean) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === Table.Symbol.IsAlias) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (prop === Table.Symbol.Name) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {\n\t\t\treturn this.alias;\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...target[ViewBaseConfig as keyof typeof target],\n\t\t\t\tname: this.alias,\n\t\t\t\tisAlias: true,\n\t\t\t};\n\t\t}\n\n\t\tif (prop === Table.Symbol.Columns) {\n\t\t\tconst columns = (target as Table)[Table.Symbol.Columns];\n\t\t\tif (!columns) {\n\t\t\t\treturn columns;\n\t\t\t}\n\n\t\t\tconst proxiedColumns: { [key: string]: any } = {};\n\n\t\t\tObject.keys(columns).map((key) => {\n\t\t\t\tproxiedColumns[key] = new Proxy(\n\t\t\t\t\tcolumns[key]!,\n\t\t\t\t\tnew ColumnAliasProxyHandler(new Proxy(target, this)),\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn proxiedColumns;\n\t\t}\n\n\t\tconst value = target[prop as keyof typeof target];\n\t\tif (is(value, Column)) {\n\t\t\treturn new Proxy(value as AnyColumn, new ColumnAliasProxyHandler(new Proxy(target, this)));\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\nexport class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {\n\tstatic readonly [entityKind]: string = 'RelationTableAliasProxyHandler';\n\n\tconstructor(private alias: string) {}\n\n\tget(target: T, prop: string | symbol): any {\n\t\tif (prop === 'sourceTable') {\n\t\t\treturn aliasedTable(target.sourceTable, this.alias);\n\t\t}\n\n\t\treturn target[prop as keyof typeof target];\n\t}\n}\n\nexport function aliasedTable<T extends Table>(table: T, tableAlias: string): T {\n\treturn new Proxy(table, new TableAliasProxyHandler(tableAlias, false));\n}\n\nexport function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T {\n\treturn new Proxy(relation, new RelationTableAliasProxyHandler(tableAlias));\n}\n\nexport function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T {\n\treturn new Proxy(\n\t\tcolumn,\n\t\tnew ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false))),\n\t);\n}\n\nexport function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased {\n\treturn new SQL.Aliased(mapColumnsInSQLToAlias(query.sql, alias), query.fieldAlias);\n}\n\nexport function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL {\n\treturn sql.join(query.queryChunks.map((c) => {\n\t\tif (is(c, Column)) {\n\t\t\treturn aliasedTableColumn(c, alias);\n\t\t}\n\t\tif (is(c, SQL)) {\n\t\t\treturn mapColumnsInSQLToAlias(c, alias);\n\t\t}\n\t\tif (is(c, SQL.Aliased)) {\n\t\t\treturn mapColumnsInAliasedSQLToAlias(c, alias);\n\t\t}\n\t\treturn c;\n\t}));\n}\n", "import { ColumnAliasProxyHandler, TableAliasProxyHandler } from './alias.ts';\nimport { Column } from './column.ts';\nimport { entityKind, is } from './entity.ts';\nimport { SQL, View } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\nexport class SelectionProxyHandler<T extends Subquery | Record<string, unknown> | View>\n\timplements ProxyHandler<Subquery | Record<string, unknown> | View>\n{\n\tstatic readonly [entityKind]: string = 'SelectionProxyHandler';\n\n\tprivate config: {\n\t\t/**\n\t\t * Table alias for the columns\n\t\t */\n\t\talias?: string;\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL.Aliased` and it's not a selection field (from a subquery)\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `alias` - return the field alias\n\t\t */\n\t\tsqlAliasedBehavior: 'sql' | 'alias';\n\t\t/**\n\t\t * What to do when a field is an instance of `SQL` and it doesn't have an alias declared\n\t\t *\n\t\t * `sql` - return the underlying SQL expression\n\t\t *\n\t\t * `error` - return a DrizzleTypeError on type level and throw an error on runtime\n\t\t */\n\t\tsqlBehavior: 'sql' | 'error';\n\n\t\t/**\n\t\t * Whether to replace the original name of the column with the alias\n\t\t * Should be set to `true` for views creation\n\t\t * @default false\n\t\t */\n\t\treplaceOriginalName?: boolean;\n\t};\n\n\tconstructor(config: SelectionProxyHandler<T>['config']) {\n\t\tthis.config = { ...config };\n\t}\n\n\tget(subquery: T, prop: string | symbol): any {\n\t\tif (prop === '_') {\n\t\t\treturn {\n\t\t\t\t...subquery['_' as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as Subquery)._.selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (prop === ViewBaseConfig) {\n\t\t\treturn {\n\t\t\t\t...subquery[ViewBaseConfig as keyof typeof subquery],\n\t\t\t\tselectedFields: new Proxy(\n\t\t\t\t\t(subquery as View)[ViewBaseConfig].selectedFields,\n\t\t\t\t\tthis as ProxyHandler<Record<string, unknown>>,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tif (typeof prop === 'symbol') {\n\t\t\treturn subquery[prop as keyof typeof subquery];\n\t\t}\n\n\t\tconst columns = is(subquery, Subquery)\n\t\t\t? subquery._.selectedFields\n\t\t\t: is(subquery, View)\n\t\t\t? subquery[ViewBaseConfig].selectedFields\n\t\t\t: subquery;\n\t\tconst value: unknown = columns[prop as keyof typeof columns];\n\n\t\tif (is(value, SQL.Aliased)) {\n\t\t\t// Never return the underlying SQL expression for a field previously selected in a subquery\n\t\t\tif (this.config.sqlAliasedBehavior === 'sql' && !value.isSelectionField) {\n\t\t\t\treturn value.sql;\n\t\t\t}\n\n\t\t\tconst newValue = value.clone();\n\t\t\tnewValue.isSelectionField = true;\n\t\t\treturn newValue;\n\t\t}\n\n\t\tif (is(value, SQL)) {\n\t\t\tif (this.config.sqlBehavior === 'sql') {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(\n\t\t\t\t`You tried to reference \"${prop}\" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using \".as('alias')\" method.`,\n\t\t\t);\n\t\t}\n\n\t\tif (is(value, Column)) {\n\t\t\tif (this.config.alias) {\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tvalue,\n\t\t\t\t\tnew ColumnAliasProxyHandler(\n\t\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\t\tvalue.table,\n\t\t\t\t\t\t\tnew TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false),\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tif (typeof value !== 'object' || value === null) {\n\t\t\treturn value;\n\t\t}\n\n\t\treturn new Proxy(value, new SelectionProxyHandler(this.config));\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport abstract class QueryPromise<T> implements Promise<T> {\n\tstatic readonly [entityKind]: string = 'QueryPromise';\n\n\t[Symbol.toStringTag] = 'QueryPromise';\n\n\tcatch<TResult = never>(\n\t\tonRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined,\n\t): Promise<T | TResult> {\n\t\treturn this.then(undefined, onRejected);\n\t}\n\n\tfinally(onFinally?: (() => void) | null | undefined): Promise<T> {\n\t\treturn this.then(\n\t\t\t(value) => {\n\t\t\t\tonFinally?.();\n\t\t\t\treturn value;\n\t\t\t},\n\t\t\t(reason) => {\n\t\t\t\tonFinally?.();\n\t\t\t\tthrow reason;\n\t\t\t},\n\t\t);\n\t}\n\n\tthen<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n\t\tonRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.execute().then(onFulfilled, onRejected);\n\t}\n\n\tabstract execute(): Promise<T>;\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilder, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type SQLiteTableExtraConfig = Record<\n\tstring,\n\t| IndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<SQLiteColumn<any>>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:SQLiteInlineForeignKeys');\n\nexport class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteTable';\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, SQLiteColumn>) => SQLiteTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type SQLiteTableWithColumns<T extends TableConfig> =\n\t& SQLiteTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport interface SQLiteTableFn<TSchema extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\t): SQLiteTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>;\n}\n\nfunction sqliteTableBase<\n\tTTableName extends string,\n\tTColumnsMap extends Record<string, SQLiteColumnBuilderBase>,\n\tTSchema extends string | undefined,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig,\n\tschema?: TSchema,\n\tbaseName = name,\n): SQLiteTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchema;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\tdialect: 'sqlite';\n}> {\n\tconst rawTable = new SQLiteTable<{\n\t\tname: TTableName;\n\t\tschema: TSchema;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\t\tdialect: 'sqlite';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as SQLiteColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'sqlite'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'sqlite'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig as (\n\t\t\tself: Record<string, SQLiteColumn>,\n\t\t) => SQLiteTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport const sqliteTable: SQLiteTableFn = (name, columns, extraConfig) => {\n\treturn sqliteTableBase(name, columns, extraConfig);\n};\n\nexport function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn sqliteTableBase(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import type { AnyColumn } from './column.ts';\nimport { Column } from './column.ts';\nimport { is } from './entity.ts';\nimport type { Logger } from './logger.ts';\nimport type { SelectedFieldsOrdered } from './operations.ts';\nimport type { TableLike } from './query-builders/select.types.ts';\nimport { Param, SQL, View } from './sql/sql.ts';\nimport type { DriverValueDecoder } from './sql/sql.ts';\nimport { Subquery } from './subquery.ts';\nimport { getTableName, Table } from './table.ts';\nimport { ViewBaseConfig } from './view-common.ts';\n\n/** @internal */\nexport function mapResultRow<TResult>(\n\tcolumns: SelectedFieldsOrdered<AnyColumn>,\n\trow: unknown[],\n\tjoinsNotNullableMap: Record<string, boolean> | undefined,\n): TResult {\n\t// Key -> nested object key, value -> table name if all fields in the nested object are from the same table, false otherwise\n\tconst nullifyMap: Record<string, string | false> = {};\n\n\tconst result = columns.reduce<Record<string, any>>(\n\t\t(result, { path, field }, columnIndex) => {\n\t\t\tlet decoder: DriverValueDecoder<unknown, unknown>;\n\t\t\tif (is(field, Column)) {\n\t\t\t\tdecoder = field;\n\t\t\t} else if (is(field, SQL)) {\n\t\t\t\tdecoder = field.decoder;\n\t\t\t} else {\n\t\t\t\tdecoder = field.sql.decoder;\n\t\t\t}\n\t\t\tlet node = result;\n\t\t\tfor (const [pathChunkIndex, pathChunk] of path.entries()) {\n\t\t\t\tif (pathChunkIndex < path.length - 1) {\n\t\t\t\t\tif (!(pathChunk in node)) {\n\t\t\t\t\t\tnode[pathChunk] = {};\n\t\t\t\t\t}\n\t\t\t\t\tnode = node[pathChunk];\n\t\t\t\t} else {\n\t\t\t\t\tconst rawValue = row[columnIndex]!;\n\t\t\t\t\tconst value = node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);\n\n\t\t\t\t\tif (joinsNotNullableMap && is(field, Column) && path.length === 2) {\n\t\t\t\t\t\tconst objectName = path[0]!;\n\t\t\t\t\t\tif (!(objectName in nullifyMap)) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = value === null ? getTableName(field.table) : false;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof nullifyMap[objectName] === 'string' && nullifyMap[objectName] !== getTableName(field.table)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnullifyMap[objectName] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t},\n\t\t{},\n\t);\n\n\t// Nullify all nested objects from nullifyMap that are nullable\n\tif (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {\n\t\tfor (const [objectName, tableName] of Object.entries(nullifyMap)) {\n\t\t\tif (typeof tableName === 'string' && !joinsNotNullableMap[tableName]) {\n\t\t\t\tresult[objectName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result as TResult;\n}\n\n/** @internal */\nexport function orderSelectedFields<TColumn extends AnyColumn>(\n\tfields: Record<string, unknown>,\n\tpathPrefix?: string[],\n): SelectedFieldsOrdered<TColumn> {\n\treturn Object.entries(fields).reduce<SelectedFieldsOrdered<AnyColumn>>((result, [name, field]) => {\n\t\tif (typeof name !== 'string') {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst newPath = pathPrefix ? [...pathPrefix, name] : [name];\n\t\tif (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {\n\t\t\tresult.push({ path: newPath, field });\n\t\t} else if (is(field, Table)) {\n\t\t\tresult.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));\n\t\t} else {\n\t\t\tresult.push(...orderSelectedFields(field as Record<string, unknown>, newPath));\n\t\t}\n\t\treturn result;\n\t}, []) as SelectedFieldsOrdered<TColumn>;\n}\n\nexport function haveSameKeys(left: Record<string, unknown>, right: Record<string, unknown>) {\n\tconst leftKeys = Object.keys(left);\n\tconst rightKeys = Object.keys(right);\n\n\tif (leftKeys.length !== rightKeys.length) {\n\t\treturn false;\n\t}\n\n\tfor (const [index, key] of leftKeys.entries()) {\n\t\tif (key !== rightKeys[index]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/** @internal */\nexport function mapUpdateSet(table: Table, values: Record<string, unknown>): UpdateSet {\n\tconst entries: [string, UpdateSet[string]][] = Object.entries(values)\n\t\t.filter(([, value]) => value !== undefined)\n\t\t.map(([key, value]) => {\n\t\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\t\tif (is(value, SQL)) {\n\t\t\t\treturn [key, value];\n\t\t\t} else {\n\t\t\t\treturn [key, new Param(value, table[Table.Symbol.Columns][key])];\n\t\t\t}\n\t\t});\n\n\tif (entries.length === 0) {\n\t\tthrow new Error('No values to set');\n\t}\n\n\treturn Object.fromEntries(entries);\n}\n\nexport type UpdateSet = Record<string, SQL | Param | null | undefined>;\n\nexport type OneOrMany<T> = T | T[];\n\nexport type Update<T, TUpdate> =\n\t& {\n\t\t[K in Exclude<keyof T, keyof TUpdate>]: T[K];\n\t}\n\t& TUpdate;\n\nexport type Simplify<T> =\n\t& {\n\t\t// @ts-ignore - \"Type parameter 'K' has a circular constraint\", not sure why\n\t\t[K in keyof T]: T[K];\n\t}\n\t& {};\n\nexport type SimplifyMappedType<T> = [T] extends [unknown] ? T : never;\n\nexport type ShallowRecord<K extends keyof any, T> = SimplifyMappedType<{ [P in K]: T }>;\n\nexport type Assume<T, U> = T extends U ? T : U;\n\nexport type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends (<T>() => T extends Y ? 1 : 2) ? true : false;\n\nexport interface DrizzleTypeError<T extends string> {\n\t$drizzleTypeError: T;\n}\n\nexport type ValueOrArray<T> = T | T[];\n\n/** @internal */\nexport function applyMixins(baseClass: any, extendedClasses: any[]) {\n\tfor (const extendedClass of extendedClasses) {\n\t\tfor (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {\n\t\t\tif (name === 'constructor') continue;\n\n\t\t\tObject.defineProperty(\n\t\t\t\tbaseClass.prototype,\n\t\t\t\tname,\n\t\t\t\tObject.getOwnPropertyDescriptor(extendedClass.prototype, name) || Object.create(null),\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport type Or<T1, T2> = T1 extends true ? true : T2 extends true ? true : false;\n\nexport type IfThenElse<If, Then, Else> = If extends true ? Then : Else;\n\nexport type PromiseOf<T> = T extends Promise<infer U> ? U : T;\n\nexport type Writable<T> = {\n\t-readonly [P in keyof T]: T[P];\n};\n\nexport function getTableColumns<T extends Table>(table: T): T['_']['columns'] {\n\treturn table[Table.Symbol.Columns];\n}\n\n/** @internal */\nexport function getTableLikeName(table: TableLike): string | undefined {\n\treturn is(table, Subquery)\n\t\t? table._.alias\n\t\t: is(table, View)\n\t\t? table[ViewBaseConfig].name\n\t\t: is(table, SQL)\n\t\t? undefined\n\t\t: table[Table.Symbol.IsAlias]\n\t\t? table[Table.Symbol.Name]\n\t\t: table[Table.Symbol.BaseName];\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyColumn<{ tableName: TForeignTableName }> };\n\nexport interface DrizzleConfig<TSchema extends Record<string, unknown> = Record<string, never>> {\n\tlogger?: boolean | Logger;\n\tschema?: TSchema;\n}\nexport type ValidateShape<T, ValidShape, TResult = T> = T extends ValidShape\n\t? Exclude<keyof T, keyof ValidShape> extends never ? TResult\n\t: DrizzleTypeError<\n\t\t`Invalid key(s): ${Exclude<(keyof T) & (string | number | bigint | boolean | null | undefined), keyof ValidShape>}`\n\t>\n\t: never;\n\nexport type KnownKeysOnly<T, U> = {\n\t[K in keyof T]: K extends keyof U ? T[K] : never;\n};\n\nexport type IsAny<T> = 0 extends (1 & T) ? true : false;\n", "import { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { type DrizzleTypeError, orderSelectedFields } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type SQLiteDeleteWithout<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tSQLiteDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['resultType'],\n\t\t\tT['_']['runResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type SQLiteDelete<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = SQLiteDeleteBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteDeleteReturningAll<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteReturning<\n\tT extends AnySQLiteDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteDeleteWithout<\n\tSQLiteDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tT['_']['dynamic'],\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteDeleteExecute<T extends AnySQLiteDeleteBase> = T['_']['returning'] extends undefined\n\t? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteDeletePrepare<T extends AnySQLiteDeleteBase> = SQLitePreparedQuery<{\n\ttype: T['_']['resultType'];\n\trun: T['_']['runResult'];\n\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t: T['_']['returning'][];\n\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t: T['_']['returning'] | undefined;\n\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t: any[][];\n\texecute: SQLiteDeleteExecute<T>;\n}>;\n\nexport type SQLiteDeleteDynamic<T extends AnySQLiteDeleteBase> = SQLiteDelete<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type AnySQLiteDeleteBase = SQLiteDeleteBase<any, any, any, any, any, any>;\n\nexport interface SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteDeleteBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteDelete';\n\n\t/** @internal */\n\tconfig: SQLiteDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteDeletePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteDeletePrepare<this>;\n\t}\n\n\tprepare(): SQLiteDeletePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(placeholderValues?: Record<string, unknown>): Promise<SQLiteDeleteExecute<this>> {\n\t\treturn this._prepare().execute(placeholderValues) as SQLiteDeleteExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { IndexColumn } from '~/sqlite-core/indexes.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { type DrizzleTypeError, mapUpdateSet, orderSelectedFields, type Simplify } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { SQLiteUpdateSetSource } from './update.ts';\n\nexport interface SQLiteInsertConfig<TTable extends SQLiteTable = SQLiteTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[];\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type SQLiteInsertValue<TTable extends SQLiteTable> = Simplify<\n\t{\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n>;\n\nexport class SQLiteInsertBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteInsertBuilder';\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: SQLiteInsertValue<TTable>): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(values: SQLiteInsertValue<TTable>[]): SQLiteInsertBase<TTable, TResultType, TRunResult>;\n\tvalues(\n\t\tvalues: SQLiteInsertValue<TTable> | SQLiteInsertValue<TTable>[],\n\t): SQLiteInsertBase<TTable, TResultType, TRunResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\t// if (mappedValues.length > 1 && mappedValues.some((t) => Object.keys(t).length === 0)) {\n\t\t// \tthrow new Error(\n\t\t// \t\t`One of the values you want to insert is empty. In SQLite you can insert only one empty object per statement. For this case Drizzle with use \"INSERT INTO ... DEFAULT VALUES\" syntax`,\n\t\t// \t);\n\t\t// }\n\n\t\treturn new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n}\n\nexport type SQLiteInsertWithout<T extends AnySQLiteInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tSQLiteInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['resultType'],\n\t\t\t\tT['_']['runResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type SQLiteInsertReturning<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertReturningAll<\n\tT extends AnySQLiteInsert,\n\tTDynamic extends boolean,\n> = SQLiteInsertWithout<\n\tSQLiteInsertBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteInsertOnConflictDoUpdateConfig<T extends AnySQLiteInsert> = {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated - use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: SQLiteUpdateSetSource<T['_']['table']>;\n};\n\nexport type SQLiteInsertDynamic<T extends AnySQLiteInsert> = SQLiteInsert<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteInsertExecute<T extends AnySQLiteInsert> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteInsertPrepare<T extends AnySQLiteInsert> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteInsertExecute<T>;\n\t}\n>;\n\nexport type AnySQLiteInsert = SQLiteInsertBase<any, any, any, any, any, any>;\n\nexport type SQLiteInsert<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = any,\n> = SQLiteInsertBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport interface SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tSQLWrapper,\n\tQueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>\n{\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteInsertBase<\n\tTTable extends SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteInsert';\n\n\t/** @internal */\n\tconfig: SQLiteInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: SQLiteInsertConfig['values'],\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values, withList };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): SQLiteInsertReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): SQLiteInsertReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteInsertWithout<AnySQLiteInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(config: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {}): this {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : sql``;\n\t\t\tthis.config.onConflict = sql`${targetSql} do nothing${whereSql}`;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     where: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(config: SQLiteInsertOnConflictDoUpdateConfig<this>): this {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst targetSql = Array.isArray(config.target) ? sql`${config.target}` : sql`${[config.target]}`;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict = sql`${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteInsertPrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteInsertPrepare<this>;\n\t}\n\n\tprepare(): SQLiteInsertPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteInsertExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteInsertExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\n\nexport class DrizzleError extends Error {\n\tstatic readonly [entityKind]: string = 'DrizzleError';\n\n\tconstructor({ message, cause }: { message?: string; cause?: unknown }) {\n\t\tsuper(message);\n\t\tthis.name = 'DrizzleError';\n\t\tthis.cause = cause;\n\t}\n}\n\nexport class TransactionRollbackError extends DrizzleError {\n\tstatic readonly [entityKind]: string = 'TransactionRollbackError';\n\n\tconstructor() {\n\t\tsuper({ message: 'Rollback' });\n\t}\n}\n", "import { type AnyColumn, Column } from '~/column.ts';\nimport { is } from '~/entity.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\n/**\n * Returns the number of values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number employees with null values\n * db.select({ value: count() }).from(employees)\n * // Number of employees where `name` is not null\n * db.select({ value: count(employees.name) }).from(employees)\n * ```\n *\n * @see countDistinct to get the number of non-duplicate values in `expression`\n */\nexport function count(expression?: SQLWrapper): SQL<number> {\n\treturn sql`count(${expression || sql.raw('*')})`.mapWith(Number);\n}\n\n/**\n * Returns the number of non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Number of employees where `name` is distinct\n * db.select({ value: countDistinct(employees.name) }).from(employees)\n * ```\n *\n * @see count to get the number of values in `expression`, including duplicates\n */\nexport function countDistinct(expression: SQLWrapper): SQL<number> {\n\treturn sql`count(distinct ${expression})`.mapWith(Number);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee\n * db.select({ value: avg(employees.salary) }).from(employees)\n * ```\n *\n * @see avgDistinct to get the average of all non-null and non-duplicate values in `expression`\n */\nexport function avg(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the average (arithmetic mean) of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Average salary of an employee where `salary` is distinct\n * db.select({ value: avgDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see avg to get the average of all non-null values in `expression`, including duplicates\n */\nexport function avgDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`avg(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary\n * db.select({ value: sum(employees.salary) }).from(employees)\n * ```\n *\n * @see sumDistinct to get the sum of all non-null and non-duplicate values in `expression`\n */\nexport function sum(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(${expression})`.mapWith(String);\n}\n\n/**\n * Returns the sum of all non-null and non-duplicate values in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // Sum of every employee's salary where `salary` is distinct (no duplicates)\n * db.select({ value: sumDistinct(employees.salary) }).from(employees)\n * ```\n *\n * @see sum to get the sum of all non-null values in `expression`, including duplicates\n */\nexport function sumDistinct(expression: SQLWrapper): SQL<string | null> {\n\treturn sql`sum(distinct ${expression})`.mapWith(String);\n}\n\n/**\n * Returns the maximum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the highest salary\n * db.select({ value: max(employees.salary) }).from(employees)\n * ```\n */\nexport function max<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`max(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n\n/**\n * Returns the minimum value in `expression`.\n *\n * ## Examples\n *\n * ```ts\n * // The employee with the lowest salary\n * db.select({ value: min(employees.salary) }).from(employees)\n * ```\n */\nexport function min<T extends SQLWrapper>(expression: T): SQL<(T extends AnyColumn ? T['_']['data'] : string) | null> {\n\treturn sql`min(${expression})`.mapWith(is(expression, Column) ? expression : String) as any;\n}\n", "import type { AnyColumn } from '~/index.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { type SQL, sql, type SQLWrapper } from '../sql.ts';\n\nfunction toSql(value: number[] | string[]): string {\n\treturn JSON.stringify(value);\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the L2 distance to the given value.\n * If used in querying, this specifies that it should return the L2 distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l2Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l2Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l2Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <-> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <-> ${value}`;\n}\n\n/**\n * L1 distance is one of the possible distance measures between two probability distribution vectors and it is\n * calculated as the sum of the absolute differences.\n * The smaller the distance between the observed probability vectors, the higher the accuracy of the synthetic data\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(l1Distance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: l1Distance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function l1Distance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <+> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <+> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the inner product distance to the given value.\n * If used in querying, this specifies that it should return the inner product distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(innerProduct(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({ distance: innerProduct(cars.embedding, embedding) }).from(cars)\n * ```\n */\nexport function innerProduct(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <#> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <#> ${value}`;\n}\n\n/**\n * Used in sorting and in querying, if used in sorting,\n * this specifies that the given column or expression should be sorted in an order\n * that minimizes the cosine distance to the given value.\n * If used in querying, this specifies that it should return the cosine distance\n * between the given column or expression and the given value.\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(cosineDistance(cars.embedding, embedding));\n * ```\n *\n * ```ts\n * // Select distance of cars and embedding\n * // to the given embedding\n * db.select({distance: cosineDistance(cars.embedding, embedding)}).from(cars)\n * ```\n */\nexport function cosineDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <=> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <=> ${value}`;\n}\n\n/**\n * Hamming distance between two strings or vectors of equal length is the number of positions at which the\n * corresponding symbols are different. In other words, it measures the minimum number of\n * substitutions required to change one string into the other, or equivalently,\n * the minimum number of errors that could have transformed one string into the other\n *\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(hammingDistance(cars.embedding, embedding));\n * ```\n */\nexport function hammingDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <~> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <~> ${value}`;\n}\n\n/**\n * ## Examples\n *\n * ```ts\n * // Sort cars by embedding similarity\n * // to the given embedding\n * db.select().from(cars)\n *   .orderBy(jaccardDistance(cars.embedding, embedding));\n * ```\n */\nexport function jaccardDistance(\n\tcolumn: SQLWrapper | AnyColumn,\n\tvalue: number[] | string[] | TypedQueryBuilder<any> | string,\n): SQL {\n\tif (Array.isArray(value)) {\n\t\treturn sql`${column} <%> ${toSql(value)}`;\n\t}\n\treturn sql`${column} <%> ${value}`;\n}\n", "export * from './aggregate.ts';\nexport * from './vector.ts';\n", "export * from './expressions/index.ts';\nexport * from './functions/index.ts';\nexport * from './sql.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: SQLiteColumn[];\n\treadonly foreignTable: SQLiteTable;\n\treadonly foreignColumns: SQLiteColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteForeignKeyBuilder';\n\t\tforeignTableName: 'TForeignTableName';\n\t};\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: SQLiteColumn[];\n\t\t\tforeignColumns: SQLiteColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as SQLiteTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'SQLiteForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: SQLiteTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[SQLiteTable.Symbol.Name],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[SQLiteTable.Symbol.Name],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends SQLiteColumn[],\n> = { [Key in keyof TColumns]: AnySQLiteColumn<{ tableName: TTableName }> };\n\n/**\n * @deprecated please use `foreignKey({ columns: [], foreignColumns: [] })` syntax without callback\n * @param config\n * @returns\n */\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: () => {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnySQLiteColumn<{ tableName: TTableName }>, ...AnySQLiteColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder;\nexport function foreignKey(\n\tconfig: any,\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tif (typeof config === 'function') {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\tcolumns,\n\t\t\t\tforeignColumns,\n\t\t\t};\n\t\t}\n\t\treturn config;\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQLiteColumn } from './columns/common.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function uniqueKeyName(table: SQLiteTable, columns: string[]) {\n\treturn `${table[SQLiteTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [SQLiteColumn, ...SQLiteColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'SQLiteUniqueConstraint';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasGenerated,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport { ColumnBuilder } from '~/column-builder.ts';\nimport { Column } from '~/column.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/sqlite-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/sqlite-core/foreign-keys.ts';\nimport type { AnySQLiteTable, SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => SQLiteColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface SQLiteColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'sqlite' }> {}\n\nexport interface SQLiteGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class SQLiteColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = object,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'sqlite' }, TExtraConfig>\n\timplements SQLiteColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(\n\t\tref: ReferenceConfig['ref'],\n\t\tactions: ReferenceConfig['actions'] = {},\n\t): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(\n\t\tname?: string,\n\t): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: SQLiteGeneratedColumnConfig): HasGenerated<this> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: SQLiteColumn, table: SQLiteTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `SQLiteColumn` and `AnySQLiteColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class SQLiteColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends Column<T, TRuntimeConfig, { dialect: 'sqlite' }> {\n\tstatic readonly [entityKind]: string = 'SQLiteColumn';\n\n\tconstructor(\n\t\toverride readonly table: SQLiteTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = SQLiteColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\ntype BlobMode = 'buffer' | 'json' | 'bigint';\n\nexport type SQLiteBigIntBuilderInitial<TName extends string> = SQLiteBigIntBuilder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'SQLiteBigInt';\n\tdata: bigint;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteBigIntBuilder<T extends ColumnBuilderBaseConfig<'bigint', 'SQLiteBigInt'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBigIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'SQLiteBigInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBigInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBigInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBigInt<T extends ColumnBaseConfig<'bigint', 'SQLiteBigInt'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteBigInt';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer): bigint {\n\t\treturn BigInt(value.toString());\n\t}\n\n\toverride mapToDriverValue(value: bigint): Buffer {\n\t\treturn Buffer.from(value.toString());\n\t}\n}\n\nexport type SQLiteBlobJsonBuilderInitial<TName extends string> = SQLiteBlobJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteBlobJson';\n\tdata: unknown;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteBlobJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteBlobJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBlobJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteBlobJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBlobJson<T extends ColumnBaseConfig<'json', 'SQLiteBlobJson'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteBlobJson';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n\n\toverride mapFromDriverValue(value: Buffer): T['data'] {\n\t\treturn JSON.parse(value.toString());\n\t}\n\n\toverride mapToDriverValue(value: T['data']): Buffer {\n\t\treturn Buffer.from(JSON.stringify(value));\n\t}\n}\n\nexport type SQLiteBlobBufferBuilderInitial<TName extends string> = SQLiteBlobBufferBuilder<{\n\tname: TName;\n\tdataType: 'buffer';\n\tcolumnType: 'SQLiteBlobBuffer';\n\tdata: Buffer;\n\tdriverParam: Buffer;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteBlobBufferBuilder<T extends ColumnBuilderBaseConfig<'buffer', 'SQLiteBlobBuffer'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBlobBufferBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'buffer', 'SQLiteBlobBuffer');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBlobBuffer<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any>);\n\t}\n}\n\nexport class SQLiteBlobBuffer<T extends ColumnBaseConfig<'buffer', 'SQLiteBlobBuffer'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteBlobBuffer';\n\n\tgetSQLType(): string {\n\t\treturn 'blob';\n\t}\n}\n\nexport interface BlobConfig<TMode extends BlobMode = BlobMode> {\n\tmode: TMode;\n}\n\n/**\n *  It's recommended to use `text('...', { mode: 'json' })` instead of `blob` in JSON mode, because it supports JSON functions:\n * >All JSON functions currently throw an error if any of their arguments are BLOBs because BLOBs are reserved for a future enhancement in which BLOBs will store the binary encoding for JSON.\n *\n * https://www.sqlite.org/json1.html\n */\nexport function blob<TName extends string, TMode extends BlobMode = BlobMode>(\n\tname: TName,\n\tconfig?: BlobConfig<TMode>,\n): Equal<TMode, 'bigint'> extends true ? SQLiteBigIntBuilderInitial<TName>\n\t: Equal<TMode, 'buffer'> extends true ? SQLiteBlobBufferBuilderInitial<TName>\n\t: SQLiteBlobJsonBuilderInitial<TName>;\nexport function blob(name: string, config?: BlobConfig) {\n\tif (config?.mode === 'json') {\n\t\treturn new SQLiteBlobJsonBuilder(name);\n\t}\n\tif (config?.mode === 'bigint') {\n\t\treturn new SQLiteBigIntBuilder(name);\n\t}\n\treturn new SQLiteBlobBufferBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'SQLiteCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t\tgenerated: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface SQLiteCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class SQLiteCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'SQLiteCustomColumn'>>\n\textends SQLiteColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tsqliteColumnBuilderBrand: 'SQLiteCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'SQLiteCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteCustomColumn<T extends ColumnBaseConfig<'custom', 'SQLiteCustomColumn'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: unknown;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom sqlite database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig: T['config'],\n\t) => SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n\t: <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t) => SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n{\n\treturn <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t): SQLiteCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\treturn new SQLiteCustomColumnBuilder(\n\t\t\tdbName as ConvertCustomConfig<TName, T>['name'],\n\t\t\tfieldConfig,\n\t\t\tcustomTypeParams,\n\t\t);\n\t};\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport type { OnConflict } from '~/sqlite-core/utils.ts';\nimport type { Equal, Or } from '~/utils.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport interface PrimaryKeyConfig {\n\tautoIncrement?: boolean;\n\tonConflict?: OnConflict;\n}\n\nexport abstract class SQLiteBaseIntegerBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumnBuilder<\n\tT,\n\tTRuntimeConfig & { autoIncrement: boolean },\n\t{},\n\t{ primaryKeyHasDefault: true }\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteBaseIntegerBuilder';\n\n\tconstructor(name: T['name'], dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\toverride primaryKey(config?: PrimaryKeyConfig): IsPrimaryKey<HasDefault<NotNull<this>>> {\n\t\tif (config?.autoIncrement) {\n\t\t\tthis.config.autoIncrement = true;\n\t\t}\n\t\tthis.config.hasDefault = true;\n\t\treturn super.primaryKey() as IsPrimaryKey<HasDefault<NotNull<this>>>;\n\t}\n\n\t/** @internal */\n\tabstract override build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBaseInteger<MakeColumnConfig<T, TTableName>>;\n}\n\nexport abstract class SQLiteBaseInteger<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends SQLiteColumn<T, TRuntimeConfig & { autoIncrement: boolean }> {\n\tstatic readonly [entityKind]: string = 'SQLiteBaseInteger';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n}\n\nexport type SQLiteIntegerBuilderInitial<TName extends string> = SQLiteIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteInteger';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteInteger'>>\n\textends SQLiteBaseIntegerBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteInteger');\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteInteger<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteInteger<T extends ColumnBaseConfig<'number', 'SQLiteInteger'>> extends SQLiteBaseInteger<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteInteger';\n}\n\nexport type SQLiteTimestampBuilderInitial<TName extends string> = SQLiteTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'SQLiteTimestamp';\n\tdata: Date;\n\tdriverParam: number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTimestampBuilder';\n\n\tconstructor(name: T['name'], mode: 'timestamp' | 'timestamp_ms') {\n\t\tsuper(name, 'date', 'SQLiteTimestamp');\n\t\tthis.config.mode = mode;\n\t}\n\n\t/**\n\t * @deprecated Use `default()` with your own expression instead.\n\t *\n\t * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.\n\t */\n\tdefaultNow(): HasDefault<this> {\n\t\treturn this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`) as any;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTimestamp<T extends ColumnBaseConfig<'date', 'SQLiteTimestamp'>>\n\textends SQLiteBaseInteger<T, { mode: 'timestamp' | 'timestamp_ms' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTimestamp';\n\n\treadonly mode: 'timestamp' | 'timestamp_ms' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): Date {\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn new Date(value * 1000);\n\t\t}\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): number {\n\t\tconst unix = value.getTime();\n\t\tif (this.config.mode === 'timestamp') {\n\t\t\treturn Math.floor(unix / 1000);\n\t\t}\n\t\treturn unix;\n\t}\n}\n\nexport type SQLiteBooleanBuilderInitial<TName extends string> = SQLiteBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'SQLiteBoolean';\n\tdata: boolean;\n\tdriverParam: number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseIntegerBuilder<T, { mode: 'boolean' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBooleanBuilder';\n\n\tconstructor(name: T['name'], mode: 'boolean') {\n\t\tsuper(name, 'boolean', 'SQLiteBoolean');\n\t\tthis.config.mode = mode;\n\t}\n\n\tbuild<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteBoolean<T extends ColumnBaseConfig<'boolean', 'SQLiteBoolean'>>\n\textends SQLiteBaseInteger<T, { mode: 'boolean' }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteBoolean';\n\n\treadonly mode: 'boolean' = this.config.mode;\n\n\toverride mapFromDriverValue(value: number): boolean {\n\t\treturn Number(value) === 1;\n\t}\n\n\toverride mapToDriverValue(value: boolean): number {\n\t\treturn value ? 1 : 0;\n\t}\n}\n\nexport interface IntegerConfig<\n\tTMode extends 'number' | 'timestamp' | 'timestamp_ms' | 'boolean' =\n\t\t| 'number'\n\t\t| 'timestamp'\n\t\t| 'timestamp_ms'\n\t\t| 'boolean',\n> {\n\tmode: TMode;\n}\n\nexport function integer<TName extends string, TMode extends IntegerConfig['mode']>(\n\tname: TName,\n\tconfig?: IntegerConfig<TMode>,\n): Or<Equal<TMode, 'timestamp'>, Equal<TMode, 'timestamp_ms'>> extends true ? SQLiteTimestampBuilderInitial<TName>\n\t: Equal<TMode, 'boolean'> extends true ? SQLiteBooleanBuilderInitial<TName>\n\t: SQLiteIntegerBuilderInitial<TName>;\nexport function integer(name: string, config?: IntegerConfig) {\n\tif (config?.mode === 'timestamp' || config?.mode === 'timestamp_ms') {\n\t\treturn new SQLiteTimestampBuilder(name, config.mode);\n\t}\n\tif (config?.mode === 'boolean') {\n\t\treturn new SQLiteBooleanBuilder(name, config.mode);\n\t}\n\treturn new SQLiteIntegerBuilder(name);\n}\n\nexport const int = integer;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteNumericBuilderInitial<TName extends string> = SQLiteNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteNumeric'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteNumericBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'SQLiteNumeric');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteNumeric<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteNumeric<T extends ColumnBaseConfig<'string', 'SQLiteNumeric'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteNumeric';\n\n\tgetSQLType(): string {\n\t\treturn 'numeric';\n\t}\n}\n\nexport function numeric<TName extends string>(name: TName): SQLiteNumericBuilderInitial<TName> {\n\treturn new SQLiteNumericBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '../table.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteRealBuilderInitial<TName extends string> = SQLiteRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'SQLiteReal';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'SQLiteReal'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteRealBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'SQLiteReal');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteReal<T extends ColumnBaseConfig<'number', 'SQLiteReal'>> extends SQLiteColumn<T> {\n\tstatic readonly [entityKind]: string = 'SQLiteReal';\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n}\n\nexport function real<TName extends string>(name: TName): SQLiteRealBuilderInitial<TName> {\n\treturn new SQLiteRealBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnySQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Equal, Writable } from '~/utils.ts';\nimport { SQLiteColumn, SQLiteColumnBuilder } from './common.ts';\n\nexport type SQLiteTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = SQLiteTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'SQLiteText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'SQLiteText'>> extends SQLiteColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteTextBuilder';\n\n\tconstructor(name: T['name'], config: SQLiteTextConfig<'text', T['enumValues']>) {\n\t\tsuper(name, 'string', 'SQLiteText');\n\t\tthis.config.enumValues = config.enum;\n\t\tthis.config.length = config.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class SQLiteText<T extends ColumnBaseConfig<'string', 'SQLiteText'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\treadonly length: number | undefined = this.config.length;\n\n\tconstructor(\n\t\ttable: AnySQLiteTable<{ name: T['tableName'] }>,\n\t\tconfig: SQLiteTextBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `text${this.config.length ? `(${this.config.length})` : ''}`;\n\t}\n}\n\nexport type SQLiteTextJsonBuilderInitial<TName extends string> = SQLiteTextJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'SQLiteTextJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class SQLiteTextJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTextJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'SQLiteTextJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnySQLiteTable<{ name: TTableName }>,\n\t): SQLiteTextJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new SQLiteTextJson<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class SQLiteTextJson<T extends ColumnBaseConfig<'json', 'SQLiteTextJson'>>\n\textends SQLiteColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'SQLiteTextJson';\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n\n\toverride mapFromDriverValue(value: string): T['data'] {\n\t\treturn JSON.parse(value);\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport type SQLiteTextConfig<\n\tTMode extends 'text' | 'json',\n\tTEnum extends readonly string[] | string[] | undefined,\n> = TMode extends 'text' ? {\n\t\tmode?: TMode;\n\t\tlength?: number;\n\t\tenum?: TEnum;\n\t}\n\t: {\n\t\tmode?: TMode;\n\t};\n\nexport function text<\n\tTName extends string,\n\tU extends string,\n\tT extends Readonly<[U, ...U[]]>,\n\tTMode extends 'text' | 'json' = 'text' | 'json',\n>(\n\tname: TName,\n\tconfig: SQLiteTextConfig<TMode, T | Writable<T>> = {} as SQLiteTextConfig<TMode, T | Writable<T>>,\n): Equal<TMode, 'json'> extends true ? SQLiteTextJsonBuilderInitial<TName>\n\t: SQLiteTextBuilderInitial<TName, Writable<T>>\n{\n\treturn (config.mode === 'json'\n\t\t? new SQLiteTextJsonBuilder(name)\n\t\t: new SQLiteTextBuilder(name, config as SQLiteTextConfig<'text', Writable<T>>)) as Equal<TMode, 'json'> extends true\n\t\t\t? SQLiteTextJsonBuilderInitial<TName>\n\t\t\t: SQLiteTextBuilderInitial<TName, Writable<T>>;\n}\n", "export * from './blob.ts';\nexport * from './common.ts';\nexport * from './custom.ts';\nexport * from './integer.ts';\nexport * from './numeric.ts';\nexport * from './real.ts';\nexport * from './text.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class SQLiteViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelection> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBase';\n\n\tdeclare _: View<TName, TExisting, TSelection>['_'] & {\n\t\tviewBrand: 'SQLiteView';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport type { AnyColumn } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Name } from '~/sql/index.ts';\nimport { and, eq } from '~/sql/index.ts';\nimport { Param, type QueryWithTypings, SQL, sql, type SQLChunk } from '~/sql/sql.ts';\nimport { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDeleteConfig, SQLiteInsertConfig, SQLiteUpdateConfig } from '~/sqlite-core/query-builders/index.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tSelectedFieldsOrdered,\n\tSQLiteSelectConfig,\n\tSQLiteSelectJoinConfig,\n} from './query-builders/select.types.ts';\nimport type { SQLiteSession } from './session.ts';\nimport { SQLiteViewBase } from './view-base.ts';\n\nexport abstract class SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteDialect';\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn '?';\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList }: SQLiteDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: SQLiteTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(col.name)} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList }: SQLiteUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, Column)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(c.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tconst tableName = field.table[Table.Symbol.Name];\n\t\t\t\t\tconst columnName = field.name;\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(columnName));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(columnName)}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: SQLiteSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<SQLiteColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, SQLiteViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = (() => {\n\t\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t\t}\n\n\t\t\treturn table;\n\t\t})();\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\n\t\t\t\tif (is(table, SQLiteTable)) {\n\t\t\t\t\tconst tableName = table[SQLiteTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[SQLiteTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[SQLiteTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined}${\n\t\t\t\t\t\t\tsql.identifier(origTableName)\n\t\t\t\t\t\t}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst joinsSql = sql.join(joinsArray);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tconst orderByList: (SQLiteColumn | SQL | SQL.Aliased)[] = [];\n\t\tif (orderBy) {\n\t\t\tfor (const [index, orderByValue] of orderBy.entries()) {\n\t\t\t\torderByList.push(orderByValue);\n\n\t\t\t\tif (index < orderBy.length - 1) {\n\t\t\t\t\torderByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupByList: (SQL | AnyColumn | SQL.Aliased)[] = [];\n\t\tif (groupBy) {\n\t\t\tfor (const [index, groupByValue] of groupBy.entries()) {\n\t\t\t\tgroupByList.push(groupByValue);\n\n\t\t\t\tif (index < groupBy.length - 1) {\n\t\t\t\t\tgroupByList.push(sql`, `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : undefined;\n\n\t\tconst orderBySql = orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : undefined;\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: SQLiteSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: SQLiteSelectConfig['setOperators'][number] }): SQL {\n\t\t// SQLite doesn't support parenthesis in set operations\n\t\tconst leftChunk = sql`${leftSelect.getSQL()} `;\n\t\tconst rightChunk = sql`${rightSelect.getSQL()}`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, SQLiteColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, SQLiteColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery({ table, values, onConflict, returning, withList }: SQLiteInsertConfig): SQL {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, SQLiteColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, SQLiteColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));\n\n\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\tlet defaultValue;\n\t\t\t\t\tif (col.default !== null && col.default !== undefined) {\n\t\t\t\t\t\tdefaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t} else if (col.defaultFn !== undefined) {\n\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\tdefaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\tdefaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdefaultValue = sql`null`;\n\t\t\t\t\t}\n\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t} else {\n\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvaluesSqlList.push(valueList);\n\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\t// if (isSingleValue && valuesSqlList.length === 0){\n\t\t// \treturn sql`insert into ${table} default values ${onConflictSql}${returningSql}`;\n\t\t// }\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: SQLiteTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<SQLiteTable, SQLiteColumn> {\n\t\tlet selection: BuildRelationalQueryResult<SQLiteTable, SQLiteColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: SQLiteSelectConfig['orderBy'] = [], where;\n\t\tconst joins: SQLiteSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as SQLiteColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: SQLiteColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as SQLiteColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as SQLiteColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\t// const relationTable = schema[relationTableTsName]!;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as SQLiteTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = (sql`(${builtRelation.sql})`).as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, SQLiteColumn) ? sql.identifier(field.name) : is(field, SQL.Aliased) ? field.sql : field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_group_array(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n\nexport class SQLiteSyncDialect extends SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteSyncDialect';\n\n\tmigrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'sync', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tconfig?: string | MigrationConfig,\n\t): void {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tsession.run(migrationTableCreate);\n\n\t\tconst dbMigrations = session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\t\tsession.run(sql`BEGIN`);\n\n\t\ttry {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tsession.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tsession.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsession.run(sql`COMMIT`);\n\t\t} catch (e) {\n\t\t\tsession.run(sql`ROLLBACK`);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nexport class SQLiteAsyncDialect extends SQLiteDialect {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: SQLiteSession<'async', any, any, any>,\n\t\tconfig?: string | MigrationConfig,\n\t): Promise<void> {\n\t\tconst migrationsTable = config === undefined\n\t\t\t? '__drizzle_migrations'\n\t\t\t: typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at numeric\n\t\t\t)\n\t\t`;\n\t\tawait session.run(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.values<[number, string, string]>(\n\t\t\tsql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0] ?? undefined;\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (!lastDbMigration || Number(lastDbMigration[2])! < migration.folderMillis) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.run(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.run(\n\t\t\t\t\t\tsql`INSERT INTO ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") VALUES(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/sql/index.ts';\n\nexport abstract class TypedQueryBuilder<TSelection, TResult = unknown> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'TypedQueryBuilder';\n\n\tdeclare _: {\n\t\tselectedFields: TSelection;\n\t\tresult: TResult;\n\t};\n\n\t/** @internal */\n\tgetSelectedFields(): TSelection {\n\t\treturn this._.selectedFields;\n\t}\n\n\tabstract getSQL(): SQL;\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from '~/sqlite-core/columns/index.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLiteSession } from '~/sqlite-core/session.ts';\nimport type { SubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport {\n\tapplyMixins,\n\tgetTableColumns,\n\tgetTableLikeName,\n\thaveSameKeys,\n\torderSelectedFields,\n\ttype ValueOrArray,\n} from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { SQLiteViewBase } from '../view-base.ts';\nimport type {\n\tAnySQLiteSelect,\n\tCreateSQLiteSelectFromBuilderMode,\n\tGetSQLiteSetOperators,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n\tSQLiteCreateSetOperatorFn,\n\tSQLiteJoinFn,\n\tSQLiteSelectConfig,\n\tSQLiteSelectDynamic,\n\tSQLiteSelectExecute,\n\tSQLiteSelectHKT,\n\tSQLiteSelectHKTBase,\n\tSQLiteSelectPrepare,\n\tSQLiteSelectWithout,\n\tSQLiteSetOperatorExcludedMethods,\n\tSQLiteSetOperatorWithResult,\n} from './select.types.ts';\n\nexport class SQLiteSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: SQLiteSession<any, any, any, any> | undefined;\n\tprivate dialect: SQLiteDialect;\n\tprivate withList: Subquery[] | undefined;\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tthis.withList = config.withList;\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends SQLiteTable | Subquery | SQLiteViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateSQLiteSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, SQLiteViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<SQLiteTable>(source);\n\t\t}\n\n\t\treturn new SQLiteSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class SQLiteSelectQueryBuilderBase<\n\tTHKT extends SQLiteSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic readonly [entityKind]: string = 'SQLiteSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: SQLiteSession<any, any, any, any> | undefined;\n\tprotected dialect: SQLiteDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: SQLiteSelectConfig['table'];\n\t\t\tfields: SQLiteSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: SQLiteSession<any, any, any, any> | undefined;\n\t\t\tdialect: SQLiteDialect;\n\t\t\twithList: Subquery[] | undefined;\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): SQLiteJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: SQLiteTable | Subquery | SQLiteViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends SQLiteSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetSQLiteSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getSQLiteSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/sqlite-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/** @internal */\n\taddSetOperators(setOperators: SQLiteSelectConfig['setOperators']): SQLiteSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tSQLiteSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): SQLiteSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>,\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (SQLiteColumn | SQL)[]): SQLiteSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<SQLiteColumn | SQL | SQL.Aliased>]\n\t\t\t| (SQLiteColumn | SQL | SQL.Aliased)[]\n\t): SQLiteSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (SQLiteColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): SQLiteSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): SQLiteSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tSQLiteSelectQueryBuilderBase<\n\t\tSQLiteSelectHKT,\n\t\tTTableName,\n\t\tTResultType,\n\t\tTRunResult,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class SQLiteSelectBase<\n\tTTableName extends string | undefined,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTSelection,\n\tTSelectMode extends SelectMode = 'single',\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends SQLiteSelectQueryBuilderBase<\n\tSQLiteSelectHKT,\n\tTTableName,\n\tTResultType,\n\tTRunResult,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'sqlite'>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'SQLiteSelect';\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<SQLiteColumn>(this.config.fields);\n\t\tconst query = this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tfieldsList,\n\t\t\t'all',\n\t\t\ttrue,\n\t\t);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as ReturnType<this['prepare']>;\n\t}\n\n\tprepare(): SQLiteSelectPrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\tasync execute(): Promise<SQLiteSelectExecute<this>> {\n\t\treturn this.all() as SQLiteSelectExecute<this>;\n\t}\n}\n\napplyMixins(SQLiteSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): SQLiteCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnySQLiteSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnySQLiteSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getSQLiteSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\texcept,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/sqlite-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/sqlite-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/sqlite-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/sqlite-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { WithSubqueryWithSelection } from '~/sqlite-core/subquery.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { SQLiteSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteQueryBuilder';\n\n\tprivate dialect: SQLiteSyncDialect | undefined;\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): SQLiteSelectBuilder<undefined, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, 'sync', void, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): SQLiteSelectBuilder<TSelection | undefined, 'sync', void, 'qb'> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new SQLiteSyncDialect();\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "//# sourceMappingURL=select.types.js.map", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteDialect } from '~/sqlite-core/dialect.ts';\nimport type { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { SQLiteTable } from '~/sqlite-core/table.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { type DrizzleTypeError, mapUpdateSet, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport type { SQLiteColumn } from '../columns/common.ts';\nimport type { SelectedFields, SelectedFieldsOrdered } from './select.types.ts';\n\nexport interface SQLiteUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: SQLiteTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type SQLiteUpdateSetSource<TTable extends SQLiteTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL;\n\t}\n\t& {};\n\nexport class SQLiteUpdateBuilder<\n\tTTable extends SQLiteTable,\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprotected table: TTable,\n\t\tprotected session: SQLiteSession<any, any, any, any>,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(values: SQLiteUpdateSetSource<TTable>): SQLiteUpdateBase<TTable, TResultType, TRunResult> {\n\t\treturn new SQLiteUpdateBase(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t);\n\t}\n}\n\nexport type SQLiteUpdateWithout<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type SQLiteUpdateReturningAll<T extends AnySQLiteUpdate, TDynamic extends boolean> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateReturning<\n\tT extends AnySQLiteUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = SQLiteUpdateWithout<\n\tSQLiteUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['resultType'],\n\t\tT['_']['runResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type SQLiteUpdateExecute<T extends AnySQLiteUpdate> = T['_']['returning'] extends undefined ? T['_']['runResult']\n\t: T['_']['returning'][];\n\nexport type SQLiteUpdatePrepare<T extends AnySQLiteUpdate> = SQLitePreparedQuery<\n\t{\n\t\ttype: T['_']['resultType'];\n\t\trun: T['_']['runResult'];\n\t\tall: T['_']['returning'] extends undefined ? DrizzleTypeError<'.all() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'][];\n\t\tget: T['_']['returning'] extends undefined ? DrizzleTypeError<'.get() cannot be used without .returning()'>\n\t\t\t: T['_']['returning'];\n\t\tvalues: T['_']['returning'] extends undefined ? DrizzleTypeError<'.values() cannot be used without .returning()'>\n\t\t\t: any[][];\n\t\texecute: SQLiteUpdateExecute<T>;\n\t}\n>;\n\nexport type SQLiteUpdateDynamic<T extends AnySQLiteUpdate> = SQLiteUpdate<\n\tT['_']['table'],\n\tT['_']['resultType'],\n\tT['_']['runResult'],\n\tT['_']['returning']\n>;\n\nexport type SQLiteUpdate<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = any,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = SQLiteUpdateBase<TTable, TResultType, TRunResult, TReturning, true, never>;\n\nexport type AnySQLiteUpdate = SQLiteUpdateBase<any, any, any, any, any, any>;\n\nexport interface SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends SQLWrapper, QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]> {\n\treadonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly table: TTable;\n\t\treadonly resultType: TResultType;\n\t\treadonly runResult: TRunResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? TRunResult : TReturning[];\n\t};\n}\n\nexport class SQLiteUpdateBase<\n\tTTable extends SQLiteTable = SQLiteTable,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTResultType extends 'sync' | 'async' = 'sync' | 'async',\n\tTRunResult = unknown,\n\tTReturning = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? TRunResult : TReturning[]>\n\timplements RunnableQuery<TReturning extends undefined ? TRunResult : TReturning[], 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteUpdate';\n\n\t/** @internal */\n\tconfig: SQLiteUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: SQLiteSession<any, any, any, any>,\n\t\tprivate dialect: SQLiteDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList };\n\t}\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): SQLiteUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): SQLiteUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): SQLiteUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[SQLiteTable.Symbol.Columns],\n\t): SQLiteUpdateWithout<AnySQLiteUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<SQLiteColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(isOneTimeQuery = true): SQLiteUpdatePrepare<this> {\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t\tthis.config.returning ? 'all' : 'run',\n\t\t\ttrue,\n\t\t) as SQLiteUpdatePrepare<this>;\n\t}\n\n\tprepare(): SQLiteUpdatePrepare<this> {\n\t\treturn this._prepare(false);\n\t}\n\n\trun: ReturnType<this['prepare']>['run'] = (placeholderValues) => {\n\t\treturn this._prepare().run(placeholderValues);\n\t};\n\n\tall: ReturnType<this['prepare']>['all'] = (placeholderValues) => {\n\t\treturn this._prepare().all(placeholderValues);\n\t};\n\n\tget: ReturnType<this['prepare']>['get'] = (placeholderValues) => {\n\t\treturn this._prepare().get(placeholderValues);\n\t};\n\n\tvalues: ReturnType<this['prepare']>['values'] = (placeholderValues) => {\n\t\treturn this._prepare().values(placeholderValues);\n\t};\n\n\toverride async execute(): Promise<SQLiteUpdateExecute<this>> {\n\t\treturn (this.config.returning ? this.all() : this.run()) as SQLiteUpdateExecute<this>;\n\t}\n\n\t$dynamic(): SQLiteUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "export * from './delete.ts';\nexport * from './insert.ts';\nexport * from './query-builder.ts';\nexport * from './select.ts';\nexport * from './select.types.ts';\nexport * from './update.ts';\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { SQLiteDialect } from '../dialect.ts';\nimport type { PreparedQueryConfig, SQLitePreparedQuery, SQLiteSession } from '../session.ts';\nimport type { SQLiteTable } from '../table.ts';\n\nexport type SQLiteRelationalQueryKind<TMode extends 'sync' | 'async', TResult> = TMode extends 'async'\n\t? SQLiteRelationalQuery<TMode, TResult>\n\t: SQLiteSyncRelationalQuery<TResult>;\n\nexport class RelationalQueryBuilder<\n\tTMode extends 'sync' | 'async',\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprotected mode: TMode,\n\t\tprotected fullSchema: Record<string, unknown>,\n\t\tprotected schema: TSchema,\n\t\tprotected tableNamesMap: Record<string, string>,\n\t\tprotected table: SQLiteTable,\n\t\tprotected tableConfig: TableRelationalConfig,\n\t\tprotected dialect: SQLiteDialect,\n\t\tprotected session: SQLiteSession<'async', unknown, TFullSchema, TSchema>,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t\t'many',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TConfig>[]>;\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn (this.mode === 'sync'\n\t\t\t? new SQLiteSyncRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)\n\t\t\t: new SQLiteRelationalQuery(\n\t\t\t\tthis.fullSchema,\n\t\t\t\tthis.schema,\n\t\t\t\tthis.tableNamesMap,\n\t\t\t\tthis.table,\n\t\t\t\tthis.tableConfig,\n\t\t\t\tthis.dialect,\n\t\t\t\tthis.session,\n\t\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t\t'first',\n\t\t\t)) as SQLiteRelationalQueryKind<TMode, BuildQueryResult<TSchema, TFields, TSelection> | undefined>;\n\t}\n}\n\nexport class SQLiteRelationalQuery<TType extends 'sync' | 'async', TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'SQLiteAsyncRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly type: TType;\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tmode: 'many' | 'first';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\t/** @internal */\n\t\tpublic table: SQLiteTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: SQLiteDialect,\n\t\tprivate session: SQLiteSession<'sync' | 'async', unknown, Record<string, unknown>, TablesRelationalConfig>,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tmode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t\tthis.mode = mode;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t}).sql as SQL;\n\t}\n\n\t/** @internal */\n\t_prepare(\n\t\tisOneTimeQuery = false,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\treturn this.session[isOneTimeQuery ? 'prepareOneTimeQuery' : 'prepareQuery'](\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tthis.mode === 'first' ? 'get' : 'all',\n\t\t\ttrue,\n\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t);\n\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }>;\n\t}\n\n\tprepare(): SQLitePreparedQuery<PreparedQueryConfig & { type: TType; all: TResult; get: TResult; execute: TResult }> {\n\t\treturn this._prepare(false);\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this.dialect.buildRelationalQuery({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\t/** @internal */\n\texecuteRaw(): TResult {\n\t\tif (this.mode === 'first') {\n\t\t\treturn this._prepare(false).get() as TResult;\n\t\t}\n\t\treturn this._prepare(false).all() as TResult;\n\t}\n\n\toverride async execute(): Promise<TResult> {\n\t\treturn this.executeRaw();\n\t}\n}\n\nexport class SQLiteSyncRelationalQuery<TResult> extends SQLiteRelationalQuery<'sync', TResult> {\n\tstatic readonly [entityKind]: string = 'SQLiteSyncRelationalQuery';\n\n\tsync(): TResult {\n\t\treturn this.executeRaw();\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL, SQLWrapper } from '~/index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { SQLiteAsyncDialect } from '../dialect.ts';\n\ntype SQLiteRawAction = 'all' | 'get' | 'values' | 'run';\nexport interface SQLiteRawConfig {\n\taction: SQLiteRawAction;\n}\n\nexport interface SQLiteRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'sqlite'>, SQLWrapper {}\n\nexport class SQLiteRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'sqlite'>, SQLWrapper, PreparedQuery\n{\n\tstatic readonly [entityKind]: string = 'SQLiteRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'sqlite';\n\t\treadonly result: TResult;\n\t};\n\n\t/** @internal */\n\tconfig: SQLiteRawConfig;\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\t/** @internal */\n\t\tpublic getSQL: () => SQL,\n\t\taction: SQLiteRawAction,\n\t\tprivate dialect: SQLiteAsyncDialect,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t\tthis.config = { action };\n\t}\n\n\tgetQuery() {\n\t\treturn { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn false;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQLWrapper } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\nimport {\n\tQueryBuilder,\n\tSQLiteDeleteBase,\n\tSQLiteInsertBuilder,\n\tSQLiteSelectBuilder,\n\tSQLiteUpdateBuilder,\n} from '~/sqlite-core/query-builders/index.ts';\nimport type {\n\tDBResult,\n\tResult,\n\tSQLiteSession,\n\tSQLiteTransaction,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport type { SQLiteTable } from '~/sqlite-core/table.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\n\nexport class BaseSQLiteDatabase<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'BaseSQLiteDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\tprivate resultKind: TResultKind,\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t\t/** @internal */\n\t\treadonly session: SQLiteSession<TResultKind, TRunResult, TFullSchema, TSchema>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tconst query = this.query as {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TResultKind, TFullSchema, TSchema, TSchema[K]>;\n\t\t};\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\tquery[tableName as keyof TSchema] = new RelationalQueryBuilder(\n\t\t\t\t\tresultKind,\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as SQLiteTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession as SQLiteSession<any, any, any, any> as any,\n\t\t\t\t) as typeof query[keyof TSchema];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder());\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction select(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteInsertBuilder(into, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\t\treturn new SQLiteDeleteBase(from, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselect(fields?: SelectedFields): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): SQLiteSelectBuilder<undefined, TResultKind, TRunResult>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): SQLiteSelectBuilder<TSelection, TResultKind, TRunResult>;\n\tselectDistinct(\n\t\tfields?: SelectedFields,\n\t): SQLiteSelectBuilder<SelectedFields | undefined, TResultKind, TRunResult> {\n\t\treturn new SQLiteSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends SQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends SQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteInsertBuilder(into, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends SQLiteTable>(from: TTable): SQLiteDeleteBase<TTable, TResultKind, TRunResult> {\n\t\treturn new SQLiteDeleteBase(from, this.session, this.dialect);\n\t}\n\n\trun(query: SQLWrapper): DBResult<TResultKind, TRunResult> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.run(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'run',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawRunValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, TRunResult>;\n\t\t}\n\t\treturn this.session.run(sql) as DBResult<TResultKind, TRunResult>;\n\t}\n\n\tall<T = unknown>(query: SQLWrapper): DBResult<TResultKind, T[]> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.all(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'all',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawAllValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.all(sql) as DBResult<TResultKind, T[]>;\n\t}\n\n\tget<T = unknown>(query: SQLWrapper): DBResult<TResultKind, T> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.get(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'get',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawGetValueFromBatchResult.bind(this.session),\n\t\t\t) as DBResult<TResultKind, T>;\n\t\t}\n\t\treturn this.session.get(sql) as DBResult<TResultKind, T>;\n\t}\n\n\tvalues<T extends unknown[] = unknown[]>(query: SQLWrapper): DBResult<TResultKind, T[]> {\n\t\tconst sql = query.getSQL();\n\t\tif (this.resultKind === 'async') {\n\t\t\treturn new SQLiteRaw(\n\t\t\t\tasync () => this.session.values(sql),\n\t\t\t\t() => sql,\n\t\t\t\t'values',\n\t\t\t\tthis.dialect as SQLiteAsyncDialect,\n\t\t\t\tthis.session.extractRawValuesValueFromBatchResult.bind(this.session),\n\t\t\t) as any;\n\t\t}\n\t\treturn this.session.values(sql) as DBResult<TResultKind, T[]>;\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type SQLiteWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends BaseSQLiteDatabase<\n\t\tTResultKind,\n\t\tTRunResult,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): SQLiteWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst run: Q['run'] = (...args: [any]) => primary.run(...args);\n\tconst all: Q['all'] = (...args: [any]) => primary.all(...args);\n\tconst get: Q['get'] = (...args: [any]) => primary.get(...args);\n\tconst values: Q['values'] = (...args: [any]) => primary.values(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\trun,\n\t\tall,\n\t\tget,\n\t\tvalues,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { TableAliasProxyHandler } from '~/alias.ts';\nimport type { BuildAliasTable } from './query-builders/select.types.ts';\n\nimport type { SQLiteTable } from './table.ts';\nimport type { SQLiteViewBase } from './view-base.ts';\n\nexport function alias<TTable extends SQLiteTable | SQLiteViewBase, TAlias extends string>(\n\ttable: TTable,\n\talias: TAlias,\n): BuildAliasTable<TTable, TAlias> {\n\treturn new Proxy(table, new TableAliasProxyHandler(alias, false)) as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteCheckBuilder';\n\n\tprotected brand!: 'SQLiteConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\tbuild(table: SQLiteTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'SQLiteCheck';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteCheck';\n\t};\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: SQLiteTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { SQLiteColumn } from './columns/index.ts';\nimport type { SQLiteTable } from './table.ts';\n\nexport interface IndexConfig {\n\tname: string;\n\tcolumns: IndexColumn[];\n\tunique: boolean;\n\twhere: SQL | undefined;\n}\n\nexport type IndexColumn = SQLiteColumn | SQL;\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilderOn';\n\n\tconstructor(private name: string, private unique: boolean) {}\n\n\ton(...columns: [IndexColumn, ...IndexColumn[]]): IndexBuilder {\n\t\treturn new IndexBuilder(this.name, columns, this.unique);\n\t}\n}\n\nexport class IndexBuilder {\n\tstatic readonly [entityKind]: string = 'SQLiteIndexBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndexBuilder';\n\t};\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(name: string, columns: IndexColumn[], unique: boolean) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t\twhere: undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Condition for partial index.\n\t */\n\twhere(condition: SQL): this {\n\t\tthis.config.where = condition;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'SQLiteIndex';\n\n\tdeclare _: {\n\t\tbrand: 'SQLiteIndex';\n\t};\n\n\treadonly config: IndexConfig & { table: SQLiteTable };\n\n\tconstructor(config: IndexConfig, table: SQLiteTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport function index(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, false);\n}\n\nexport function uniqueIndex(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, true);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnySQLiteColumn, SQLiteColumn } from './columns/index.ts';\nimport { SQLiteTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnySQLiteColumn<{ tableName: TTableName }>,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnySQLiteColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKeyBuilder';\n\n\tdeclare _: {\n\t\tbrand: 'SQLitePrimaryKeyBuilder';\n\t};\n\n\t/** @internal */\n\tcolumns: SQLiteColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: SQLiteColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: SQLiteTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'SQLitePrimaryKey';\n\n\treadonly columns: SQLiteColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: SQLiteTable, columns: SQLiteColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[SQLiteTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { DrizzleError, TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect, SQLiteSyncDialect } from '~/sqlite-core/dialect.ts';\n// import { QueryPromise } from '../index.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport { BaseSQLiteDatabase } from './db.ts';\nimport type { SQLiteRaw } from './query-builders/raw.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\ttype: 'sync' | 'async';\n\trun: unknown;\n\tall: unknown;\n\tget: unknown;\n\tvalues: unknown;\n\texecute: unknown;\n}\n\nexport class ExecuteResultSync<T> extends QueryPromise<T> {\n\tstatic readonly [entityKind]: string = 'ExecuteResultSync';\n\n\tconstructor(private resultCb: () => T) {\n\t\tsuper();\n\t}\n\n\toverride async execute(): Promise<T> {\n\t\treturn this.resultCb();\n\t}\n\n\tsync(): T {\n\t\treturn this.resultCb();\n\t}\n}\n\nexport type ExecuteResult<TType extends 'sync' | 'async', TResult> = TType extends 'async' ? Promise<TResult>\n\t: ExecuteResultSync<TResult>;\n\nexport abstract class SQLitePreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tstatic readonly [entityKind]: string = 'PreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tconstructor(\n\t\tprivate mode: 'sync' | 'async',\n\t\tprivate executeMethod: SQLiteExecuteMethod,\n\t\tprotected query: Query,\n\t) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tabstract run(placeholderValues?: Record<string, unknown>): Result<T['type'], T['run']>;\n\n\tmapRunResult(result: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn result;\n\t}\n\n\tabstract all(placeholderValues?: Record<string, unknown>): Result<T['type'], T['all']>;\n\n\tmapAllResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract get(placeholderValues?: Record<string, unknown>): Result<T['type'], T['get']>;\n\n\tmapGetResult(_result: unknown, _isFromBatch?: boolean): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tabstract values(placeholderValues?: Record<string, unknown>): Result<T['type'], T['values']>;\n\n\texecute(placeholderValues?: Record<string, unknown>): ExecuteResult<T['type'], T['execute']> {\n\t\tif (this.mode === 'async') {\n\t\t\treturn this[this.executeMethod](placeholderValues) as ExecuteResult<T['type'], T['execute']>;\n\t\t}\n\t\treturn new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));\n\t}\n\n\tmapResult(response: unknown, isFromBatch?: boolean) {\n\t\tswitch (this.executeMethod) {\n\t\t\tcase 'run': {\n\t\t\t\treturn this.mapRunResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'all': {\n\t\t\t\treturn this.mapAllResult(response, isFromBatch);\n\t\t\t}\n\t\t\tcase 'get': {\n\t\t\t\treturn this.mapGetResult(response, isFromBatch);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface SQLiteTransactionConfig {\n\tbehavior?: 'deferred' | 'immediate' | 'exclusive';\n}\n\nexport type SQLiteExecuteMethod = 'run' | 'all' | 'get';\n\nexport abstract class SQLiteSession<\n\tTResultKind extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteSession';\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultKind],\n\t) {}\n\n\tabstract prepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }>;\n\n\tprepareOneTimeQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t): SQLitePreparedQuery<PreparedQueryConfig & { type: TResultKind }> {\n\t\treturn this.prepareQuery(query, fields, executeMethod, isResponseInArrayMode);\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: SQLiteTransaction<TResultKind, TRunResult, TFullSchema, TSchema>) => Result<TResultKind, T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Result<TResultKind, T>;\n\n\trun(query: SQL): Result<TResultKind, TRunResult> {\n\t\tconst staticQuery = this.dialect.sqlToQuery(query);\n\t\ttry {\n\t\t\treturn this.prepareOneTimeQuery(staticQuery, undefined, 'run', false).run() as Result<TResultKind, TRunResult>;\n\t\t} catch (err) {\n\t\t\tthrow new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });\n\t\t}\n\t}\n\n\t/** @internal */\n\textractRawRunValueFromBatchResult(result: unknown) {\n\t\treturn result;\n\t}\n\n\tall<T = unknown>(query: SQL): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).all() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawAllValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tget<T = unknown>(query: SQL): Result<TResultKind, T> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).get() as Result<\n\t\t\tTResultKind,\n\t\t\tT\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawGetValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n\n\tvalues<T extends any[] = unknown[]>(\n\t\tquery: SQL,\n\t): Result<TResultKind, T[]> {\n\t\treturn this.prepareOneTimeQuery(this.dialect.sqlToQuery(query), undefined, 'run', false).values() as Result<\n\t\t\tTResultKind,\n\t\t\tT[]\n\t\t>;\n\t}\n\n\t/** @internal */\n\textractRawValuesValueFromBatchResult(_result: unknown): unknown {\n\t\tthrow new Error('Not implemented');\n\t}\n}\n\nexport type Result<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: Promise<TResult> }[TKind];\n\nexport type DBResult<TKind extends 'sync' | 'async', TResult> = { sync: TResult; async: SQLiteRaw<TResult> }[TKind];\n\nexport abstract class SQLiteTransaction<\n\tTResultType extends 'sync' | 'async',\n\tTRunResult,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends BaseSQLiteDatabase<TResultType, TRunResult, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'SQLiteTransaction';\n\n\tconstructor(\n\t\tresultType: TResultType,\n\t\tdialect: { sync: SQLiteSyncDialect; async: SQLiteAsyncDialect }[TResultType],\n\t\tsession: SQLiteSession<TResultType, TRunResult, TFullSchema, TSchema>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(resultType, dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n}\n", "//# sourceMappingURL=subquery.js.map", "export const SQLiteViewConfig = Symbol.for('drizzle:SQLiteViewConfig');\n", "import { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { Check } from './checks.ts';\nimport { CheckBuilder } from './checks.ts';\nimport type { ForeignKey } from './foreign-keys.ts';\nimport { ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKey } from './primary-keys.ts';\nimport { PrimaryKeyBuilder } from './primary-keys.ts';\nimport { SQLiteTable } from './table.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport { SQLiteViewConfig } from './view-common.ts';\nimport type { SQLiteView } from './view.ts';\n\nexport function getTableConfig<TTable extends SQLiteTable>(table: TTable) {\n\tconst columns = Object.values(table[SQLiteTable.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[SQLiteTable.Symbol.InlineForeignKeys]);\n\tconst name = table[Table.Symbol.Name];\n\n\tconst extraConfigBuilder = table[SQLiteTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[SQLiteTable.Symbol.Columns]);\n\t\tfor (const builder of Object.values(extraConfig)) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t};\n}\n\nexport type OnConflict = 'rollback' | 'abort' | 'fail' | 'ignore' | 'replace';\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: SQLiteView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[SQLiteViewConfig],\n\t};\n}\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { SQLiteColumn, SQLiteColumnBuilderBase } from './columns/common.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport { sqliteTable } from './table.ts';\nimport { SQLiteViewBase } from './view-base.ts';\nimport { SQLiteViewConfig } from './view-common.ts';\n\nexport interface ViewBuilderConfig {\n\talgorithm?: 'undefined' | 'merge' | 'temptable';\n\tdefiner?: string;\n\tsqlSecurity?: 'definer' | 'invoker';\n\twithCheckOption?: 'cascaded' | 'local';\n}\n\nexport class ViewBuilderCore<\n\tTConfig extends { name: string; columns?: unknown },\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBuilderCore';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t) {}\n\n\tprotected config: ViewBuilderConfig = {};\n}\n\nexport class ViewBuilder<TName extends string = string> extends ViewBuilderCore<{ name: TName }> {\n\tstatic readonly [entityKind]: string = 'SQLiteViewBuilder';\n\n\tas<TSelection extends SelectedFields>(\n\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t): SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelection>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\t// const aliasedSelectedFields = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\tconst aliasedSelectedFields = qb.getSelectedFields();\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tsqliteConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: aliasedSelectedFields,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as SQLiteViewWithSelection<TName, false, AddAliasToSelection<TSelection, TName, 'sqlite'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, SQLiteColumnBuilderBase> = Record<string, SQLiteColumnBuilderBase>,\n> extends ViewBuilderCore<\n\t{ name: TName; columns: TColumns }\n> {\n\tstatic readonly [entityKind]: string = 'SQLiteManualViewBuilder';\n\n\tprivate columns: Record<string, SQLiteColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t) {\n\t\tsuper(name);\n\t\tthis.columns = getTableColumns(sqliteTable(name, columns)) as BuildColumns<TName, TColumns, 'sqlite'>;\n\t}\n\n\texisting(): SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tsqliteConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n\n\tas(query: SQL): SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>> {\n\t\treturn new Proxy(\n\t\t\tnew SQLiteView({\n\t\t\t\tsqliteConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: undefined,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as SQLiteViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'sqlite'>>;\n\t}\n}\n\nexport class SQLiteView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelection extends ColumnsSelection = ColumnsSelection,\n> extends SQLiteViewBase<TName, TExisting, TSelection> {\n\tstatic readonly [entityKind]: string = 'SQLiteView';\n\n\t/** @internal */\n\t[SQLiteViewConfig]: ViewBuilderConfig | undefined;\n\n\tconstructor({ sqliteConfig, config }: {\n\t\tsqliteConfig: ViewBuilderConfig | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tthis[SQLiteViewConfig] = sqliteConfig;\n\t}\n}\n\nexport type SQLiteViewWithSelection<\n\tTName extends string,\n\tTExisting extends boolean,\n\tTSelection extends ColumnsSelection,\n> = SQLiteView<TName, TExisting, TSelection> & TSelection;\n\nexport function sqliteView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function sqliteView<TName extends string, TColumns extends Record<string, SQLiteColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function sqliteView(\n\tname: string,\n\tselection?: Record<string, SQLiteColumnBuilderBase>,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection);\n\t}\n\treturn new ViewBuilder(name);\n}\n\nexport const view = sqliteView;\n", "export * from './alias.ts';\nexport * from './checks.ts';\nexport * from './columns/index.ts';\nexport * from './db.ts';\nexport * from './dialect.ts';\nexport * from './foreign-keys.ts';\nexport * from './indexes.ts';\nexport * from './primary-keys.ts';\nexport * from './query-builders/index.ts';\nexport * from './session.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './unique-constraint.ts';\nexport * from './utils.ts';\nexport * from './view.ts';\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\nimport type { BatchItem } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { Logger } from '~/logger.ts';\nimport { NoopLogger } from '~/logger.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { fillPlaceholders, type Query, sql } from '~/sql/sql.ts';\nimport type { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport { SQLiteTransaction } from '~/sqlite-core/index.ts';\nimport type { SelectedFieldsOrdered } from '~/sqlite-core/query-builders/select.types.ts';\nimport type {\n\tPreparedQueryConfig as PreparedQueryConfigBase,\n\tSQLiteExecuteMethod,\n\tSQLiteTransactionConfig,\n} from '~/sqlite-core/session.ts';\nimport { SQLitePreparedQuery, SQLiteSession } from '~/sqlite-core/session.ts';\nimport { mapResultRow } from '~/utils.ts';\n\nexport interface SQLiteD1SessionOptions {\n\tlogger?: Logger;\n}\n\ntype PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;\n\nexport class SQLiteD1Session<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteSession<'async', D1Result, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'SQLiteD1Session';\n\n\tprivate logger: Logger;\n\n\tconstructor(\n\t\tprivate client: D1Database,\n\t\tdialect: SQLiteAsyncDialect,\n\t\tprivate schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprivate options: SQLiteD1SessionOptions = {},\n\t) {\n\t\tsuper(dialect);\n\t\tthis.logger = options.logger ?? new NoopLogger();\n\t}\n\n\tprepareQuery(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t): D1PreparedQuery {\n\t\tconst stmt = this.client.prepare(query.sql);\n\t\treturn new D1PreparedQuery(\n\t\t\tstmt,\n\t\t\tquery,\n\t\t\tthis.logger,\n\t\t\tfields,\n\t\t\texecuteMethod,\n\t\t\tisResponseInArrayMode,\n\t\t\tcustomResultMapper,\n\t\t);\n\t}\n\n\tasync batch<T extends BatchItem<'sqlite'>[] | readonly BatchItem<'sqlite'>[]>(queries: T) {\n\t\tconst preparedQueries: PreparedQuery[] = [];\n\t\tconst builtQueries: D1PreparedStatement[] = [];\n\n\t\tfor (const query of queries) {\n\t\t\tconst preparedQuery = query._prepare();\n\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\tpreparedQueries.push(preparedQuery);\n\t\t\tif (builtQuery.params.length > 0) {\n\t\t\t\tbuiltQueries.push((preparedQuery as D1PreparedQuery).stmt.bind(...builtQuery.params));\n\t\t\t} else {\n\t\t\t\tconst builtQuery = preparedQuery.getQuery();\n\t\t\t\tbuiltQueries.push(\n\t\t\t\t\tthis.client.prepare(builtQuery.sql).bind(...builtQuery.params),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst batchResults = await this.client.batch<any>(builtQueries);\n\t\treturn batchResults.map((result, i) => preparedQueries[i]!.mapResult(result, true));\n\t}\n\n\toverride extractRawAllValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results;\n\t}\n\n\toverride extractRawGetValueFromBatchResult(result: unknown): unknown {\n\t\treturn (result as D1Result).results[0];\n\t}\n\n\toverride extractRawValuesValueFromBatchResult(result: unknown): unknown {\n\t\treturn d1ToRawMapping((result as D1Result).results);\n\t}\n\n\toverride async transaction<T>(\n\t\ttransaction: (tx: D1Transaction<TFullSchema, TSchema>) => T | Promise<T>,\n\t\tconfig?: SQLiteTransactionConfig,\n\t): Promise<T> {\n\t\tconst tx = new D1Transaction('async', this.dialect, this, this.schema);\n\t\tawait this.run(sql.raw(`begin${config?.behavior ? ' ' + config.behavior : ''}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.run(sql`commit`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.run(sql`rollback`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nexport class D1Transaction<\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n> extends SQLiteTransaction<'async', D1Result, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'D1Transaction';\n\n\toverride async transaction<T>(transaction: (tx: D1Transaction<TFullSchema, TSchema>) => Promise<T>): Promise<T> {\n\t\tconst savepointName = `sp${this.nestedIndex}`;\n\t\tconst tx = new D1Transaction('async', this.dialect, this.session, this.schema, this.nestedIndex + 1);\n\t\tawait this.session.run(sql.raw(`savepoint ${savepointName}`));\n\t\ttry {\n\t\t\tconst result = await transaction(tx);\n\t\t\tawait this.session.run(sql.raw(`release savepoint ${savepointName}`));\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tawait this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * This function was taken from the D1 implementation: https://github.com/cloudflare/workerd/blob/4aae9f4c7ae30a59a88ca868c4aff88bda85c956/src/cloudflare/internal/d1-api.ts#L287\n * It may cause issues with duplicated column names in join queries, which should be fixed on the D1 side.\n * @param results\n * @returns\n */\nfunction d1ToRawMapping(results: any) {\n\tconst rows: unknown[][] = [];\n\tfor (const row of results) {\n\t\tconst entry = Object.keys(row).map((k) => row[k]);\n\t\trows.push(entry);\n\t}\n\treturn rows;\n}\n\nexport class D1PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends SQLitePreparedQuery<\n\t{ type: 'async'; run: D1Response; all: T['all']; get: T['get']; values: T['values']; execute: T['execute'] }\n> {\n\tstatic readonly [entityKind]: string = 'D1PreparedQuery';\n\n\t/** @internal */\n\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => unknown;\n\n\t/** @internal */\n\tfields?: SelectedFieldsOrdered;\n\n\t/** @internal */\n\tstmt: D1PreparedStatement;\n\n\tconstructor(\n\t\tstmt: D1PreparedStatement,\n\t\tquery: Query,\n\t\tprivate logger: Logger,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\texecuteMethod: SQLiteExecuteMethod,\n\t\tprivate _isResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][]) => unknown,\n\t) {\n\t\tsuper('async', executeMethod, query);\n\t\tthis.customResultMapper = customResultMapper;\n\t\tthis.fields = fields;\n\t\tthis.stmt = stmt;\n\t}\n\n\trun(placeholderValues?: Record<string, unknown>): Promise<D1Response> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).run();\n\t}\n\n\tasync all(placeholderValues?: Record<string, unknown>): Promise<T['all']> {\n\t\tconst { fields, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => this.mapAllResult(results!));\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\treturn this.mapAllResult(rows);\n\t}\n\n\toverride mapAllResult(rows: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\trows = d1ToRawMapping((rows as D1Result).results);\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn rows;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper(rows as unknown[][]);\n\t\t}\n\n\t\treturn (rows as unknown[][]).map((row) => mapResultRow(this.fields!, row, this.joinsNotNullableMap));\n\t}\n\n\tasync get(placeholderValues?: Record<string, unknown>): Promise<T['get']> {\n\t\tconst { fields, joinsNotNullableMap, query, logger, stmt, customResultMapper } = this;\n\t\tif (!fields && !customResultMapper) {\n\t\t\tconst params = fillPlaceholders(query.params, placeholderValues ?? {});\n\t\t\tlogger.logQuery(query.sql, params);\n\t\t\treturn stmt.bind(...params).all().then(({ results }) => results![0]);\n\t\t}\n\n\t\tconst rows = await this.values(placeholderValues);\n\n\t\tif (!rows[0]) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (customResultMapper) {\n\t\t\treturn customResultMapper(rows) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(fields!, rows[0], joinsNotNullableMap);\n\t}\n\n\toverride mapGetResult(result: unknown, isFromBatch?: boolean): unknown {\n\t\tif (isFromBatch) {\n\t\t\tresult = d1ToRawMapping((result as D1Result).results)[0];\n\t\t}\n\n\t\tif (!this.fields && !this.customResultMapper) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (this.customResultMapper) {\n\t\t\treturn this.customResultMapper([result as unknown[]]) as T['all'];\n\t\t}\n\n\t\treturn mapResultRow(this.fields!, result as unknown[], this.joinsNotNullableMap);\n\t}\n\n\tvalues<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]> {\n\t\tconst params = fillPlaceholders(this.query.params, placeholderValues ?? {});\n\t\tthis.logger.logQuery(this.query.sql, params);\n\t\treturn this.stmt.bind(...params).raw();\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode(): boolean {\n\t\treturn this._isResponseInArrayMode;\n\t}\n}\n", "/// <reference types=\"@cloudflare/workers-types\" />\nimport type { BatchItem, BatchResponse } from '~/batch.ts';\nimport { entityKind } from '~/entity.ts';\nimport { DefaultLogger } from '~/logger.ts';\nimport {\n\tcreateTableRelationsHelpers,\n\textractTablesRelationalConfig,\n\ttype ExtractTablesWithRelations,\n\ttype RelationalSchemaConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { BaseSQLiteDatabase } from '~/sqlite-core/db.ts';\nimport { SQLiteAsyncDialect } from '~/sqlite-core/dialect.ts';\nimport type { DrizzleConfig } from '~/utils.ts';\nimport { SQLiteD1Session } from './session.ts';\n\nexport class DrizzleD1Database<\n\tTSchema extends Record<string, unknown> = Record<string, never>,\n> extends BaseSQLiteDatabase<'async', D1Result, TSchema> {\n\tstatic readonly [entityKind]: string = 'D1Database';\n\n\t/** @internal */\n\tdeclare readonly session: SQLiteD1Session<TSchema, ExtractTablesWithRelations<TSchema>>;\n\n\tasync batch<U extends BatchItem<'sqlite'>, T extends Readonly<[U, ...U[]]>>(\n\t\tbatch: T,\n\t): Promise<BatchResponse<T>> {\n\t\treturn this.session.batch(batch) as Promise<BatchResponse<T>>;\n\t}\n}\n\nexport function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(\n\tclient: D1Database,\n\tconfig: DrizzleConfig<TSchema> = {},\n): DrizzleD1Database<TSchema> {\n\tconst dialect = new SQLiteAsyncDialect();\n\tlet logger;\n\tif (config.logger === true) {\n\t\tlogger = new DefaultLogger();\n\t} else if (config.logger !== false) {\n\t\tlogger = config.logger;\n\t}\n\n\tlet schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined;\n\tif (config.schema) {\n\t\tconst tablesConfig = extractTablesRelationalConfig(\n\t\t\tconfig.schema,\n\t\t\tcreateTableRelationsHelpers,\n\t\t);\n\t\tschema = {\n\t\t\tfullSchema: config.schema,\n\t\t\tschema: tablesConfig.tables,\n\t\t\ttableNamesMap: tablesConfig.tableNamesMap,\n\t\t};\n\t}\n\n\tconst session = new SQLiteD1Session(client, dialect, schema, { logger });\n\treturn new DrizzleD1Database('async', dialect, session, schema) as DrizzleD1Database<TSchema>;\n}\n", "export * from './driver.ts';\nexport * from './session.ts';\n", "export * from './sql/expressions/index.ts';\n", "//# sourceMappingURL=operations.js.map", "export * from './alias.ts';\nexport * from './column-builder.ts';\nexport * from './column.ts';\nexport * from './entity.ts';\nexport * from './errors.ts';\nexport * from './expressions.ts';\nexport * from './logger.ts';\nexport * from './operations.ts';\nexport * from './query-promise.ts';\nexport * from './relations.ts';\nexport * from './sql/index.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './utils.ts';\nexport * from './view-common.ts';\n", "import { TableAliasProxyHandler } from '~/alias.ts';\nimport type { BuildAliasTable } from './query-builders/select.types.ts';\nimport type { MySqlTable } from './table.ts';\nimport type { MySqlViewBase } from './view-base.ts';\n\nexport function alias<TTable extends MySqlTable | MySqlViewBase, TAlias extends string>(\n\ttable: TTable,\n\talias: TAlias,\n): BuildAliasTable<TTable, TAlias> {\n\treturn new Proxy(table, new TableAliasProxyHandler(alias, false)) as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { MySqlTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlCheckBuilder';\n\n\tprotected brand!: 'MySqlConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\t/** @internal */\n\tbuild(table: MySqlTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'MySqlCheck';\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: MySqlTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n", "import type { BuildColumns, BuildExtraConfigColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from '~/table.ts';\nimport type { CheckBuilder } from './checks.ts';\nimport type { MySqlColumn, MySqlColumnBuilder, MySqlColumnBuilderBase } from './columns/common.ts';\nimport type { ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { AnyIndexBuilder } from './indexes.ts';\nimport type { PrimaryKeyBuilder } from './primary-keys.ts';\nimport type { UniqueConstraintBuilder } from './unique-constraint.ts';\n\nexport type MySqlTableExtraConfig = Record<\n\tstring,\n\t| AnyIndexBuilder\n\t| CheckBuilder\n\t| ForeignKeyBuilder\n\t| PrimaryKeyBuilder\n\t| UniqueConstraintBuilder\n>;\n\nexport type TableConfig = TableConfigBase<MySqlColumn>;\n\n/** @internal */\nexport const InlineForeignKeys = Symbol.for('drizzle:MySqlInlineForeignKeys');\n\nexport class MySqlTable<T extends TableConfig = TableConfig> extends Table<T> {\n\tstatic readonly [entityKind]: string = 'MySqlTable';\n\n\tdeclare protected $columns: T['columns'];\n\n\t/** @internal */\n\tstatic override readonly Symbol = Object.assign({}, Table.Symbol, {\n\t\tInlineForeignKeys: InlineForeignKeys as typeof InlineForeignKeys,\n\t});\n\n\t/** @internal */\n\toverride [Table.Symbol.Columns]!: NonNullable<T['columns']>;\n\n\t/** @internal */\n\t[InlineForeignKeys]: ForeignKey[] = [];\n\n\t/** @internal */\n\toverride [Table.Symbol.ExtraConfigBuilder]:\n\t\t| ((self: Record<string, MySqlColumn>) => MySqlTableExtraConfig)\n\t\t| undefined = undefined;\n}\n\nexport type AnyMySqlTable<TPartial extends Partial<TableConfig> = {}> = MySqlTable<\n\tUpdateTableConfig<TableConfig, TPartial>\n>;\n\nexport type MySqlTableWithColumns<T extends TableConfig> =\n\t& MySqlTable<T>\n\t& {\n\t\t[Key in keyof T['columns']]: T['columns'][Key];\n\t};\n\nexport function mysqlTableWithSchema<\n\tTTableName extends string,\n\tTSchemaName extends string | undefined,\n\tTColumnsMap extends Record<string, MySqlColumnBuilderBase>,\n>(\n\tname: TTableName,\n\tcolumns: TColumnsMap,\n\textraConfig: ((self: BuildColumns<TTableName, TColumnsMap, 'mysql'>) => MySqlTableExtraConfig) | undefined,\n\tschema: TSchemaName,\n\tbaseName = name,\n): MySqlTableWithColumns<{\n\tname: TTableName;\n\tschema: TSchemaName;\n\tcolumns: BuildColumns<TTableName, TColumnsMap, 'mysql'>;\n\tdialect: 'mysql';\n}> {\n\tconst rawTable = new MySqlTable<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'mysql'>;\n\t\tdialect: 'mysql';\n\t}>(name, schema, baseName);\n\n\tconst builtColumns = Object.fromEntries(\n\t\tObject.entries(columns).map(([name, colBuilderBase]) => {\n\t\t\tconst colBuilder = colBuilderBase as MySqlColumnBuilder;\n\t\t\tconst column = colBuilder.build(rawTable);\n\t\t\trawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));\n\t\t\treturn [name, column];\n\t\t}),\n\t) as unknown as BuildColumns<TTableName, TColumnsMap, 'mysql'>;\n\n\tconst table = Object.assign(rawTable, builtColumns);\n\n\ttable[Table.Symbol.Columns] = builtColumns;\n\ttable[Table.Symbol.ExtraConfigColumns] = builtColumns as unknown as BuildExtraConfigColumns<\n\t\tTTableName,\n\t\tTColumnsMap,\n\t\t'mysql'\n\t>;\n\n\tif (extraConfig) {\n\t\ttable[MySqlTable.Symbol.ExtraConfigBuilder] = extraConfig as unknown as (\n\t\t\tself: Record<string, MySqlColumn>,\n\t\t) => MySqlTableExtraConfig;\n\t}\n\n\treturn table;\n}\n\nexport interface MySqlTableFn<TSchemaName extends string | undefined = undefined> {\n\t<\n\t\tTTableName extends string,\n\t\tTColumnsMap extends Record<string, MySqlColumnBuilderBase>,\n\t>(\n\t\tname: TTableName,\n\t\tcolumns: TColumnsMap,\n\t\textraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'mysql'>) => MySqlTableExtraConfig,\n\t): MySqlTableWithColumns<{\n\t\tname: TTableName;\n\t\tschema: TSchemaName;\n\t\tcolumns: BuildColumns<TTableName, TColumnsMap, 'mysql'>;\n\t\tdialect: 'mysql';\n\t}>;\n}\n\nexport const mysqlTable: MySqlTableFn = (name, columns, extraConfig) => {\n\treturn mysqlTableWithSchema(name, columns, extraConfig, undefined, name);\n};\n\nexport function mysqlTableCreator(customizeTableName: (name: string) => string): MySqlTableFn {\n\treturn (name, columns, extraConfig) => {\n\t\treturn mysqlTableWithSchema(customizeTableName(name) as typeof name, columns, extraConfig, undefined, name);\n\t};\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyMySqlColumn, MySqlColumn } from './columns/index.ts';\nimport { MySqlTable } from './table.ts';\n\nexport type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';\n\nexport type Reference = () => {\n\treadonly name?: string;\n\treadonly columns: MySqlColumn[];\n\treadonly foreignTable: MySqlTable;\n\treadonly foreignColumns: MySqlColumn[];\n};\n\nexport class ForeignKeyBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlForeignKeyBuilder';\n\n\t/** @internal */\n\treference: Reference;\n\n\t/** @internal */\n\t_onUpdate: UpdateDeleteAction | undefined;\n\n\t/** @internal */\n\t_onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(\n\t\tconfig: () => {\n\t\t\tname?: string;\n\t\t\tcolumns: MySqlColumn[];\n\t\t\tforeignColumns: MySqlColumn[];\n\t\t},\n\t\tactions?: {\n\t\t\tonUpdate?: UpdateDeleteAction;\n\t\t\tonDelete?: UpdateDeleteAction;\n\t\t} | undefined,\n\t) {\n\t\tthis.reference = () => {\n\t\t\tconst { name, columns, foreignColumns } = config();\n\t\t\treturn { name, columns, foreignTable: foreignColumns[0]!.table as MySqlTable, foreignColumns };\n\t\t};\n\t\tif (actions) {\n\t\t\tthis._onUpdate = actions.onUpdate;\n\t\t\tthis._onDelete = actions.onDelete;\n\t\t}\n\t}\n\n\tonUpdate(action: UpdateDeleteAction): this {\n\t\tthis._onUpdate = action;\n\t\treturn this;\n\t}\n\n\tonDelete(action: UpdateDeleteAction): this {\n\t\tthis._onDelete = action;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: MySqlTable): ForeignKey {\n\t\treturn new ForeignKey(table, this);\n\t}\n}\n\nexport type AnyForeignKeyBuilder = ForeignKeyBuilder;\n\nexport class ForeignKey {\n\tstatic readonly [entityKind]: string = 'MySqlForeignKey';\n\n\treadonly reference: Reference;\n\treadonly onUpdate: UpdateDeleteAction | undefined;\n\treadonly onDelete: UpdateDeleteAction | undefined;\n\n\tconstructor(readonly table: MySqlTable, builder: ForeignKeyBuilder) {\n\t\tthis.reference = builder.reference;\n\t\tthis.onUpdate = builder._onUpdate;\n\t\tthis.onDelete = builder._onDelete;\n\t}\n\n\tgetName(): string {\n\t\tconst { name, columns, foreignColumns } = this.reference();\n\t\tconst columnNames = columns.map((column) => column.name);\n\t\tconst foreignColumnNames = foreignColumns.map((column) => column.name);\n\t\tconst chunks = [\n\t\t\tthis.table[MySqlTable.Symbol.Name],\n\t\t\t...columnNames,\n\t\t\tforeignColumns[0]!.table[MySqlTable.Symbol.Name],\n\t\t\t...foreignColumnNames,\n\t\t];\n\t\treturn name ?? `${chunks.join('_')}_fk`;\n\t}\n}\n\ntype ColumnsWithTable<\n\tTTableName extends string,\n\tTColumns extends MySqlColumn[],\n> = { [Key in keyof TColumns]: AnyMySqlColumn<{ tableName: TTableName }> };\n\nexport type GetColumnsTable<TColumns extends MySqlColumn | MySqlColumn[]> = (\n\tTColumns extends MySqlColumn ? TColumns\n\t\t: TColumns extends MySqlColumn[] ? TColumns[number]\n\t\t: never\n) extends AnyMySqlColumn<{ tableName: infer TTableName extends string }> ? TTableName\n\t: never;\n\nexport function foreignKey<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends [AnyMySqlColumn<{ tableName: TTableName }>, ...AnyMySqlColumn<{ tableName: TTableName }>[]],\n>(\n\tconfig: {\n\t\tname?: string;\n\t\tcolumns: TColumns;\n\t\tforeignColumns: ColumnsWithTable<TForeignTableName, TColumns>;\n\t},\n): ForeignKeyBuilder {\n\tfunction mappedConfig() {\n\t\tconst { name, columns, foreignColumns } = config;\n\t\treturn {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tforeignColumns,\n\t\t};\n\t}\n\n\treturn new ForeignKeyBuilder(mappedConfig);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { MySqlColumn } from './columns/index.ts';\nimport { MySqlTable } from './table.ts';\n\nexport function unique(name?: string): UniqueOnConstraintBuilder {\n\treturn new UniqueOnConstraintBuilder(name);\n}\n\nexport function uniqueKeyName(table: MySqlTable, columns: string[]) {\n\treturn `${table[MySqlTable.Symbol.Name]}_${columns.join('_')}_unique`;\n}\n\nexport class UniqueConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlUniqueConstraintBuilder';\n\n\t/** @internal */\n\tcolumns: MySqlColumn[];\n\n\tconstructor(\n\t\tcolumns: MySqlColumn[],\n\t\tprivate name?: string,\n\t) {\n\t\tthis.columns = columns;\n\t}\n\n\t/** @internal */\n\tbuild(table: MySqlTable): UniqueConstraint {\n\t\treturn new UniqueConstraint(table, this.columns, this.name);\n\t}\n}\n\nexport class UniqueOnConstraintBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlUniqueOnConstraintBuilder';\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tname?: string,\n\t) {\n\t\tthis.name = name;\n\t}\n\n\ton(...columns: [MySqlColumn, ...MySqlColumn[]]) {\n\t\treturn new UniqueConstraintBuilder(columns, this.name);\n\t}\n}\n\nexport class UniqueConstraint {\n\tstatic readonly [entityKind]: string = 'MySqlUniqueConstraint';\n\n\treadonly columns: MySqlColumn[];\n\treadonly name?: string;\n\treadonly nullsNotDistinct: boolean = false;\n\n\tconstructor(readonly table: MySqlTable, columns: MySqlColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n}\n", "import { ColumnBuilder } from '~/column-builder.ts';\nimport type {\n\tColumnBuilderBase,\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnBuilderRuntimeConfig,\n\tColumnDataType,\n\tHasDefault,\n\tHasGenerated,\n\tIsAutoincrement,\n\tMakeColumnConfig,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { ForeignKey, UpdateDeleteAction } from '~/mysql-core/foreign-keys.ts';\nimport { ForeignKeyBuilder } from '~/mysql-core/foreign-keys.ts';\nimport type { AnyMySqlTable, MySqlTable } from '~/mysql-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { Update } from '~/utils.ts';\nimport { uniqueKeyName } from '../unique-constraint.ts';\n\nexport interface ReferenceConfig {\n\tref: () => MySqlColumn;\n\tactions: {\n\t\tonUpdate?: UpdateDeleteAction;\n\t\tonDelete?: UpdateDeleteAction;\n\t};\n}\n\nexport interface MySqlColumnBuilderBase<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTTypeConfig extends object = object,\n> extends ColumnBuilderBase<T, TTypeConfig & { dialect: 'mysql' }> {}\n\nexport interface MySqlGeneratedColumnConfig {\n\tmode?: 'virtual' | 'stored';\n}\n\nexport abstract class MySqlColumnBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string> & {\n\t\tdata: any;\n\t},\n\tTRuntimeConfig extends object = object,\n\tTTypeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends ColumnBuilder<T, TRuntimeConfig, TTypeConfig & { dialect: 'mysql' }, TExtraConfig>\n\timplements MySqlColumnBuilderBase<T, TTypeConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlColumnBuilder';\n\n\tprivate foreignKeyConfigs: ReferenceConfig[] = [];\n\n\treferences(ref: ReferenceConfig['ref'], actions: ReferenceConfig['actions'] = {}): this {\n\t\tthis.foreignKeyConfigs.push({ ref, actions });\n\t\treturn this;\n\t}\n\n\tunique(name?: string): this {\n\t\tthis.config.isUnique = true;\n\t\tthis.config.uniqueName = name;\n\t\treturn this;\n\t}\n\n\tgeneratedAlwaysAs(as: SQL | T['data'] | (() => SQL), config?: MySqlGeneratedColumnConfig): HasGenerated<this> {\n\t\tthis.config.generated = {\n\t\t\tas,\n\t\t\ttype: 'always',\n\t\t\tmode: config?.mode ?? 'virtual',\n\t\t};\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tbuildForeignKeys(column: MySqlColumn, table: MySqlTable): ForeignKey[] {\n\t\treturn this.foreignKeyConfigs.map(({ ref, actions }) => {\n\t\t\treturn ((ref, actions) => {\n\t\t\t\tconst builder = new ForeignKeyBuilder(() => {\n\t\t\t\t\tconst foreignColumn = ref();\n\t\t\t\t\treturn { columns: [column], foreignColumns: [foreignColumn] };\n\t\t\t\t});\n\t\t\t\tif (actions.onUpdate) {\n\t\t\t\t\tbuilder.onUpdate(actions.onUpdate);\n\t\t\t\t}\n\t\t\t\tif (actions.onDelete) {\n\t\t\t\t\tbuilder.onDelete(actions.onDelete);\n\t\t\t\t}\n\t\t\t\treturn builder.build(table);\n\t\t\t})(ref, actions);\n\t\t});\n\t}\n\n\t/** @internal */\n\tabstract build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlColumn<MakeColumnConfig<T, TTableName>>;\n}\n\n// To understand how to use `MySqlColumn` and `AnyMySqlColumn`, see `Column` and `AnyColumn` documentation.\nexport abstract class MySqlColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends Column<T, TRuntimeConfig, { dialect: 'mysql' }> {\n\tstatic readonly [entityKind]: string = 'MySqlColumn';\n\n\tconstructor(\n\t\toverride readonly table: MySqlTable,\n\t\tconfig: ColumnBuilderRuntimeConfig<T['data'], TRuntimeConfig>,\n\t) {\n\t\tif (!config.uniqueName) {\n\t\t\tconfig.uniqueName = uniqueKeyName(table, [config.name]);\n\t\t}\n\t\tsuper(table, config);\n\t}\n}\n\nexport type AnyMySqlColumn<TPartial extends Partial<ColumnBaseConfig<ColumnDataType, string>> = {}> = MySqlColumn<\n\tRequired<Update<ColumnBaseConfig<ColumnDataType, string>, TPartial>>\n>;\n\nexport interface MySqlColumnWithAutoIncrementConfig {\n\tautoIncrement: boolean;\n}\n\nexport abstract class MySqlColumnBuilderWithAutoIncrement<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string> = ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends MySqlColumnBuilder<T, TRuntimeConfig & MySqlColumnWithAutoIncrementConfig, TExtraConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlColumnBuilderWithAutoIncrement';\n\n\tconstructor(name: NonNullable<T['name']>, dataType: T['dataType'], columnType: T['columnType']) {\n\t\tsuper(name, dataType, columnType);\n\t\tthis.config.autoIncrement = false;\n\t}\n\n\tautoincrement(): IsAutoincrement<HasDefault<this>> {\n\t\tthis.config.autoIncrement = true;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as IsAutoincrement<HasDefault<this>>;\n\t}\n}\n\nexport abstract class MySqlColumnWithAutoIncrement<\n\tT extends ColumnBaseConfig<ColumnDataType, string> = ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends MySqlColumn<T, MySqlColumnWithAutoIncrementConfig & TRuntimeConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlColumnWithAutoIncrement';\n\n\treadonly autoIncrement: boolean = this.config.autoIncrement;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlBigInt53BuilderInitial<TName extends string> = MySqlBigInt53Builder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlBigInt53';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlBigInt53Builder<T extends ColumnBuilderBaseConfig<'number', 'MySqlBigInt53'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, { unsigned: boolean }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlBigInt53Builder';\n\n\tconstructor(name: T['name'], unsigned: boolean = false) {\n\t\tsuper(name, 'number', 'MySqlBigInt53');\n\t\tthis.config.unsigned = unsigned;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlBigInt53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlBigInt53<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlBigInt53<T extends ColumnBaseConfig<'number', 'MySqlBigInt53'>>\n\textends MySqlColumnWithAutoIncrement<T, { unsigned: boolean }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlBigInt53';\n\n\tgetSQLType(): string {\n\t\treturn `bigint${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type MySqlBigInt64BuilderInitial<TName extends string> = MySqlBigInt64Builder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'MySqlBigInt64';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlBigInt64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'MySqlBigInt64'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, { unsigned: boolean }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlBigInt64Builder';\n\n\tconstructor(name: T['name'], unsigned: boolean = false) {\n\t\tsuper(name, 'bigint', 'MySqlBigInt64');\n\t\tthis.config.unsigned = unsigned;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlBigInt64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlBigInt64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlBigInt64<T extends ColumnBaseConfig<'bigint', 'MySqlBigInt64'>>\n\textends MySqlColumnWithAutoIncrement<T, { unsigned: boolean }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlBigInt64';\n\n\tgetSQLType(): string {\n\t\treturn `bigint${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\ninterface MySqlBigIntConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n\tunsigned?: boolean;\n}\n\nexport function bigint<TName extends string, TMode extends MySqlBigIntConfig['mode']>(\n\tname: TName,\n\tconfig: MySqlBigIntConfig<TMode>,\n): TMode extends 'number' ? MySqlBigInt53BuilderInitial<TName> : MySqlBigInt64BuilderInitial<TName>;\nexport function bigint(name: string, config: MySqlBigIntConfig) {\n\tif (config.mode === 'number') {\n\t\treturn new MySqlBigInt53Builder(name, config.unsigned);\n\t}\n\treturn new MySqlBigInt64Builder(name, config.unsigned);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlBinaryBuilderInitial<TName extends string> = MySqlBinaryBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlBinary';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlBinaryBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlBinary'>> extends MySqlColumnBuilder<\n\tT,\n\tMySqlBinaryConfig\n> {\n\tstatic readonly [entityKind]: string = 'MySqlBinaryBuilder';\n\n\tconstructor(name: T['name'], length: number | undefined) {\n\t\tsuper(name, 'string', 'MySqlBinary');\n\t\tthis.config.length = length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlBinary<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlBinary<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlBinary<T extends ColumnBaseConfig<'string', 'MySqlBinary'>> extends MySqlColumn<\n\tT,\n\tMySqlBinaryConfig\n> {\n\tstatic readonly [entityKind]: string = 'MySqlBinary';\n\n\tlength: number | undefined = this.config.length;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `binary` : `binary(${this.length})`;\n\t}\n}\n\nexport interface MySqlBinaryConfig {\n\tlength?: number;\n}\n\nexport function binary<TName extends string>(\n\tname: TName,\n\tconfig: MySqlBinaryConfig = {},\n): MySqlBinaryBuilderInitial<TName> {\n\treturn new MySqlBinaryBuilder(name, config.length);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlBooleanBuilderInitial<TName extends string> = MySqlBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'MySqlBoolean';\n\tdata: boolean;\n\tdriverParam: number | boolean;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'MySqlBoolean'>>\n\textends MySqlColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'MySqlBooleanBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'boolean', 'MySqlBoolean');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlBoolean<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlBoolean<T extends ColumnBaseConfig<'boolean', 'MySqlBoolean'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlBoolean';\n\n\tgetSQLType(): string {\n\t\treturn 'boolean';\n\t}\n\n\toverride mapFromDriverValue(value: number | boolean): boolean {\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn value;\n\t\t}\n\t\treturn value === 1;\n\t}\n}\n\nexport function boolean<TName extends string>(name: TName): MySqlBooleanBuilderInitial<TName> {\n\treturn new MySqlBooleanBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlCharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlCharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlChar';\n\tdata: TEnum[number];\n\tdriverParam: number | string;\n\tenumValues: TEnum;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlChar'>> extends MySqlColumnBuilder<\n\tT,\n\tMySqlCharConfig<T['enumValues']>\n> {\n\tstatic readonly [entityKind]: string = 'MySqlCharBuilder';\n\n\tconstructor(name: T['name'], config: MySqlCharConfig<T['enumValues']>) {\n\t\tsuper(name, 'string', 'MySqlChar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enum = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlChar<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }> {\n\t\treturn new MySqlChar<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlChar<T extends ColumnBaseConfig<'string', 'MySqlChar'>>\n\textends MySqlColumn<T, MySqlCharConfig<T['enumValues']>>\n{\n\tstatic readonly [entityKind]: string = 'MySqlChar';\n\n\treadonly length: number | undefined = this.config.length;\n\toverride readonly enumValues = this.config.enum;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `char` : `char(${this.length})`;\n\t}\n}\n\nexport interface MySqlCharConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tlength?: number;\n\tenum?: TEnum;\n}\n\nexport function char<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlCharConfig<T | Writable<T>> = {},\n): MySqlCharBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlCharBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { Equal } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'MySqlCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t\tgenerated: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface MySqlCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class MySqlCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'MySqlCustomColumn'>>\n\textends MySqlColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tmysqlColumnBuilderBrand: 'MySqlCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic readonly [entityKind]: string = 'MySqlCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'MySqlCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlCustomColumn<T extends ColumnBaseConfig<'custom', 'MySqlCustomColumn'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnyMySqlTable<{ name: T['tableName'] }>,\n\t\tconfig: MySqlCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: unknown;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom mysql database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig: T['config'],\n\t) => MySqlCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n\t: <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t) => MySqlCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n{\n\treturn <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t): MySqlCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\treturn new MySqlCustomColumnBuilder(dbName as ConvertCustomConfig<TName, T>['name'], fieldConfig, customTypeParams);\n\t};\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlDateBuilderInitial<TName extends string> = MySqlDateBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'MySqlDate';\n\tdata: Date;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDateBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlDate'>> extends MySqlColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'MySqlDateBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'date', 'MySqlDate');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDate<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDate<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlDate<T extends ColumnBaseConfig<'date', 'MySqlDate'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlDate';\n\n\tconstructor(\n\t\ttable: AnyMySqlTable<{ name: T['tableName'] }>,\n\t\tconfig: MySqlDateBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `date`;\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value);\n\t}\n}\n\nexport type MySqlDateStringBuilderInitial<TName extends string> = MySqlDateStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlDateString';\n\tdata: string;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDateStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlDateString'>>\n\textends MySqlColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDateStringBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'MySqlDateString');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDateString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDateString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlDateString<T extends ColumnBaseConfig<'string', 'MySqlDateString'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlDateString';\n\n\tconstructor(\n\t\ttable: AnyMySqlTable<{ name: T['tableName'] }>,\n\t\tconfig: MySqlDateStringBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn `date`;\n\t}\n}\n\nexport interface MySqlDateConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n}\n\nexport function date<TName extends string, TMode extends MySqlDateConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: MySqlDateConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? MySqlDateStringBuilderInitial<TName> : MySqlDateBuilderInitial<TName>;\nexport function date(name: string, config: MySqlDateConfig = {}) {\n\tif (config.mode === 'string') {\n\t\treturn new MySqlDateStringBuilder(name);\n\t}\n\treturn new MySqlDateBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlDateTimeBuilderInitial<TName extends string> = MySqlDateTimeBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'MySqlDateTime';\n\tdata: Date;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDateTimeBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlDateTime'>>\n\textends MySqlColumnBuilder<T, MySqlDatetimeConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDateTimeBuilder';\n\n\tconstructor(name: T['name'], config: MySqlDatetimeConfig | undefined) {\n\t\tsuper(name, 'date', 'MySqlDateTime');\n\t\tthis.config.fsp = config?.fsp;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDateTime<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDateTime<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlDateTime<T extends ColumnBaseConfig<'date', 'MySqlDateTime'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlDateTime';\n\n\treadonly fsp: number | undefined;\n\n\tconstructor(\n\t\ttable: AnyMySqlTable<{ name: T['tableName'] }>,\n\t\tconfig: MySqlDateTimeBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.fsp = config.fsp;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n\t\treturn `datetime${precision}`;\n\t}\n\n\toverride mapToDriverValue(value: Date): unknown {\n\t\treturn value.toISOString().replace('T', ' ').replace('Z', '');\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value.replace(' ', 'T') + 'Z');\n\t}\n}\n\nexport type MySqlDateTimeStringBuilderInitial<TName extends string> = MySqlDateTimeStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlDateTimeString';\n\tdata: string;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDateTimeStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlDateTimeString'>>\n\textends MySqlColumnBuilder<T, MySqlDatetimeConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDateTimeStringBuilder';\n\n\tconstructor(name: T['name'], config: MySqlDatetimeConfig | undefined) {\n\t\tsuper(name, 'string', 'MySqlDateTimeString');\n\t\tthis.config.fsp = config?.fsp;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDateTimeString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDateTimeString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlDateTimeString<T extends ColumnBaseConfig<'string', 'MySqlDateTimeString'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlDateTimeString';\n\n\treadonly fsp: number | undefined;\n\n\tconstructor(\n\t\ttable: AnyMySqlTable<{ name: T['tableName'] }>,\n\t\tconfig: MySqlDateTimeStringBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.fsp = config.fsp;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n\t\treturn `datetime${precision}`;\n\t}\n}\n\nexport type DatetimeFsp = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface MySqlDatetimeConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n\tfsp?: DatetimeFsp;\n}\n\nexport function datetime<TName extends string, TMode extends MySqlDatetimeConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: MySqlDatetimeConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? MySqlDateTimeStringBuilderInitial<TName> : MySqlDateTimeBuilderInitial<TName>;\nexport function datetime(name: string, config: MySqlDatetimeConfig = {}) {\n\tif (config.mode === 'string') {\n\t\treturn new MySqlDateTimeStringBuilder(name, config);\n\t}\n\treturn new MySqlDateTimeBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlDecimalBuilderInitial<TName extends string> = MySqlDecimalBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlDecimal';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDecimalBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'MySqlDecimal'>,\n> extends MySqlColumnBuilderWithAutoIncrement<T, MySqlDecimalConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlDecimalBuilder';\n\n\tconstructor(name: T['name'], precision?: number, scale?: number) {\n\t\tsuper(name, 'string', 'MySqlDecimal');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDecimal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDecimal<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlDecimal<T extends ColumnBaseConfig<'string', 'MySqlDecimal'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlDecimalConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDecimal';\n\n\treadonly precision: number | undefined = this.config.precision;\n\treadonly scale: number | undefined = this.config.scale;\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `decimal(${this.precision},${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'decimal';\n\t\t} else {\n\t\t\treturn `decimal(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport interface MySqlDecimalConfig {\n\tprecision?: number;\n\tscale?: number;\n}\n\nexport function decimal<TName extends string>(\n\tname: TName,\n\tconfig: MySqlDecimalConfig = {},\n): MySqlDecimalBuilderInitial<TName> {\n\treturn new MySqlDecimalBuilder(name, config.precision, config.scale);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlDoubleBuilderInitial<TName extends string> = MySqlDoubleBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlDouble';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlDoubleBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlDouble'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, MySqlDoubleConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDoubleBuilder';\n\n\tconstructor(name: T['name'], config: MySqlDoubleConfig | undefined) {\n\t\tsuper(name, 'number', 'MySqlDouble');\n\t\tthis.config.precision = config?.precision;\n\t\tthis.config.scale = config?.scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlDouble<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlDouble<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlDouble<T extends ColumnBaseConfig<'number', 'MySqlDouble'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlDoubleConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlDouble';\n\n\tprecision: number | undefined = this.config.precision;\n\tscale: number | undefined = this.config.scale;\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `double(${this.precision},${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'double';\n\t\t} else {\n\t\t\treturn `double(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport interface MySqlDoubleConfig {\n\tprecision?: number;\n\tscale?: number;\n}\n\nexport function double<TName extends string>(\n\tname: TName,\n\tconfig?: MySqlDoubleConfig,\n): MySqlDoubleBuilderInitial<TName> {\n\treturn new MySqlDoubleBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlEnumColumnBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> =\n\tMySqlEnumColumnBuilder<{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'MySqlEnumColumn';\n\t\tdata: TEnum[number];\n\t\tdriverParam: string;\n\t\tenumValues: TEnum;\n\t\tgenerated: undefined;\n\t}>;\n\nexport class MySqlEnumColumnBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlEnumColumn'>>\n\textends MySqlColumnBuilder<T, { enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlEnumColumnBuilder';\n\n\tconstructor(name: T['name'], values: T['enumValues']) {\n\t\tsuper(name, 'string', 'MySqlEnumColumn');\n\t\tthis.config.enumValues = values;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlEnumColumn<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }> {\n\t\treturn new MySqlEnumColumn<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlEnumColumn<T extends ColumnBaseConfig<'string', 'MySqlEnumColumn'>>\n\textends MySqlColumn<T, { enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlEnumColumn';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn `enum(${this.enumValues!.map((value) => `'${value}'`).join(',')})`;\n\t}\n}\n\nexport function mysqlEnum<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tvalues: T | Writable<T>,\n): MySqlEnumColumnBuilderInitial<TName, Writable<T>> {\n\tif (values.length === 0) {\n\t\tthrow new Error(`You have an empty array for \"${name}\" enum values`);\n\t}\n\n\treturn new MySqlEnumColumnBuilder(name, values);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlFloatBuilderInitial<TName extends string> = MySqlFloatBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlFloat';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlFloatBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlFloat'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T>\n{\n\tstatic readonly [entityKind]: string = 'MySqlFloatBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'MySqlFloat');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlFloat<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlFloat<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlFloat<T extends ColumnBaseConfig<'number', 'MySqlFloat'>> extends MySqlColumnWithAutoIncrement<T> {\n\tstatic readonly [entityKind]: string = 'MySqlFloat';\n\n\tgetSQLType(): string {\n\t\treturn 'float';\n\t}\n}\n\nexport function float<TName extends string>(name: TName): MySqlFloatBuilderInitial<TName> {\n\treturn new MySqlFloatBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlIntBuilderInitial<TName extends string> = MySqlIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlInt'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlIntBuilder';\n\n\tconstructor(name: T['name'], config?: MySqlIntConfig) {\n\t\tsuper(name, 'number', 'MySqlInt');\n\t\tthis.config.unsigned = config ? config.unsigned : false;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlInt<T extends ColumnBaseConfig<'number', 'MySqlInt'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlInt';\n\n\tgetSQLType(): string {\n\t\treturn `int${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport interface MySqlIntConfig {\n\tunsigned?: boolean;\n}\n\nexport function int<TName extends string>(name: TName, config?: MySqlIntConfig): MySqlIntBuilderInitial<TName> {\n\treturn new MySqlIntBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlJsonBuilderInitial<TName extends string> = MySqlJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'MySqlJson';\n\tdata: unknown;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'MySqlJson'>> extends MySqlColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'MySqlJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'MySqlJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlJson<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlJson<T extends ColumnBaseConfig<'json', 'MySqlJson'>> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlJson';\n\n\tgetSQLType(): string {\n\t\treturn 'json';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n}\n\nexport function json<TName extends string>(name: TName): MySqlJsonBuilderInitial<TName> {\n\treturn new MySqlJsonBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\nimport type { MySqlIntConfig } from './int.ts';\n\nexport type MySqlMediumIntBuilderInitial<TName extends string> = MySqlMediumIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlMediumInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlMediumIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlMediumInt'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlMediumIntBuilder';\n\n\tconstructor(name: T['name'], config?: MySqlIntConfig) {\n\t\tsuper(name, 'number', 'MySqlMediumInt');\n\t\tthis.config.unsigned = config ? config.unsigned : false;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlMediumInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlMediumInt<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlMediumInt<T extends ColumnBaseConfig<'number', 'MySqlMediumInt'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlMediumInt';\n\n\tgetSQLType(): string {\n\t\treturn `mediumint${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function mediumint<TName extends string>(\n\tname: TName,\n\tconfig?: MySqlIntConfig,\n): MySqlMediumIntBuilderInitial<TName> {\n\treturn new MySqlMediumIntBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlRealBuilderInitial<TName extends string> = MySqlRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlReal';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlReal'>>\n\textends MySqlColumnBuilderWithAutoIncrement<\n\t\tT,\n\t\tMySqlRealConfig\n\t>\n{\n\tstatic readonly [entityKind]: string = 'MySqlRealBuilder';\n\n\tconstructor(name: T['name'], config: MySqlRealConfig | undefined) {\n\t\tsuper(name, 'number', 'MySqlReal');\n\t\tthis.config.precision = config?.precision;\n\t\tthis.config.scale = config?.scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlReal<T extends ColumnBaseConfig<'number', 'MySqlReal'>> extends MySqlColumnWithAutoIncrement<\n\tT,\n\tMySqlRealConfig\n> {\n\tstatic readonly [entityKind]: string = 'MySqlReal';\n\n\tprecision: number | undefined = this.config.precision;\n\tscale: number | undefined = this.config.scale;\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `real(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'real';\n\t\t} else {\n\t\t\treturn `real(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport interface MySqlRealConfig {\n\tprecision?: number;\n\tscale?: number;\n}\n\nexport function real<TName extends string>(name: TName, config: MySqlRealConfig = {}): MySqlRealBuilderInitial<TName> {\n\treturn new MySqlRealBuilder(name, config);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tIsAutoincrement,\n\tIsPrimaryKey,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\n\nexport type MySqlSerialBuilderInitial<TName extends string> = IsAutoincrement<\n\tIsPrimaryKey<\n\t\tNotNull<\n\t\t\tHasDefault<\n\t\t\t\tMySqlSerialBuilder<{\n\t\t\t\t\tname: TName;\n\t\t\t\t\tdataType: 'number';\n\t\t\t\t\tcolumnType: 'MySqlSerial';\n\t\t\t\t\tdata: number;\n\t\t\t\t\tdriverParam: number;\n\t\t\t\t\tenumValues: undefined;\n\t\t\t\t\tgenerated: undefined;\n\t\t\t\t}>\n\t\t\t>\n\t\t>\n\t>\n>;\n\nexport class MySqlSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlSerial'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T>\n{\n\tstatic readonly [entityKind]: string = 'MySqlSerialBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'MySqlSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.autoIncrement = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlSerial<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlSerial<\n\tT extends ColumnBaseConfig<'number', 'MySqlSerial'>,\n> extends MySqlColumnWithAutoIncrement<T> {\n\tstatic readonly [entityKind]: string = 'MySqlSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'serial';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function serial<TName extends string>(name: TName): MySqlSerialBuilderInitial<TName> {\n\treturn new MySqlSerialBuilder(name) as MySqlSerialBuilderInitial<TName>;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\nimport type { MySqlIntConfig } from './int.ts';\n\nexport type MySqlSmallIntBuilderInitial<TName extends string> = MySqlSmallIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlSmallInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlSmallIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlSmallInt'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlSmallIntBuilder';\n\n\tconstructor(name: T['name'], config?: MySqlIntConfig) {\n\t\tsuper(name, 'number', 'MySqlSmallInt');\n\t\tthis.config.unsigned = config ? config.unsigned : false;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlSmallInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlSmallInt<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlSmallInt<T extends ColumnBaseConfig<'number', 'MySqlSmallInt'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlSmallInt';\n\n\tgetSQLType(): string {\n\t\treturn `smallint${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function smallint<TName extends string>(\n\tname: TName,\n\tconfig?: MySqlIntConfig,\n): MySqlSmallIntBuilderInitial<TName> {\n\treturn new MySqlSmallIntBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlTextColumnType = 'tinytext' | 'text' | 'mediumtext' | 'longtext';\n\nexport type MySqlTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlText';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlTextBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlText'>> extends MySqlColumnBuilder<\n\tT,\n\t{ textType: MySqlTextColumnType; enumValues: T['enumValues'] }\n> {\n\tstatic readonly [entityKind]: string = 'MySqlTextBuilder';\n\n\tconstructor(name: T['name'], textType: MySqlTextColumnType, config: MySqlTextConfig<T['enumValues']>) {\n\t\tsuper(name, 'string', 'MySqlText');\n\t\tthis.config.textType = textType;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlText<T extends ColumnBaseConfig<'string', 'MySqlText'>>\n\textends MySqlColumn<T, { textType: MySqlTextColumnType; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'MySqlText';\n\n\tprivate textType: MySqlTextColumnType = this.config.textType;\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.textType;\n\t}\n}\n\nexport interface MySqlTextConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tenum?: TEnum;\n}\n\nexport function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlTextConfig<T | Writable<T>> = {},\n): MySqlTextBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlTextBuilder(name, 'text', config);\n}\n\nexport function tinytext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlTextConfig<T | Writable<T>> = {},\n): MySqlTextBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlTextBuilder(name, 'tinytext', config);\n}\n\nexport function mediumtext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlTextConfig<T | Writable<T>> = {},\n): MySqlTextBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlTextBuilder(name, 'mediumtext', config);\n}\n\nexport function longtext<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlTextConfig<T | Writable<T>> = {},\n): MySqlTextBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlTextBuilder(name, 'longtext', config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlTimeBuilderInitial<TName extends string> = MySqlTimeBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlTime';\n\tdata: string;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlTimeBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlTime'>> extends MySqlColumnBuilder<\n\tT,\n\tTimeConfig\n> {\n\tstatic readonly [entityKind]: string = 'MySqlTimeBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tconfig: TimeConfig | undefined,\n\t) {\n\t\tsuper(name, 'string', 'MySqlTime');\n\t\tthis.config.fsp = config?.fsp;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlTime<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlTime<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlTime<\n\tT extends ColumnBaseConfig<'string', 'MySqlTime'>,\n> extends MySqlColumn<T, TimeConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlTime';\n\n\treadonly fsp: number | undefined = this.config.fsp;\n\n\tgetSQLType(): string {\n\t\tconst precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n\t\treturn `time${precision}`;\n\t}\n}\n\nexport type TimeConfig = {\n\tfsp?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n};\n\nexport function time<TName extends string>(name: TName, config?: TimeConfig): MySqlTimeBuilderInitial<TName> {\n\treturn new MySqlTimeBuilder(name, config);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderExtraConfig,\n\tColumnDataType,\n\tHasDefault,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport interface MySqlDateColumnBaseConfig {\n\thasOnUpdateNow: boolean;\n}\n\nexport abstract class MySqlDateColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n\tTExtraConfig extends ColumnBuilderExtraConfig = ColumnBuilderExtraConfig,\n> extends MySqlColumnBuilder<T, TRuntimeConfig & MySqlDateColumnBaseConfig, TExtraConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlDateColumnBuilder';\n\n\tdefaultNow() {\n\t\treturn this.default(sql`(now())`);\n\t}\n\n\t// \"on update now\" also adds an implicit default value to the column - https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html\n\tonUpdateNow(): HasDefault<this> {\n\t\tthis.config.hasOnUpdateNow = true;\n\t\tthis.config.hasDefault = true;\n\t\treturn this as HasDefault<this>;\n\t}\n}\n\nexport abstract class MySqlDateBaseColumn<\n\tT extends ColumnBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends MySqlColumn<T, MySqlDateColumnBaseConfig & TRuntimeConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlDateColumn';\n\n\treadonly hasOnUpdateNow: boolean = this.config.hasOnUpdateNow;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { MySqlDateBaseColumn, MySqlDateColumnBaseBuilder } from './date.common.ts';\n\nexport type MySqlTimestampBuilderInitial<TName extends string> = MySqlTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'MySqlTimestamp';\n\tdata: Date;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'MySqlTimestamp'>>\n\textends MySqlDateColumnBaseBuilder<T, MySqlTimestampConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTimestampBuilder';\n\n\tconstructor(name: T['name'], config: MySqlTimestampConfig | undefined) {\n\t\tsuper(name, 'date', 'MySqlTimestamp');\n\t\tthis.config.fsp = config?.fsp;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlTimestamp<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlTimestamp<T extends ColumnBaseConfig<'date', 'MySqlTimestamp'>>\n\textends MySqlDateBaseColumn<T, MySqlTimestampConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTimestamp';\n\n\treadonly fsp: number | undefined = this.config.fsp;\n\n\tgetSQLType(): string {\n\t\tconst precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n\t\treturn `timestamp${precision}`;\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value + '+0000');\n\t}\n\n\toverride mapToDriverValue(value: Date): string {\n\t\treturn value.toISOString().slice(0, -1).replace('T', ' ');\n\t}\n}\n\nexport type MySqlTimestampStringBuilderInitial<TName extends string> = MySqlTimestampStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlTimestampString';\n\tdata: string;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlTimestampString'>>\n\textends MySqlDateColumnBaseBuilder<T, MySqlTimestampConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTimestampStringBuilder';\n\n\tconstructor(name: T['name'], config: MySqlTimestampConfig | undefined) {\n\t\tsuper(name, 'string', 'MySqlTimestampString');\n\t\tthis.config.fsp = config?.fsp;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlTimestampString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlTimestampString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlTimestampString<T extends ColumnBaseConfig<'string', 'MySqlTimestampString'>>\n\textends MySqlDateBaseColumn<T, MySqlTimestampConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTimestampString';\n\n\treadonly fsp: number | undefined = this.config.fsp;\n\n\tgetSQLType(): string {\n\t\tconst precision = this.fsp === undefined ? '' : `(${this.fsp})`;\n\t\treturn `timestamp${precision}`;\n\t}\n}\n\nexport type TimestampFsp = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface MySqlTimestampConfig<TMode extends 'string' | 'date' = 'string' | 'date'> {\n\tmode?: TMode;\n\tfsp?: TimestampFsp;\n}\n\nexport function timestamp<TName extends string, TMode extends MySqlTimestampConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: MySqlTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? MySqlTimestampStringBuilderInitial<TName>\n\t: MySqlTimestampBuilderInitial<TName>;\nexport function timestamp(name: string, config: MySqlTimestampConfig = {}) {\n\tif (config.mode === 'string') {\n\t\treturn new MySqlTimestampStringBuilder(name, config);\n\t}\n\treturn new MySqlTimestampBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumnBuilderWithAutoIncrement, MySqlColumnWithAutoIncrement } from './common.ts';\nimport type { MySqlIntConfig } from './int.ts';\n\nexport type MySqlTinyIntBuilderInitial<TName extends string> = MySqlTinyIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlTinyInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlTinyIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlTinyInt'>>\n\textends MySqlColumnBuilderWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTinyIntBuilder';\n\n\tconstructor(name: T['name'], config?: MySqlIntConfig) {\n\t\tsuper(name, 'number', 'MySqlTinyInt');\n\t\tthis.config.unsigned = config ? config.unsigned : false;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlTinyInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlTinyInt<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlTinyInt<T extends ColumnBaseConfig<'number', 'MySqlTinyInt'>>\n\textends MySqlColumnWithAutoIncrement<T, MySqlIntConfig>\n{\n\tstatic readonly [entityKind]: string = 'MySqlTinyInt';\n\n\tgetSQLType(): string {\n\t\treturn `tinyint${this.config.unsigned ? ' unsigned' : ''}`;\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function tinyint<TName extends string>(name: TName, config?: MySqlIntConfig): MySqlTinyIntBuilderInitial<TName> {\n\treturn new MySqlTinyIntBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlVarBinaryBuilderInitial<TName extends string> = MySqlVarBinaryBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'MySqlVarBinary';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlVarBinaryBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlVarBinary'>>\n\textends MySqlColumnBuilder<T, MySqlVarbinaryOptions>\n{\n\tstatic readonly [entityKind]: string = 'MySqlVarBinaryBuilder';\n\n\t/** @internal */\n\tconstructor(name: T['name'], config: MySqlVarbinaryOptions) {\n\t\tsuper(name, 'string', 'MySqlVarBinary');\n\t\tthis.config.length = config?.length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlVarBinary<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlVarBinary<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlVarBinary<\n\tT extends ColumnBaseConfig<'string', 'MySqlVarBinary'>,\n> extends MySqlColumn<T, MySqlVarbinaryOptions> {\n\tstatic readonly [entityKind]: string = 'MySqlVarBinary';\n\n\tlength: number | undefined = this.config.length;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `varbinary` : `varbinary(${this.length})`;\n\t}\n}\n\nexport interface MySqlVarbinaryOptions {\n\tlength: number;\n}\n\nexport function varbinary<TName extends string>(\n\tname: TName,\n\toptions: MySqlVarbinaryOptions,\n): MySqlVarBinaryBuilderInitial<TName> {\n\treturn new MySqlVarBinaryBuilder(name, options);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlVarCharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = MySqlVarCharBuilder<\n\t{\n\t\tname: TName;\n\t\tdataType: 'string';\n\t\tcolumnType: 'MySqlVarChar';\n\t\tdata: TEnum[number];\n\t\tdriverParam: number | string;\n\t\tenumValues: TEnum;\n\t\tgenerated: undefined;\n\t}\n>;\n\nexport class MySqlVarCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'MySqlVarChar'>>\n\textends MySqlColumnBuilder<T, MySqlVarCharConfig<T['enumValues']>>\n{\n\tstatic readonly [entityKind]: string = 'MySqlVarCharBuilder';\n\n\t/** @internal */\n\tconstructor(name: T['name'], config: MySqlVarCharConfig<T['enumValues']>) {\n\t\tsuper(name, 'string', 'MySqlVarChar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enum = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlVarChar<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }> {\n\t\treturn new MySqlVarChar<MakeColumnConfig<T, TTableName> & { enumValues: T['enumValues'] }>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class MySqlVarChar<T extends ColumnBaseConfig<'string', 'MySqlVarChar'>>\n\textends MySqlColumn<T, MySqlVarCharConfig<T['enumValues']>>\n{\n\tstatic readonly [entityKind]: string = 'MySqlVarChar';\n\n\treadonly length: number | undefined = this.config.length;\n\n\toverride readonly enumValues = this.config.enum;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `varchar` : `varchar(${this.length})`;\n\t}\n}\n\nexport interface MySqlVarCharConfig<TEnum extends string[] | readonly string[] | undefined> {\n\tlength: number;\n\tenum?: TEnum;\n}\n\nexport function varchar<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: MySqlVarCharConfig<T | Writable<T>>,\n): MySqlVarCharBuilderInitial<TName, Writable<T>> {\n\treturn new MySqlVarCharBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyMySqlTable } from '~/mysql-core/table.ts';\nimport { MySqlColumn, MySqlColumnBuilder } from './common.ts';\n\nexport type MySqlYearBuilderInitial<TName extends string> = MySqlYearBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'MySqlYear';\n\tdata: number;\n\tdriverParam: number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class MySqlYearBuilder<T extends ColumnBuilderBaseConfig<'number', 'MySqlYear'>> extends MySqlColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'MySqlYearBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'MySqlYear');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyMySqlTable<{ name: TTableName }>,\n\t): MySqlYear<MakeColumnConfig<T, TTableName>> {\n\t\treturn new MySqlYear<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class MySqlYear<\n\tT extends ColumnBaseConfig<'number', 'MySqlYear'>,\n> extends MySqlColumn<T> {\n\tstatic readonly [entityKind]: string = 'MySqlYear';\n\n\tgetSQLType(): string {\n\t\treturn `year`;\n\t}\n}\n\nexport function year<TName extends string>(name: TName): MySqlYearBuilderInitial<TName> {\n\treturn new MySqlYearBuilder(name);\n}\n", "export * from './bigint.ts';\nexport * from './binary.ts';\nexport * from './boolean.ts';\nexport * from './char.ts';\nexport * from './common.ts';\nexport * from './custom.ts';\nexport * from './date.ts';\nexport * from './datetime.ts';\nexport * from './decimal.ts';\nexport * from './double.ts';\nexport * from './enum.ts';\nexport * from './float.ts';\nexport * from './int.ts';\nexport * from './json.ts';\nexport * from './mediumint.ts';\nexport * from './real.ts';\nexport * from './serial.ts';\nexport * from './smallint.ts';\nexport * from './text.ts';\nexport * from './time.ts';\nexport * from './timestamp.ts';\nexport * from './tinyint.ts';\nexport * from './varbinary.ts';\nexport * from './varchar.ts';\nexport * from './year.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { MySqlDialect } from '~/mysql-core/dialect.ts';\nimport type {\n\tAnyMySqlQueryResultHKT,\n\tMySqlPreparedQueryConfig,\n\tMySqlQueryResultHKT,\n\tMySqlQueryResultKind,\n\tMySqlSession,\n\tPreparedQueryHKTBase,\n\tPreparedQueryKind,\n} from '~/mysql-core/session.ts';\nimport type { MySqlTable } from '~/mysql-core/table.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport type { SelectedFieldsOrdered } from './select.types.ts';\n\nexport type MySqlDeleteWithout<\n\tT extends AnyMySqlDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tMySqlDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['queryResult'],\n\t\t\tT['_']['preparedQueryHKT'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type MySqlDelete<\n\tTTable extends MySqlTable = MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT = AnyMySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n> = MySqlDeleteBase<TTable, TQueryResult, TPreparedQueryHKT, true, never>;\n\nexport interface MySqlDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: MySqlTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type MySqlDeletePrepare<T extends AnyMySqlDeleteBase> = PreparedQueryKind<\n\tT['_']['preparedQueryHKT'],\n\tMySqlPreparedQueryConfig & {\n\t\texecute: MySqlQueryResultKind<T['_']['queryResult'], never>;\n\t\titerator: never;\n\t},\n\ttrue\n>;\n\ntype MySqlDeleteDynamic<T extends AnyMySqlDeleteBase> = MySqlDelete<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['preparedQueryHKT']\n>;\n\ntype AnyMySqlDeleteBase = MySqlDeleteBase<any, any, any, any, any>;\n\nexport interface MySqlDeleteBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<MySqlQueryResultKind<TQueryResult, never>> {\n\treadonly _: {\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly preparedQueryHKT: TPreparedQueryHKT;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t};\n}\n\nexport class MySqlDeleteBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<MySqlQueryResultKind<TQueryResult, never>> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'MySqlDelete';\n\n\tprivate config: MySqlDeleteConfig;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: MySqlSession,\n\t\tprivate dialect: MySqlDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): MySqlDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(): MySqlDeletePrepare<this> {\n\t\treturn this.session.prepareQuery(\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t) as MySqlDeletePrepare<this>;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this.prepare().execute(placeholderValues);\n\t};\n\n\tprivate createIterator = (): ReturnType<this['prepare']>['iterator'] => {\n\t\tconst self = this;\n\t\treturn async function*(placeholderValues) {\n\t\t\tyield* self.prepare().iterator(placeholderValues);\n\t\t};\n\t};\n\n\titerator = this.createIterator();\n\n\t$dynamic(): MySqlDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { MySqlDialect } from '~/mysql-core/dialect.ts';\nimport type {\n\tAnyMySqlQueryResultHKT,\n\tMySqlPreparedQueryConfig,\n\tMySqlQueryResultHKT,\n\tMySqlQueryResultKind,\n\tMySqlSession,\n\tPreparedQueryHKTBase,\n\tPreparedQueryKind,\n} from '~/mysql-core/session.ts';\nimport type { MySqlTable } from '~/mysql-core/table.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { InferModelFromColumns } from '~/table.ts';\nimport { Table } from '~/table.ts';\nimport { mapUpdateSet, orderSelectedFields } from '~/utils.ts';\nimport type { AnyMySqlColumn, MySqlColumn } from '../columns/common.ts';\nimport type { SelectedFieldsOrdered } from './select.types.ts';\nimport type { MySqlUpdateSetSource } from './update.ts';\n\nexport interface MySqlInsertConfig<TTable extends MySqlTable = MySqlTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[];\n\tignore: boolean;\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type AnyMySqlInsertConfig = MySqlInsertConfig<MySqlTable>;\n\nexport type MySqlInsertValue<TTable extends MySqlTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n\t& {};\n\nexport class MySqlInsertBuilder<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n> {\n\tstatic readonly [entityKind]: string = 'MySqlInsertBuilder';\n\n\tprivate shouldIgnore = false;\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: MySqlSession,\n\t\tprivate dialect: MySqlDialect,\n\t) {}\n\n\tignore(): this {\n\t\tthis.shouldIgnore = true;\n\t\treturn this;\n\t}\n\n\tvalues(value: MySqlInsertValue<TTable>): MySqlInsertBase<TTable, TQueryResult, TPreparedQueryHKT>;\n\tvalues(values: MySqlInsertValue<TTable>[]): MySqlInsertBase<TTable, TQueryResult, TPreparedQueryHKT>;\n\tvalues(\n\t\tvalues: MySqlInsertValue<TTable> | MySqlInsertValue<TTable>[],\n\t): MySqlInsertBase<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\treturn new MySqlInsertBase(this.table, mappedValues, this.shouldIgnore, this.session, this.dialect);\n\t}\n}\n\nexport type MySqlInsertWithout<T extends AnyMySqlInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tMySqlInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['queryResult'],\n\t\t\t\tT['_']['preparedQueryHKT'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | '$returning'\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type MySqlInsertDynamic<T extends AnyMySqlInsert> = MySqlInsert<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['preparedQueryHKT'],\n\tT['_']['returning']\n>;\n\nexport type MySqlInsertPrepare<\n\tT extends AnyMySqlInsert,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n> = PreparedQueryKind<\n\tT['_']['preparedQueryHKT'],\n\tMySqlPreparedQueryConfig & {\n\t\texecute: TReturning extends undefined ? MySqlQueryResultKind<T['_']['queryResult'], never> : TReturning[];\n\t\titerator: never;\n\t},\n\ttrue\n>;\n\nexport type MySqlInsertOnDuplicateKeyUpdateConfig<T extends AnyMySqlInsert> = {\n\tset: MySqlUpdateSetSource<T['_']['table']>;\n};\n\nexport type MySqlInsert<\n\tTTable extends MySqlTable = MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT = AnyMySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = MySqlInsertBase<TTable, TQueryResult, TPreparedQueryHKT, TReturning, true, never>;\n\nexport type MySqlInsertReturning<\n\tT extends AnyMySqlInsert,\n\tTDynamic extends boolean,\n> = MySqlInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['preparedQueryHKT'],\n\tInferModelFromColumns<GetPrimarySerialOrDefaultKeys<T['_']['table']['_']['columns']>>,\n\tTDynamic,\n\tT['_']['excludedMethods'] | '$returning'\n>;\n\nexport type AnyMySqlInsert = MySqlInsertBase<any, any, any, any, any, any>;\n\nexport interface MySqlInsertBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? MySqlQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? MySqlQueryResultKind<TQueryResult, never> : TReturning[], 'mysql'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'mysql';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly preparedQueryHKT: TPreparedQueryHKT;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly returning: TReturning;\n\t\treadonly result: TReturning extends undefined ? MySqlQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport type PrimaryKeyKeys<T extends Record<string, AnyMySqlColumn>> = {\n\t[K in keyof T]: T[K]['_']['isPrimaryKey'] extends true ? T[K]['_']['isAutoincrement'] extends true ? K\n\t\t: T[K]['_']['hasRuntimeDefault'] extends true ? T[K]['_']['isPrimaryKey'] extends true ? K : never\n\t\t: never\n\t\t: T[K]['_']['hasRuntimeDefault'] extends true ? T[K]['_']['isPrimaryKey'] extends true ? K : never\n\t\t: never;\n}[keyof T];\n\nexport type GetPrimarySerialOrDefaultKeys<T extends Record<string, AnyMySqlColumn>> = {\n\t[K in PrimaryKeyKeys<T>]: T[K];\n};\n\nexport class MySqlInsertBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? MySqlQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? MySqlQueryResultKind<TQueryResult, never> : TReturning[], 'mysql'>,\n\t\tSQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'MySqlInsert';\n\n\tdeclare protected $table: TTable;\n\n\tprivate config: MySqlInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: MySqlInsertConfig['values'],\n\t\tignore: boolean,\n\t\tprivate session: MySqlSession,\n\t\tprivate dialect: MySqlDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values, ignore };\n\t}\n\n\t/**\n\t * Adds an `on duplicate key update` clause to the query.\n\t *\n\t * Calling this method will update update the row if any unique index conflicts. MySQL will automatically determine the conflict target based on the primary key and unique indexes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-duplicate-key-update}\n\t *\n\t * @param config The `set` clause\n\t *\n\t * @example\n\t * ```ts\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW'})\n\t *   .onDuplicateKeyUpdate({ set: { brand: 'Porsche' }});\n\t * ```\n\t *\n\t * While MySQL does not directly support doing nothing on conflict, you can perform a no-op by setting any column's value to itself and achieve the same effect:\n\t *\n\t * ```ts\n\t * import { sql } from 'drizzle-orm';\n\t *\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onDuplicateKeyUpdate({ set: { id: sql`id` } });\n\t * ```\n\t */\n\tonDuplicateKeyUpdate(\n\t\tconfig: MySqlInsertOnDuplicateKeyUpdateConfig<this>,\n\t): MySqlInsertWithout<this, TDynamic, 'onDuplicateKeyUpdate'> {\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tthis.config.onConflict = sql`update ${setSql}`;\n\t\treturn this as any;\n\t}\n\n\t$returningId(): MySqlInsertWithout<\n\t\tMySqlInsertReturning<this, TDynamic>,\n\t\tTDynamic,\n\t\t'$returningId'\n\t> {\n\t\tconst returning: SelectedFieldsOrdered = [];\n\t\tfor (const [key, value] of Object.entries(this.config.table[Table.Symbol.Columns])) {\n\t\t\tif (value.primary) {\n\t\t\t\treturning.push({ field: value, path: [key] });\n\t\t\t}\n\t\t}\n\t\tthis.config.returning = orderSelectedFields<MySqlColumn>(this.config.table[Table.Symbol.Columns]);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config).sql;\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(): MySqlInsertPrepare<this, TReturning> {\n\t\tconst { sql, generatedIds } = this.dialect.buildInsertQuery(this.config);\n\t\treturn this.session.prepareQuery(\n\t\t\tthis.dialect.sqlToQuery(sql),\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tgeneratedIds,\n\t\t\tthis.config.returning,\n\t\t) as MySqlInsertPrepare<this, TReturning>;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this.prepare().execute(placeholderValues);\n\t};\n\n\tprivate createIterator = (): ReturnType<this['prepare']>['iterator'] => {\n\t\tconst self = this;\n\t\treturn async function*(placeholderValues) {\n\t\t\tyield* self.prepare().iterator(placeholderValues);\n\t\t};\n\t};\n\n\titerator = this.createIterator();\n\n\t$dynamic(): MySqlInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { View } from '~/sql/sql.ts';\n\nexport abstract class MySqlViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelectedFields> {\n\tstatic readonly [entityKind]: string = 'MySqlViewBase';\n\n\tdeclare readonly _: View<TName, TExisting, TSelectedFields>['_'] & {\n\t\treadonly viewBrand: 'MySqlViewBase';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport { and, eq } from '~/expressions.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { Param, SQL, sql, View } from '~/sql/sql.ts';\nimport type { Name, QueryWithTypings, SQLChunk } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { MySqlColumn } from './columns/common.ts';\nimport type { MySqlDeleteConfig } from './query-builders/delete.ts';\nimport type { MySqlInsertConfig } from './query-builders/insert.ts';\nimport type { MySqlSelectConfig, MySqlSelectJoinConfig, SelectedFieldsOrdered } from './query-builders/select.types.ts';\nimport type { MySqlUpdateConfig } from './query-builders/update.ts';\nimport type { MySqlSession } from './session.ts';\nimport { MySqlTable } from './table.ts';\nimport { MySqlViewBase } from './view-base.ts';\n\nexport class MySqlDialect {\n\tstatic readonly [entityKind]: string = 'MySqlDialect';\n\n\tasync migrate(\n\t\tmigrations: MigrationMeta[],\n\t\tsession: MySqlSession,\n\t\tconfig: Omit<MigrationConfig, 'migrationsSchema'>,\n\t): Promise<void> {\n\t\tconst migrationsTable = config.migrationsTable ?? '__drizzle_migrations';\n\t\tconst migrationTableCreate = sql`\n\t\t\tcreate table if not exists ${sql.identifier(migrationsTable)} (\n\t\t\t\tid serial primary key,\n\t\t\t\thash text not null,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n\t\tawait session.execute(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.all<{ id: number; hash: string; created_at: string }>(\n\t\t\tsql`select id, hash, created_at from ${sql.identifier(migrationsTable)} order by created_at desc limit 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0];\n\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor (const migration of migrations) {\n\t\t\t\tif (\n\t\t\t\t\t!lastDbMigration\n\t\t\t\t\t|| Number(lastDbMigration.created_at) < migration.folderMillis\n\t\t\t\t) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.execute(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.execute(\n\t\t\t\t\t\tsql`insert into ${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\\`hash\\`, \\`created_at\\`) values(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\\`${name}\\``;\n\t}\n\n\tescapeParam(_num: number): string {\n\t\treturn `?`;\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList }: MySqlDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: MySqlTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(col.name)} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList }: MySqlUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, MySqlColumn)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(c.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(field.name));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tlockingClause,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: MySqlSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<MySqlColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, MySqlViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst distinctSql = distinct ? sql` distinct` : undefined;\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = (() => {\n\t\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\t\treturn sql`${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t\t}\n\n\t\t\treturn table;\n\t\t})();\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\t\t\t\tconst lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n\n\t\t\t\tif (is(table, MySqlTable)) {\n\t\t\t\t\tconst tableName = table[MySqlTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[MySqlTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[MySqlTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\t\ttableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined\n\t\t\t\t\t\t}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else if (is(table, View)) {\n\t\t\t\t\tconst viewName = table[ViewBaseConfig].name;\n\t\t\t\t\tconst viewSchema = table[ViewBaseConfig].schema;\n\t\t\t\t\tconst origViewName = table[ViewBaseConfig].originalName;\n\t\t\t\t\tconst alias = viewName === origViewName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\t\tviewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined\n\t\t\t\t\t\t}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst joinsSql = sql.join(joinsArray);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\torderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n\t\t}\n\n\t\tlet groupBySql;\n\t\tif (groupBy && groupBy.length > 0) {\n\t\t\tgroupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tlet lockingClausesSql;\n\t\tif (lockingClause) {\n\t\t\tconst { config, strength } = lockingClause;\n\t\t\tlockingClausesSql = sql` for ${sql.raw(strength)}`;\n\t\t\tif (config.noWait) {\n\t\t\t\tlockingClausesSql.append(sql` no wait`);\n\t\t\t} else if (config.skipLocked) {\n\t\t\t\tlockingClausesSql.append(sql` skip locked`);\n\t\t\t}\n\t\t}\n\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClausesSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: MySqlSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: MySqlSelectConfig['setOperators'][number] }): SQL {\n\t\tconst leftChunk = sql`(${leftSelect.getSQL()}) `;\n\t\tconst rightChunk = sql`(${rightSelect.getSQL()})`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid MySql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const orderByUnit of orderBy) {\n\t\t\t\tif (is(orderByUnit, MySqlColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(orderByUnit.name));\n\t\t\t\t} else if (is(orderByUnit, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < orderByUnit.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = orderByUnit.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, MySqlColumn)) {\n\t\t\t\t\t\t\torderByUnit.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${orderByUnit}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${orderByUnit}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery(\n\t\t{ table, values, ignore, onConflict }: MySqlInsertConfig,\n\t): { sql: SQL; generatedIds: Record<string, unknown>[] } {\n\t\t// const isSingleValue = values.length === 1;\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, MySqlColumn> = table[Table.Symbol.Columns];\n\t\tconst colEntries: [string, MySqlColumn][] = Object.entries(columns).filter(([_, col]) =>\n\t\t\t!col.shouldDisableInsert()\n\t\t);\n\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));\n\t\tconst generatedIdsResponse: Record<string, unknown>[] = [];\n\n\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\tconst generatedIds: Record<string, unknown> = {};\n\n\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\tif (col.defaultFn !== undefined) {\n\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\tgeneratedIds[fieldName] = defaultFnResult;\n\t\t\t\t\t\tconst defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\tconst newValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\tvalueList.push(newValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(sql`default`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (col.defaultFn && is(colValue, Param)) {\n\t\t\t\t\t\tgeneratedIds[fieldName] = colValue.value;\n\t\t\t\t\t}\n\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeneratedIdsResponse.push(generatedIds);\n\t\t\tvaluesSqlList.push(valueList);\n\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t}\n\t\t}\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst ignoreSql = ignore ? sql` ignore` : undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on duplicate key ${onConflict}` : undefined;\n\n\t\treturn {\n\t\t\tsql: sql`insert${ignoreSql} into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}`,\n\t\t\tgeneratedIds: generatedIdsResponse,\n\t\t};\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\tbuildRelationalQuery({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: MySqlTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<MySqlTable, MySqlColumn> {\n\t\tlet selection: BuildRelationalQueryResult<MySqlTable, MySqlColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: MySqlSelectConfig['orderBy'], where;\n\t\tconst joins: MySqlSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as MySqlColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: MySqlColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as MySqlColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as MySqlColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQuery({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as MySqlTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t\t\t\tjoins.push({\n\t\t\t\t\ton: sql`true`,\n\t\t\t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t\t\t\t\talias: relationTableAlias,\n\t\t\t\t\tjoinType: 'left',\n\t\t\t\t\tlateral: true,\n\t\t\t\t});\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({ message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")` });\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field, tsKey, isJson }) =>\n\t\t\t\t\t\tisJson\n\t\t\t\t\t\t\t? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier('data')}`\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_arrayagg(${field}), json_array())`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || (orderBy?.length ?? 0) > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(((orderBy?.length ?? 0) > 0)\n\t\t\t\t\t\t\t? [{\n\t\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\t\tfield: sql`row_number() over (order by ${sql.join(orderBy!, sql`, `)})`,\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, MySqlTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n\n\tbuildRelationalQueryWithoutLateralSubqueries({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: MySqlTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<MySqlTable, MySqlColumn> {\n\t\tlet selection: BuildRelationalQueryResult<MySqlTable, MySqlColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: MySqlSelectConfig['orderBy'] = [], where;\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as MySqlColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: MySqlColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as MySqlColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as MySqlColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQueryWithoutLateralSubqueries({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as MySqlTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tlet fieldSql = sql`(${builtRelation.sql})`;\n\t\t\t\tif (is(relation, Many)) {\n\t\t\t\t\tfieldSql = sql`coalesce(${fieldSql}, json_array())`;\n\t\t\t\t}\n\t\t\t\tconst field = fieldSql.as(selectedRelationTsKey);\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({\n\t\t\t\tmessage:\n\t\t\t\t\t`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\"). You need to have at least one item in \"columns\", \"with\" or \"extras\". If you need to select all columns, omit the \"columns\" key or set it to undefined.`,\n\t\t\t});\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field }) =>\n\t\t\t\t\t\tis(field, MySqlColumn) ? sql.identifier(field.name) : is(field, SQL.Aliased) ? field.sql : field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`json_arrayagg(${field})`;\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield,\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(orderBy.length > 0)\n\t\t\t\t\t\t\t? [{\n\t\t\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\t\t\tfield: sql`row_number() over (order by ${sql.join(orderBy, sql`, `)})`,\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t: [],\n\t\t\t\t\t],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = undefined;\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, MySqlTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { MySqlColumn } from '~/mysql-core/columns/index.ts';\nimport type { MySqlDialect } from '~/mysql-core/dialect.ts';\nimport type { MySqlPreparedQueryConfig, MySqlSession, PreparedQueryHKTBase } from '~/mysql-core/session.ts';\nimport type { SubqueryWithSelection } from '~/mysql-core/subquery.ts';\nimport type { MySqlTable } from '~/mysql-core/table.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, Query } from '~/sql/sql.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { applyMixins, getTableColumns, getTableLikeName, haveSameKeys, type ValueOrArray } from '~/utils.ts';\nimport { orderSelectedFields } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { MySqlViewBase } from '../view-base.ts';\nimport type {\n\tAnyMySqlSelect,\n\tCreateMySqlSelectFromBuilderMode,\n\tGetMySqlSetOperators,\n\tLockConfig,\n\tLockStrength,\n\tMySqlCreateSetOperatorFn,\n\tMySqlJoinFn,\n\tMySqlSelectConfig,\n\tMySqlSelectDynamic,\n\tMySqlSelectHKT,\n\tMySqlSelectHKTBase,\n\tMySqlSelectPrepare,\n\tMySqlSelectWithout,\n\tMySqlSetOperatorExcludedMethods,\n\tMySqlSetOperatorWithResult,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n} from './select.types.ts';\n\nexport class MySqlSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'MySqlSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: MySqlSession | undefined;\n\tprivate dialect: MySqlDialect;\n\tprivate withList: Subquery[] = [];\n\tprivate distinct: boolean | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: MySqlSession | undefined;\n\t\t\tdialect: MySqlDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean;\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tif (config.withList) {\n\t\t\tthis.withList = config.withList;\n\t\t}\n\t\tthis.distinct = config.distinct;\n\t}\n\n\tfrom<TFrom extends MySqlTable | Subquery | MySqlViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreateMySqlSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial',\n\t\tTPreparedQueryHKT\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, MySqlViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<MySqlTable>(source);\n\t\t}\n\n\t\treturn new MySqlSelectBase(\n\t\t\t{\n\t\t\t\ttable: source,\n\t\t\t\tfields,\n\t\t\t\tisPartialSelect,\n\t\t\t\tsession: this.session,\n\t\t\t\tdialect: this.dialect,\n\t\t\t\twithList: this.withList,\n\t\t\t\tdistinct: this.distinct,\n\t\t\t},\n\t\t) as any;\n\t}\n}\n\nexport abstract class MySqlSelectQueryBuilderBase<\n\tTHKT extends MySqlSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic readonly [entityKind]: string = 'MySqlSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly preparedQueryHKT: TPreparedQueryHKT;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\tprotected config: MySqlSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\t/** @internal */\n\treadonly session: MySqlSession | undefined;\n\tprotected dialect: MySqlDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: MySqlSelectConfig['table'];\n\t\t\tfields: MySqlSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: MySqlSession | undefined;\n\t\t\tdialect: MySqlDialect;\n\t\t\twithList: Subquery[];\n\t\t\tdistinct: boolean | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): MySqlJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: MySqlTable | Subquery | MySqlViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends MySqlSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetMySqlSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => MySqlSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tMySqlSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getMySqlSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/mysql-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/mysql-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/mysql-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `intersect all` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products and quantities that are ordered by both regular and VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .intersectAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { intersectAll } from 'drizzle-orm/mysql-core'\n\t *\n\t * await intersectAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\tintersectAll = this.createSetOperator('intersect', true);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/mysql-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/**\n\t * Adds `except all` set operator to the query.\n\t *\n\t * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products that are ordered by regular customers but not by VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .exceptAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { exceptAll } from 'drizzle-orm/mysql-core'\n\t *\n\t * await exceptAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\texceptAll = this.createSetOperator('except', true);\n\n\t/** @internal */\n\taddSetOperators(setOperators: MySqlSelectConfig['setOperators']): MySqlSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tMySqlSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): MySqlSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): MySqlSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<MySqlColumn | SQL | SQL.Aliased>,\n\t): MySqlSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (MySqlColumn | SQL | SQL.Aliased)[]): MySqlSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<MySqlColumn | SQL | SQL.Aliased>]\n\t\t\t| (MySqlColumn | SQL | SQL.Aliased)[]\n\t): MySqlSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (MySqlColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<MySqlColumn | SQL | SQL.Aliased>,\n\t): MySqlSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (MySqlColumn | SQL | SQL.Aliased)[]): MySqlSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<MySqlColumn | SQL | SQL.Aliased>]\n\t\t\t| (MySqlColumn | SQL | SQL.Aliased)[]\n\t): MySqlSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (MySqlColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number): MySqlSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number): MySqlSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `for` clause to the query.\n\t *\n\t * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.\n\t *\n\t * See docs: {@link https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html}\n\t *\n\t * @param strength the lock strength.\n\t * @param config the lock configuration.\n\t */\n\tfor(strength: LockStrength, config: LockConfig = {}): MySqlSelectWithout<this, TDynamic, 'for'> {\n\t\tthis.config.lockingClause = { strength, config };\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): MySqlSelectDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n\nexport interface MySqlSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tMySqlSelectQueryBuilderBase<\n\t\tMySqlSelectHKT,\n\t\tTTableName,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTPreparedQueryHKT,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>\n{}\n\nexport class MySqlSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection,\n\tTSelectMode extends SelectMode,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends MySqlSelectQueryBuilderBase<\n\tMySqlSelectHKT,\n\tTTableName,\n\tTSelection,\n\tTSelectMode,\n\tTPreparedQueryHKT,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> {\n\tstatic readonly [entityKind]: string = 'MySqlSelect';\n\n\tprepare(): MySqlSelectPrepare<this> {\n\t\tif (!this.session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\tconst fieldsList = orderSelectedFields<MySqlColumn>(this.config.fields);\n\t\tconst query = this.session.prepareQuery<\n\t\t\tMySqlPreparedQueryConfig & { execute: SelectResult<TSelection, TSelectMode, TNullabilityMap>[] },\n\t\t\tTPreparedQueryHKT\n\t\t>(this.dialect.sqlToQuery(this.getSQL()), fieldsList);\n\t\tquery.joinsNotNullableMap = this.joinsNotNullableMap;\n\t\treturn query as MySqlSelectPrepare<this>;\n\t}\n\n\texecute = ((placeholderValues) => {\n\t\treturn this.prepare().execute(placeholderValues);\n\t}) as ReturnType<this['prepare']>['execute'];\n\n\tprivate createIterator = (): ReturnType<this['prepare']>['iterator'] => {\n\t\tconst self = this;\n\t\treturn async function*(placeholderValues) {\n\t\t\tyield* self.prepare().iterator(placeholderValues);\n\t\t};\n\t};\n\n\titerator = this.createIterator();\n}\n\napplyMixins(MySqlSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): MySqlCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnyMySqlSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnyMySqlSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getMySqlSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\tintersectAll,\n\texcept,\n\texceptAll,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/mysql-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/mysql-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/mysql-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `intersect all` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n *\n * @example\n *\n * ```ts\n * // Select all products and quantities that are ordered by both regular and VIP customers\n * import { intersectAll } from 'drizzle-orm/mysql-core'\n *\n * await intersectAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered\n * })\n * .from(regularCustomerOrders)\n * .intersectAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const intersectAll = createSetOperator('intersect', true);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/mysql-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n\n/**\n * Adds `except all` set operator to the query.\n *\n * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n *\n * @example\n *\n * ```ts\n * // Select all products that are ordered by regular customers but not by VIP customers\n * import { exceptAll } from 'drizzle-orm/mysql-core'\n *\n * await exceptAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n * })\n * .from(regularCustomerOrders)\n * .exceptAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const exceptAll = createSetOperator('except', true);\n", "import { entityKind } from '~/entity.ts';\nimport { MySqlDialect } from '~/mysql-core/dialect.ts';\nimport type { WithSubqueryWithSelection } from '~/mysql-core/subquery.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport { MySqlSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlQueryBuilder';\n\n\tprivate dialect: MySqlDialect | undefined;\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): MySqlSelectBuilder<undefined, never, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): MySqlSelectBuilder<TSelection, never, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): MySqlSelectBuilder<TSelection | undefined, never, 'qb'> {\n\t\t\treturn new MySqlSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): MySqlSelectBuilder<undefined, never, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): MySqlSelectBuilder<TSelection, never, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): MySqlSelectBuilder<TSelection | undefined, never, 'qb'> {\n\t\t\treturn new MySqlSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct };\n\t}\n\n\tselect(): MySqlSelectBuilder<undefined, never, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): MySqlSelectBuilder<TSelection, never, 'qb'>;\n\tselect<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): MySqlSelectBuilder<TSelection | undefined, never, 'qb'> {\n\t\treturn new MySqlSelectBuilder({ fields: fields ?? undefined, session: undefined, dialect: this.getDialect() });\n\t}\n\n\tselectDistinct(): MySqlSelectBuilder<undefined, never, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): MySqlSelectBuilder<TSelection, never, 'qb'>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields?: TSelection,\n\t): MySqlSelectBuilder<TSelection | undefined, never, 'qb'> {\n\t\treturn new MySqlSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new MySqlDialect();\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "//# sourceMappingURL=select.types.js.map", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { MySqlDialect } from '~/mysql-core/dialect.ts';\nimport type {\n\tAnyMySqlQueryResultHKT,\n\tMySqlPreparedQueryConfig,\n\tMySqlQueryResultHKT,\n\tMySqlQueryResultKind,\n\tMySqlSession,\n\tPreparedQueryHKTBase,\n\tPreparedQueryKind,\n} from '~/mysql-core/session.ts';\nimport type { MySqlTable } from '~/mysql-core/table.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { mapUpdateSet, type UpdateSet } from '~/utils.ts';\nimport type { SelectedFieldsOrdered } from './select.types.ts';\n\nexport interface MySqlUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: MySqlTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type MySqlUpdateSetSource<TTable extends MySqlTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key], 'query'>\n\t\t\t| SQL;\n\t}\n\t& {};\n\nexport class MySqlUpdateBuilder<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n> {\n\tstatic readonly [entityKind]: string = 'MySqlUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: MySqlSession,\n\t\tprivate dialect: MySqlDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(values: MySqlUpdateSetSource<TTable>): MySqlUpdateBase<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\treturn new MySqlUpdateBase(this.table, mapUpdateSet(this.table, values), this.session, this.dialect, this.withList);\n\t}\n}\n\nexport type MySqlUpdateWithout<\n\tT extends AnyMySqlUpdateBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tMySqlUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['preparedQueryHKT'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type MySqlUpdatePrepare<T extends AnyMySqlUpdateBase> = PreparedQueryKind<\n\tT['_']['preparedQueryHKT'],\n\tMySqlPreparedQueryConfig & {\n\t\texecute: MySqlQueryResultKind<T['_']['queryResult'], never>;\n\t\titerator: never;\n\t},\n\ttrue\n>;\n\nexport type MySqlUpdateDynamic<T extends AnyMySqlUpdateBase> = MySqlUpdate<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['preparedQueryHKT']\n>;\n\nexport type MySqlUpdate<\n\tTTable extends MySqlTable = MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT = AnyMySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n> = MySqlUpdateBase<TTable, TQueryResult, TPreparedQueryHKT, true, never>;\n\nexport type AnyMySqlUpdateBase = MySqlUpdateBase<any, any, any, any, any>;\n\nexport interface MySqlUpdateBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<MySqlQueryResultKind<TQueryResult, never>>, SQLWrapper {\n\treadonly _: {\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly preparedQueryHKT: TPreparedQueryHKT;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t};\n}\n\nexport class MySqlUpdateBase<\n\tTTable extends MySqlTable,\n\tTQueryResult extends MySqlQueryResultHKT,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<MySqlQueryResultKind<TQueryResult, never>> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'MySqlUpdate';\n\n\tprivate config: MySqlUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: MySqlSession,\n\t\tprivate dialect: MySqlDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList };\n\t}\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): MySqlUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tprepare(): MySqlUpdatePrepare<this> {\n\t\treturn this.session.prepareQuery(\n\t\t\tthis.dialect.sqlToQuery(this.getSQL()),\n\t\t\tthis.config.returning,\n\t\t) as MySqlUpdatePrepare<this>;\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this.prepare().execute(placeholderValues);\n\t};\n\n\tprivate createIterator = (): ReturnType<this['prepare']>['iterator'] => {\n\t\tconst self = this;\n\t\treturn async function*(placeholderValues) {\n\t\t\tyield* self.prepare().iterator(placeholderValues);\n\t\t};\n\t};\n\n\titerator = this.createIterator();\n\n\t$dynamic(): MySqlUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "export * from './delete.ts';\nexport * from './insert.ts';\nexport * from './query-builder.ts';\nexport * from './select.ts';\nexport * from './select.types.ts';\nexport * from './update.ts';\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { Query, QueryWithTypings, SQL } from '~/sql/sql.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { MySqlDialect } from '../dialect.ts';\nimport type {\n\tMode,\n\tMySqlPreparedQueryConfig,\n\tMySqlSession,\n\tPreparedQueryHKTBase,\n\tPreparedQueryKind,\n} from '../session.ts';\nimport type { MySqlTable } from '../table.ts';\n\nexport class RelationalQueryBuilder<\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTSchema extends TablesRelationalConfig,\n\tTFields extends TableRelationalConfig,\n> {\n\tstatic readonly [entityKind]: string = 'MySqlRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TSchema,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: MySqlTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: MySqlDialect,\n\t\tprivate session: MySqlSession,\n\t\tprivate mode: Mode,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): MySqlRelationalQuery<TPreparedQueryHKT, BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn new MySqlRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t'many',\n\t\t\tthis.mode,\n\t\t);\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): MySqlRelationalQuery<TPreparedQueryHKT, BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn new MySqlRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t'first',\n\t\t\tthis.mode,\n\t\t);\n\t}\n}\n\nexport class MySqlRelationalQuery<\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTResult,\n> extends QueryPromise<TResult> {\n\tstatic readonly [entityKind]: string = 'MySqlRelationalQuery';\n\n\tdeclare protected $brand: 'MySqlRelationalQuery';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: MySqlTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: MySqlDialect,\n\t\tprivate session: MySqlSession,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tprivate queryMode: 'many' | 'first',\n\t\tprivate mode?: Mode,\n\t) {\n\t\tsuper();\n\t}\n\n\tprepare() {\n\t\tconst { query, builtQuery } = this._toSQL();\n\t\treturn this.session.prepareQuery(\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\t(rawRows) => {\n\t\t\t\tconst rows = rawRows.map((row) => mapRelationalRow(this.schema, this.tableConfig, row, query.selection));\n\t\t\t\tif (this.queryMode === 'first') {\n\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t}\n\t\t\t\treturn rows as TResult;\n\t\t\t},\n\t\t) as PreparedQueryKind<TPreparedQueryHKT, MySqlPreparedQueryConfig & { execute: TResult }, true>;\n\t}\n\n\tprivate _getQuery() {\n\t\tconst query = this.mode === 'planetscale'\n\t\t\t? this.dialect.buildRelationalQueryWithoutLateralSubqueries({\n\t\t\t\tfullSchema: this.fullSchema,\n\t\t\t\tschema: this.schema,\n\t\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\t\ttable: this.table,\n\t\t\t\ttableConfig: this.tableConfig,\n\t\t\t\tqueryConfig: this.config,\n\t\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t\t})\n\t\t\t: this.dialect.buildRelationalQuery({\n\t\t\t\tfullSchema: this.fullSchema,\n\t\t\t\tschema: this.schema,\n\t\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\t\ttable: this.table,\n\t\t\t\ttableConfig: this.tableConfig,\n\t\t\t\tqueryConfig: this.config,\n\t\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t\t});\n\t\treturn query;\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this._getQuery();\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { builtQuery, query };\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this._getQuery().sql as SQL;\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\toverride execute(): Promise<TResult> {\n\t\treturn this.prepare().execute();\n\t}\n}\n", "import type { ResultSetHeader } from 'mysql2/promise';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport type { MySqlDialect } from './dialect.ts';\nimport {\n\tMySqlDeleteBase,\n\tMySqlInsertBuilder,\n\tMySqlSelectBuilder,\n\tMySqlUpdateBuilder,\n\tQueryBuilder,\n} from './query-builders/index.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type {\n\tMode,\n\tMySqlQueryResultHKT,\n\tMySqlQueryResultKind,\n\tMySqlSession,\n\tMySqlTransaction,\n\tMySqlTransactionConfig,\n\tPreparedQueryHKTBase,\n} from './session.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\nimport type { MySqlTable } from './table.ts';\n\nexport class MySqlDatabase<\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTFullSchema extends Record<string, unknown> = {},\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'MySqlDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TPreparedQueryHKT, TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: MySqlDialect,\n\t\t/** @internal */\n\t\treadonly session: MySqlSession<any, any, any, any>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprotected readonly mode: Mode,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\t(this.query as MySqlDatabase<TQueryResult, TPreparedQueryHKT, Record<string, any>>['query'])[tableName] =\n\t\t\t\t\tnew RelationalQueryBuilder(\n\t\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\t\tthis._.schema,\n\t\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\t\tschema!.fullSchema[tableName] as MySqlTable,\n\t\t\t\t\t\tcolumns,\n\t\t\t\t\t\tdialect,\n\t\t\t\t\t\tsession,\n\t\t\t\t\t\tthis.mode,\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder());\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): MySqlSelectBuilder<undefined, TPreparedQueryHKT>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): MySqlSelectBuilder<TSelection, TPreparedQueryHKT>;\n\t\tfunction select(fields?: SelectedFields): MySqlSelectBuilder<SelectedFields | undefined, TPreparedQueryHKT> {\n\t\t\treturn new MySqlSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): MySqlSelectBuilder<undefined, TPreparedQueryHKT>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(\n\t\t\tfields: TSelection,\n\t\t): MySqlSelectBuilder<TSelection, TPreparedQueryHKT>;\n\t\tfunction selectDistinct(\n\t\t\tfields?: SelectedFields,\n\t\t): MySqlSelectBuilder<SelectedFields | undefined, TPreparedQueryHKT> {\n\t\t\treturn new MySqlSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends MySqlTable>(\n\t\t\ttable: TTable,\n\t\t): MySqlUpdateBuilder<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\t\treturn new MySqlUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends MySqlTable>(\n\t\t\ttable: TTable,\n\t\t): MySqlDeleteBase<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\t\treturn new MySqlDeleteBase(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, update, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): MySqlSelectBuilder<undefined, TPreparedQueryHKT>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): MySqlSelectBuilder<TSelection, TPreparedQueryHKT>;\n\tselect(fields?: SelectedFields): MySqlSelectBuilder<SelectedFields | undefined, TPreparedQueryHKT> {\n\t\treturn new MySqlSelectBuilder({ fields: fields ?? undefined, session: this.session, dialect: this.dialect });\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): MySqlSelectBuilder<undefined, TPreparedQueryHKT>;\n\tselectDistinct<TSelection extends SelectedFields>(\n\t\tfields: TSelection,\n\t): MySqlSelectBuilder<TSelection, TPreparedQueryHKT>;\n\tselectDistinct(fields?: SelectedFields): MySqlSelectBuilder<SelectedFields | undefined, TPreparedQueryHKT> {\n\t\treturn new MySqlSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t * ```\n\t */\n\tupdate<TTable extends MySqlTable>(table: TTable): MySqlUpdateBuilder<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\treturn new MySqlUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t * ```\n\t */\n\tinsert<TTable extends MySqlTable>(table: TTable): MySqlInsertBuilder<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\treturn new MySqlInsertBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t * ```\n\t */\n\tdelete<TTable extends MySqlTable>(table: TTable): MySqlDeleteBase<TTable, TQueryResult, TPreparedQueryHKT> {\n\t\treturn new MySqlDeleteBase(table, this.session, this.dialect);\n\t}\n\n\texecute<T extends { [column: string]: any } = ResultSetHeader>(\n\t\tquery: SQLWrapper,\n\t): Promise<MySqlQueryResultKind<TQueryResult, T>> {\n\t\treturn this.session.execute(query.getSQL());\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (\n\t\t\ttx: MySqlTransaction<TQueryResult, TPreparedQueryHKT, TFullSchema, TSchema>,\n\t\t\tconfig?: MySqlTransactionConfig,\n\t\t) => Promise<T>,\n\t\tconfig?: MySqlTransactionConfig,\n\t): Promise<T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type MySQLWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tHKT extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends MySqlDatabase<\n\t\tHKT,\n\t\tTPreparedQueryHKT,\n\t\tTFullSchema,\n\t\tTSchema extends Record<string, unknown> ? ExtractTablesWithRelations<TFullSchema> : TSchema\n\t>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): MySQLWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst $with: Q['with'] = (...args: []) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst execute: Q['execute'] = (...args: [any]) => primary.execute(...args);\n\tconst transaction: Q['transaction'] = (...args: [any, any]) => primary.transaction(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\texecute,\n\t\ttransaction,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { AnyMySqlColumn, MySqlColumn } from './columns/index.ts';\nimport type { MySqlTable } from './table.ts';\n\ninterface IndexConfig {\n\tname: string;\n\n\tcolumns: IndexColumn[];\n\n\t/**\n\t * If true, the index will be created as `create unique index` instead of `create index`.\n\t */\n\tunique?: boolean;\n\n\t/**\n\t * If set, the index will be created as `create index ... using { 'btree' | 'hash' }`.\n\t */\n\tusing?: 'btree' | 'hash';\n\n\t/**\n\t * If set, the index will be created as `create index ... algorythm { 'default' | 'inplace' | 'copy' }`.\n\t */\n\talgorythm?: 'default' | 'inplace' | 'copy';\n\n\t/**\n\t * If set, adds locks to the index creation.\n\t */\n\tlock?: 'default' | 'none' | 'shared' | 'exclusive';\n}\n\nexport type IndexColumn = MySqlColumn | SQL;\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'MySqlIndexBuilderOn';\n\n\tconstructor(private name: string, private unique: boolean) {}\n\n\ton(...columns: [IndexColumn, ...IndexColumn[]]): IndexBuilder {\n\t\treturn new IndexBuilder(this.name, columns, this.unique);\n\t}\n}\n\nexport interface AnyIndexBuilder {\n\tbuild(table: MySqlTable): Index;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IndexBuilder extends AnyIndexBuilder {}\n\nexport class IndexBuilder implements AnyIndexBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlIndexBuilder';\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(name: string, columns: IndexColumn[], unique: boolean) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t};\n\t}\n\n\tusing(using: IndexConfig['using']): this {\n\t\tthis.config.using = using;\n\t\treturn this;\n\t}\n\n\talgorythm(algorythm: IndexConfig['algorythm']): this {\n\t\tthis.config.algorythm = algorythm;\n\t\treturn this;\n\t}\n\n\tlock(lock: IndexConfig['lock']): this {\n\t\tthis.config.lock = lock;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: MySqlTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'MySqlIndex';\n\n\treadonly config: IndexConfig & { table: MySqlTable };\n\n\tconstructor(config: IndexConfig, table: MySqlTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport type GetColumnsTableName<TColumns> = TColumns extends\n\tAnyMySqlColumn<{ tableName: infer TTableName extends string }> | AnyMySqlColumn<\n\t\t{ tableName: infer TTableName extends string }\n\t>[] ? TTableName\n\t: never;\n\nexport function index(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, false);\n}\n\nexport function uniqueIndex(name: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(name, true);\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { AnyMySqlColumn, MySqlColumn } from './columns/index.ts';\nimport { MySqlTable } from './table.ts';\n\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumn extends AnyMySqlColumn<{ tableName: TTableName }>,\n\tTColumns extends AnyMySqlColumn<{ tableName: TTableName }>[],\n>(config: { name?: string; columns: [TColumn, ...TColumns] }): PrimaryKeyBuilder;\n/**\n * @deprecated: Please use primaryKey({ columns: [] }) instead of this function\n * @param columns\n */\nexport function primaryKey<\n\tTTableName extends string,\n\tTColumns extends AnyMySqlColumn<{ tableName: TTableName }>[],\n>(...columns: TColumns): PrimaryKeyBuilder;\nexport function primaryKey(...config: any) {\n\tif (config[0].columns) {\n\t\treturn new PrimaryKeyBuilder(config[0].columns, config[0].name);\n\t}\n\treturn new PrimaryKeyBuilder(config);\n}\n\nexport class PrimaryKeyBuilder {\n\tstatic readonly [entityKind]: string = 'MySqlPrimaryKeyBuilder';\n\n\t/** @internal */\n\tcolumns: MySqlColumn[];\n\n\t/** @internal */\n\tname?: string;\n\n\tconstructor(\n\t\tcolumns: MySqlColumn[],\n\t\tname?: string,\n\t) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\t/** @internal */\n\tbuild(table: MySqlTable): PrimaryKey {\n\t\treturn new PrimaryKey(table, this.columns, this.name);\n\t}\n}\n\nexport class PrimaryKey {\n\tstatic readonly [entityKind]: string = 'MySqlPrimaryKey';\n\n\treadonly columns: MySqlColumn[];\n\treadonly name?: string;\n\n\tconstructor(readonly table: MySqlTable, columns: MySqlColumn[], name?: string) {\n\t\tthis.columns = columns;\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name\n\t\t\t?? `${this.table[MySqlTable.Symbol.Name]}_${this.columns.map((column) => column.name).join('_')}_pk`;\n\t}\n}\n", "export const MySqlViewConfig = Symbol.for('drizzle:MySqlViewConfig');\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { MySqlColumn, MySqlColumnBuilderBase } from './columns/index.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport { mysqlTable } from './table.ts';\nimport { MySqlViewBase } from './view-base.ts';\nimport { MySqlViewConfig } from './view-common.ts';\n\nexport interface ViewBuilderConfig {\n\talgorithm?: 'undefined' | 'merge' | 'temptable';\n\tdefiner?: string;\n\tsqlSecurity?: 'definer' | 'invoker';\n\twithCheckOption?: 'cascaded' | 'local';\n}\n\nexport class ViewBuilderCore<TConfig extends { name: string; columns?: unknown }> {\n\tstatic readonly [entityKind]: string = 'MySqlViewBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t\tprotected schema: string | undefined,\n\t) {}\n\n\tprotected config: ViewBuilderConfig = {};\n\n\talgorithm(\n\t\talgorithm: Exclude<ViewBuilderConfig['algorithm'], undefined>,\n\t): this {\n\t\tthis.config.algorithm = algorithm;\n\t\treturn this;\n\t}\n\n\tdefiner(\n\t\tdefiner: Exclude<ViewBuilderConfig['definer'], undefined>,\n\t): this {\n\t\tthis.config.definer = definer;\n\t\treturn this;\n\t}\n\n\tsqlSecurity(\n\t\tsqlSecurity: Exclude<ViewBuilderConfig['sqlSecurity'], undefined>,\n\t): this {\n\t\tthis.config.sqlSecurity = sqlSecurity;\n\t\treturn this;\n\t}\n\n\twithCheckOption(\n\t\twithCheckOption?: Exclude<ViewBuilderConfig['withCheckOption'], undefined>,\n\t): this {\n\t\tthis.config.withCheckOption = withCheckOption ?? 'cascaded';\n\t\treturn this;\n\t}\n}\n\nexport class ViewBuilder<TName extends string = string> extends ViewBuilderCore<{ name: TName }> {\n\tstatic readonly [entityKind]: string = 'MySqlViewBuilder';\n\n\tas<TSelectedFields extends SelectedFields>(\n\t\tqb: TypedQueryBuilder<TSelectedFields> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelectedFields>),\n\t): MySqlViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'mysql'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelectedFields>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\tconst aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\treturn new Proxy(\n\t\t\tnew MySqlView({\n\t\t\t\tmysqlConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: aliasedSelection,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as MySqlViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'mysql'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, MySqlColumnBuilderBase> = Record<string, MySqlColumnBuilderBase>,\n> extends ViewBuilderCore<{ name: TName; columns: TColumns }> {\n\tstatic readonly [entityKind]: string = 'MySqlManualViewBuilder';\n\n\tprivate columns: Record<string, MySqlColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t\tschema: string | undefined,\n\t) {\n\t\tsuper(name, schema);\n\t\tthis.columns = getTableColumns(mysqlTable(name, columns)) as BuildColumns<TName, TColumns, 'mysql'>;\n\t}\n\n\texisting(): MySqlViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'mysql'>> {\n\t\treturn new Proxy(\n\t\t\tnew MySqlView({\n\t\t\t\tmysqlConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as MySqlViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'mysql'>>;\n\t}\n\n\tas(query: SQL): MySqlViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'mysql'>> {\n\t\treturn new Proxy(\n\t\t\tnew MySqlView({\n\t\t\t\tmysqlConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as MySqlViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'mysql'>>;\n\t}\n}\n\nexport class MySqlView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends MySqlViewBase<TName, TExisting, TSelectedFields> {\n\tstatic readonly [entityKind]: string = 'MySqlView';\n\n\tdeclare protected $MySqlViewBrand: 'MySqlView';\n\n\t[MySqlViewConfig]: ViewBuilderConfig | undefined;\n\n\tconstructor({ mysqlConfig, config }: {\n\t\tmysqlConfig: ViewBuilderConfig | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tthis[MySqlViewConfig] = mysqlConfig;\n\t}\n}\n\nexport type MySqlViewWithSelection<\n\tTName extends string,\n\tTExisting extends boolean,\n\tTSelectedFields extends ColumnsSelection,\n> = MySqlView<TName, TExisting, TSelectedFields> & TSelectedFields;\n\n/** @internal */\nexport function mysqlViewWithSchema(\n\tname: string,\n\tselection: Record<string, MySqlColumnBuilderBase> | undefined,\n\tschema: string | undefined,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection, schema);\n\t}\n\treturn new ViewBuilder(name, schema);\n}\n\nexport function mysqlView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function mysqlView<TName extends string, TColumns extends Record<string, MySqlColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function mysqlView(\n\tname: string,\n\tselection?: Record<string, MySqlColumnBuilderBase>,\n): ViewBuilder | ManualViewBuilder {\n\treturn mysqlViewWithSchema(name, selection, undefined);\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { type MySqlTableFn, mysqlTableWithSchema } from './table.ts';\nimport { type mysqlView, mysqlViewWithSchema } from './view.ts';\n\nexport class MySqlSchema<TName extends string = string> {\n\tstatic readonly [entityKind]: string = 'MySqlSchema';\n\n\tconstructor(\n\t\tpublic readonly schemaName: TName,\n\t) {}\n\n\ttable: MySqlTableFn<TName> = (name, columns, extraConfig) => {\n\t\treturn mysqlTableWithSchema(name, columns, extraConfig, this.schemaName);\n\t};\n\n\tview = ((name, columns) => {\n\t\treturn mysqlViewWithSchema(name, columns, this.schemaName);\n\t}) as typeof mysqlView;\n}\n\n/** @deprecated - use `instanceof MySqlSchema` */\nexport function isMySqlSchema(obj: unknown): obj is MySqlSchema {\n\treturn is(obj, MySqlSchema);\n}\n\n/**\n * Create a MySQL schema.\n * https://dev.mysql.com/doc/refman/8.0/en/create-database.html\n *\n * @param name mysql use schema name\n * @returns MySQL schema\n */\nexport function mysqlDatabase<TName extends string>(name: TName) {\n\treturn new MySqlSchema(name);\n}\n\n/**\n * @see mysqlDatabase\n */\nexport const mysqlSchema = mysqlDatabase;\n", "import { entityKind } from '~/entity.ts';\nimport { TransactionRollbackError } from '~/errors.ts';\nimport type { RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { type Query, type SQL, sql } from '~/sql/sql.ts';\nimport type { Assume, Equal } from '~/utils.ts';\nimport { MySqlDatabase } from './db.ts';\nimport type { MySqlDialect } from './dialect.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport type Mode = 'default' | 'planetscale';\n\nexport interface MySqlQueryResultHKT {\n\treadonly $brand: 'MySqlQueryResultHKT';\n\treadonly row: unknown;\n\treadonly type: unknown;\n}\n\nexport interface AnyMySqlQueryResultHKT extends MySqlQueryResultHKT {\n\treadonly type: any;\n}\n\nexport type MySqlQueryResultKind<TKind extends MySqlQueryResultHKT, TRow> = (TKind & {\n\treadonly row: TRow;\n})['type'];\n\nexport interface MySqlPreparedQueryConfig {\n\texecute: unknown;\n\titerator: unknown;\n}\n\nexport interface MySqlPreparedQueryHKT {\n\treadonly $brand: 'MySqlPreparedQueryHKT';\n\treadonly config: unknown;\n\treadonly type: unknown;\n}\n\nexport type PreparedQueryKind<\n\tTKind extends MySqlPreparedQueryHKT,\n\tTConfig extends MySqlPreparedQueryConfig,\n\tTAssume extends boolean = false,\n> = Equal<TAssume, true> extends true\n\t? Assume<(TKind & { readonly config: TConfig })['type'], MySqlPreparedQuery<TConfig>>\n\t: (TKind & { readonly config: TConfig })['type'];\n\nexport abstract class MySqlPreparedQuery<T extends MySqlPreparedQueryConfig> {\n\tstatic readonly [entityKind]: string = 'MySqlPreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tabstract execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;\n\n\tabstract iterator(placeholderValues?: Record<string, unknown>): AsyncGenerator<T['iterator']>;\n}\n\nexport interface MySqlTransactionConfig {\n\twithConsistentSnapshot?: boolean;\n\taccessMode?: 'read only' | 'read write';\n\tisolationLevel: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n}\n\nexport abstract class MySqlSession<\n\tTQueryResult extends MySqlQueryResultHKT = MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase = PreparedQueryHKTBase,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> {\n\tstatic readonly [entityKind]: string = 'MySqlSession';\n\n\tconstructor(protected dialect: MySqlDialect) {}\n\n\tabstract prepareQuery<T extends MySqlPreparedQueryConfig, TPreparedQueryHKT extends MySqlPreparedQueryHKT>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tcustomResultMapper?: (rows: unknown[][]) => T['execute'],\n\t\tgeneratedIds?: Record<string, unknown>[],\n\t\treturningIds?: SelectedFieldsOrdered,\n\t): PreparedQueryKind<TPreparedQueryHKT, T>;\n\n\texecute<T>(query: SQL): Promise<T> {\n\t\treturn this.prepareQuery<MySqlPreparedQueryConfig & { execute: T }, PreparedQueryHKTBase>(\n\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\tundefined,\n\t\t).execute();\n\t}\n\n\tabstract all<T = unknown>(query: SQL): Promise<T[]>;\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: MySqlTransaction<TQueryResult, TPreparedQueryHKT, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: MySqlTransactionConfig,\n\t): Promise<T>;\n\n\tprotected getSetTransactionSQL(config: MySqlTransactionConfig): SQL | undefined {\n\t\tconst parts: string[] = [];\n\n\t\tif (config.isolationLevel) {\n\t\t\tparts.push(`isolation level ${config.isolationLevel}`);\n\t\t}\n\n\t\treturn parts.length ? sql`set transaction ${sql.raw(parts.join(' '))}` : undefined;\n\t}\n\n\tprotected getStartTransactionSQL(config: MySqlTransactionConfig): SQL | undefined {\n\t\tconst parts: string[] = [];\n\n\t\tif (config.withConsistentSnapshot) {\n\t\t\tparts.push('with consistent snapshot');\n\t\t}\n\n\t\tif (config.accessMode) {\n\t\t\tparts.push(config.accessMode);\n\t\t}\n\n\t\treturn parts.length ? sql`start transaction ${sql.raw(parts.join(' '))}` : undefined;\n\t}\n}\n\nexport abstract class MySqlTransaction<\n\tTQueryResult extends MySqlQueryResultHKT,\n\tTPreparedQueryHKT extends PreparedQueryHKTBase,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> extends MySqlDatabase<TQueryResult, TPreparedQueryHKT, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'MySqlTransaction';\n\n\tconstructor(\n\t\tdialect: MySqlDialect,\n\t\tsession: MySqlSession,\n\t\tprotected schema: RelationalSchemaConfig<TSchema> | undefined,\n\t\tprotected readonly nestedIndex: number,\n\t\tmode: Mode,\n\t) {\n\t\tsuper(dialect, session, schema, mode);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n\n\t/** Nested transactions (aka savepoints) only work with InnoDB engine. */\n\tabstract override transaction<T>(\n\t\ttransaction: (tx: MySqlTransaction<TQueryResult, TPreparedQueryHKT, TFullSchema, TSchema>) => Promise<T>,\n\t): Promise<T>;\n}\n\nexport interface PreparedQueryHKTBase extends MySqlPreparedQueryHKT {\n\ttype: MySqlPreparedQuery<Assume<this['config'], MySqlPreparedQueryConfig>>;\n}\n", "//# sourceMappingURL=subquery.js.map", "import { is } from '~/entity.ts';\nimport { Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { Check } from './checks.ts';\nimport { CheckBuilder } from './checks.ts';\nimport type { ForeignKey } from './foreign-keys.ts';\nimport { ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport type { PrimaryKey } from './primary-keys.ts';\nimport { PrimaryKeyBuilder } from './primary-keys.ts';\nimport { MySqlTable } from './table.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport { MySqlViewConfig } from './view-common.ts';\nimport type { MySqlView } from './view.ts';\n\nexport function getTableConfig(table: MySqlTable) {\n\tconst columns = Object.values(table[MySqlTable.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[MySqlTable.Symbol.InlineForeignKeys]);\n\tconst name = table[Table.Symbol.Name];\n\tconst schema = table[Table.Symbol.Schema];\n\tconst baseName = table[Table.Symbol.BaseName];\n\n\tconst extraConfigBuilder = table[MySqlTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[MySqlTable.Symbol.Columns]);\n\t\tfor (const builder of Object.values(extraConfig)) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t\tschema,\n\t\tbaseName,\n\t};\n}\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: MySqlView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[MySqlViewConfig],\n\t};\n}\n", "export * from './alias.ts';\nexport * from './checks.ts';\nexport * from './columns/index.ts';\nexport * from './db.ts';\nexport * from './dialect.ts';\nexport * from './foreign-keys.ts';\nexport * from './indexes.ts';\nexport * from './primary-keys.ts';\nexport * from './query-builders/index.ts';\nexport * from './schema.ts';\nexport * from './session.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './unique-constraint.ts';\nexport * from './utils.ts';\nexport * from './view-common.ts';\nexport * from './view.ts';\n", "import { TableAliasProxyHandler } from '~/alias.ts';\nimport type { BuildAliasTable } from './query-builders/select.types.ts';\n\nimport type { PgTable } from './table.ts';\nimport type { PgViewBase } from './view-base.ts';\n\nexport function alias<TTable extends PgTable | PgViewBase, TAlias extends string>(\n\ttable: TTable,\n\talias: TAlias,\n): BuildAliasTable<TTable, TAlias> {\n\treturn new Proxy(table, new TableAliasProxyHandler(alias, false)) as any;\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { SQL } from '~/sql/index.ts';\nimport type { PgTable } from './table.ts';\n\nexport class CheckBuilder {\n\tstatic readonly [entityKind]: string = 'PgCheckBuilder';\n\n\tprotected brand!: 'PgConstraintBuilder';\n\n\tconstructor(public name: string, public value: SQL) {}\n\n\t/** @internal */\n\tbuild(table: PgTable): Check {\n\t\treturn new Check(table, this);\n\t}\n}\n\nexport class Check {\n\tstatic readonly [entityKind]: string = 'PgCheck';\n\n\treadonly name: string;\n\treadonly value: SQL;\n\n\tconstructor(public table: PgTable, builder: CheckBuilder) {\n\t\tthis.name = builder.name;\n\t\tthis.value = builder.value;\n\t}\n}\n\nexport function check(name: string, value: SQL): CheckBuilder {\n\treturn new CheckBuilder(name, value);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnDataType,\n\tGeneratedIdentityConfig,\n\tIsIdentityByDefault,\n} from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgSequenceOptions } from '../sequence.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgIntColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n> extends PgColumnBuilder<\n\tT,\n\t{ generatedIdentity: GeneratedIdentityConfig }\n> {\n\tstatic readonly [entityKind]: string = 'PgIntColumnBaseBuilder';\n\n\tgeneratedAlwaysAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentityByDefault<this, 'always'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'always',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as any;\n\t}\n\n\tgeneratedByDefaultAsIdentity(\n\t\tsequence?: PgSequenceOptions & { name?: string },\n\t): IsIdentityByDefault<this, 'byDefault'> {\n\t\tif (sequence) {\n\t\t\tconst { name, ...options } = sequence;\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t\tsequenceName: name,\n\t\t\t\tsequenceOptions: options,\n\t\t\t};\n\t\t} else {\n\t\t\tthis.config.generatedIdentity = {\n\t\t\t\ttype: 'byDefault',\n\t\t\t};\n\t\t}\n\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\n\t\treturn this as any;\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgBigInt53BuilderInitial<TName extends string> = PgBigInt53Builder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgBigInt53';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgBigInt53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigInt53'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgBigInt53Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgBigInt53');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt53<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBigInt53<T extends ColumnBaseConfig<'number', 'PgBigInt53'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBigInt53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigInt64BuilderInitial<TName extends string> = PgBigInt64Builder<{\n\tname: TName;\n\tdataType: 'bigint';\n\tcolumnType: 'PgBigInt64';\n\tdata: bigint;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgBigInt64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigInt64'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgBigInt64Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'bigint', 'PgBigInt64');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigInt64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigInt64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigInt64<T extends ColumnBaseConfig<'bigint', 'PgBigInt64'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBigInt64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigint';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\ninterface PgBigIntConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigint<TName extends string, TMode extends PgBigIntConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigIntConfig<TMode>,\n): TMode extends 'number' ? PgBigInt53BuilderInitial<TName> : PgBigInt64BuilderInitial<TName>;\nexport function bigint(name: string, config: PgBigIntConfig) {\n\tif (config.mode === 'number') {\n\t\treturn new PgBigInt53Builder(name);\n\t}\n\treturn new PgBigInt64Builder(name);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBigSerial53BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial53Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgBigSerial53';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t\tgenerated: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial53Builder<T extends ColumnBuilderBaseConfig<'number', 'PgBigSerial53'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgBigSerial53Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'number', 'PgBigSerial53');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial53<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial53<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial53<T extends ColumnBaseConfig<'number', 'PgBigSerial53'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBigSerial53';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\toverride mapFromDriverValue(value: number): number {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\treturn Number(value);\n\t}\n}\n\nexport type PgBigSerial64BuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgBigSerial64Builder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'bigint';\n\t\t\tcolumnType: 'PgBigSerial64';\n\t\t\tdata: bigint;\n\t\t\tdriverParam: string;\n\t\t\tenumValues: undefined;\n\t\t\tgenerated: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgBigSerial64Builder<T extends ColumnBuilderBaseConfig<'bigint', 'PgBigSerial64'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgBigSerial64Builder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'bigint', 'PgBigSerial64');\n\t\tthis.config.hasDefault = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBigSerial64<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBigSerial64<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBigSerial64<T extends ColumnBaseConfig<'bigint', 'PgBigSerial64'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBigSerial64';\n\n\tgetSQLType(): string {\n\t\treturn 'bigserial';\n\t}\n\n\t// eslint-disable-next-line unicorn/prefer-native-coercion-functions\n\toverride mapFromDriverValue(value: string): bigint {\n\t\treturn BigInt(value);\n\t}\n}\n\ninterface PgBigSerialConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {\n\tmode: T;\n}\n\nexport function bigserial<TName extends string, TMode extends PgBigSerialConfig['mode']>(\n\tname: TName,\n\tconfig: PgBigSerialConfig<TMode>,\n): TMode extends 'number' ? PgBigSerial53BuilderInitial<TName> : PgBigSerial64BuilderInitial<TName>;\nexport function bigserial(name: string, { mode }: PgBigSerialConfig) {\n\tif (mode === 'number') {\n\t\treturn new PgBigSerial53Builder(name);\n\t}\n\treturn new PgBigSerial64Builder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgBooleanBuilderInitial<TName extends string> = PgBooleanBuilder<{\n\tname: TName;\n\tdataType: 'boolean';\n\tcolumnType: 'PgBoolean';\n\tdata: boolean;\n\tdriverParam: boolean;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgBooleanBuilder<T extends ColumnBuilderBaseConfig<'boolean', 'PgBoolean'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgBooleanBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'boolean', 'PgBoolean');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBoolean<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBoolean<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgBoolean<T extends ColumnBaseConfig<'boolean', 'PgBoolean'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgBoolean';\n\n\tgetSQLType(): string {\n\t\treturn 'boolean';\n\t}\n}\n\nexport function boolean<TName extends string>(name: TName): PgBooleanBuilderInitial<TName> {\n\treturn new PgBooleanBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgCharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgChar';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n\tgenerated: undefined;\n}>;\n\nexport class PgCharBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgChar'>> extends PgColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic readonly [entityKind]: string = 'PgCharBuilder';\n\n\tconstructor(name: string, config: PgCharConfig<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgChar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgChar<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgChar<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgChar<T extends ColumnBaseConfig<'string', 'PgChar'>>\n\textends PgColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'PgChar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `char` : `char(${this.length})`;\n\t}\n}\n\nexport interface PgCharConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tlength?: number;\n\tenum?: TEnum;\n}\n\nexport function char<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: PgCharConfig<T | Writable<T>> = {},\n): PgCharBuilderInitial<TName, Writable<T>> {\n\treturn new PgCharBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgCidrBuilderInitial<TName extends string> = PgCidrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgCidr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgCidrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgCidr'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgCidrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgCidr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCidr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCidr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgCidr<T extends ColumnBaseConfig<'string', 'PgCidr'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgCidr';\n\n\tgetSQLType(): string {\n\t\treturn 'cidr';\n\t}\n}\n\nexport function cidr<TName extends string>(name: TName): PgCidrBuilderInitial<TName> {\n\treturn new PgCidrBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { SQL } from '~/sql/sql.ts';\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type ConvertCustomConfig<TName extends string, T extends Partial<CustomTypeValues>> =\n\t& {\n\t\tname: TName;\n\t\tdataType: 'custom';\n\t\tcolumnType: 'PgCustomColumn';\n\t\tdata: T['data'];\n\t\tdriverParam: T['driverData'];\n\t\tenumValues: undefined;\n\t\tgenerated: undefined;\n\t}\n\t& (T['notNull'] extends true ? { notNull: true } : {})\n\t& (T['default'] extends true ? { hasDefault: true } : {});\n\nexport interface PgCustomColumnInnerConfig {\n\tcustomTypeValues: CustomTypeValues;\n}\n\nexport class PgCustomColumnBuilder<T extends ColumnBuilderBaseConfig<'custom', 'PgCustomColumn'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{\n\t\t\tfieldConfig: CustomTypeValues['config'];\n\t\t\tcustomTypeParams: CustomTypeParams<any>;\n\t\t},\n\t\t{\n\t\t\tpgColumnBuilderBrand: 'PgCustomColumnBuilderBrand';\n\t\t}\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgCustomColumnBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tfieldConfig: CustomTypeValues['config'],\n\t\tcustomTypeParams: CustomTypeParams<any>,\n\t) {\n\t\tsuper(name, 'custom', 'PgCustomColumn');\n\t\tthis.config.fieldConfig = fieldConfig;\n\t\tthis.config.customTypeParams = customTypeParams;\n\t}\n\n\t/** @internal */\n\tbuild<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgCustomColumn<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgCustomColumn<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgCustomColumn<T extends ColumnBaseConfig<'custom', 'PgCustomColumn'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgCustomColumn';\n\n\tprivate sqlName: string;\n\tprivate mapTo?: (value: T['data']) => T['driverParam'];\n\tprivate mapFrom?: (value: T['driverParam']) => T['data'];\n\n\tconstructor(\n\t\ttable: AnyPgTable<{ name: T['tableName'] }>,\n\t\tconfig: PgCustomColumnBuilder<T>['config'],\n\t) {\n\t\tsuper(table, config);\n\t\tthis.sqlName = config.customTypeParams.dataType(config.fieldConfig);\n\t\tthis.mapTo = config.customTypeParams.toDriver;\n\t\tthis.mapFrom = config.customTypeParams.fromDriver;\n\t}\n\n\tgetSQLType(): string {\n\t\treturn this.sqlName;\n\t}\n\n\toverride mapFromDriverValue(value: T['driverParam']): T['data'] {\n\t\treturn typeof this.mapFrom === 'function' ? this.mapFrom(value) : value as T['data'];\n\t}\n\n\toverride mapToDriverValue(value: T['data']): T['driverParam'] {\n\t\treturn typeof this.mapTo === 'function' ? this.mapTo(value) : value as T['data'];\n\t}\n}\n\nexport type CustomTypeValues = {\n\t/**\n\t * Required type for custom column, that will infer proper type model\n\t *\n\t * Examples:\n\t *\n\t * If you want your column to be `string` type after selecting/or on inserting - use `data: string`. Like `text`, `varchar`\n\t *\n\t * If you want your column to be `number` type after selecting/or on inserting - use `data: number`. Like `integer`\n\t */\n\tdata: unknown;\n\n\t/**\n\t * Type helper, that represents what type database driver is accepting for specific database data type\n\t */\n\tdriverData?: unknown;\n\n\t/**\n\t * What config type should be used for {@link CustomTypeParams} `dataType` generation\n\t */\n\tconfig?: unknown;\n\n\t/**\n\t * Whether the config argument should be required or not\n\t * @default false\n\t */\n\tconfigRequired?: boolean;\n\n\t/**\n\t * If your custom data type should be notNull by default you can use `notNull: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tnotNull?: boolean;\n\n\t/**\n\t * If your custom data type has default you can use `default: true`\n\t *\n\t * @example\n\t * const customSerial = customType<{ data: number, notNull: true, default: true }>({\n\t * \t  dataType() {\n\t * \t    return 'serial';\n\t *    },\n\t * });\n\t */\n\tdefault?: boolean;\n};\n\nexport interface CustomTypeParams<T extends CustomTypeValues> {\n\t/**\n\t * Database data type string representation, that is used for migrations\n\t * @example\n\t * ```\n\t * `jsonb`, `text`\n\t * ```\n\t *\n\t * If database data type needs additional params you can use them from `config` param\n\t * @example\n\t * ```\n\t * `varchar(256)`, `numeric(2,3)`\n\t * ```\n\t *\n\t * To make `config` be of specific type please use config generic in {@link CustomTypeValues}\n\t *\n\t * @example\n\t * Usage example\n\t * ```\n\t *   dataType() {\n\t *     return 'boolean';\n\t *   },\n\t * ```\n\t * Or\n\t * ```\n\t *   dataType(config) {\n\t * \t   return typeof config.length !== 'undefined' ? `varchar(${config.length})` : `varchar`;\n\t * \t }\n\t * ```\n\t */\n\tdataType: (config: T['config'] | (Equal<T['configRequired'], true> extends true ? never : undefined)) => string;\n\n\t/**\n\t * Optional mapping function, between user input and driver\n\t * @example\n\t * For example, when using jsonb we need to map JS/TS object to string before writing to database\n\t * ```\n\t * toDriver(value: TData): string {\n\t * \t return JSON.stringify(value);\n\t * }\n\t * ```\n\t */\n\ttoDriver?: (value: T['data']) => T['driverData'] | SQL;\n\n\t/**\n\t * Optional mapping function, that is responsible for data mapping from database to JS/TS code\n\t * @example\n\t * For example, when using timestamp we need to map string Date representation to JS Date\n\t * ```\n\t * fromDriver(value: string): Date {\n\t * \treturn new Date(value);\n\t * },\n\t * ```\n\t */\n\tfromDriver?: (value: T['driverData']) => T['data'];\n}\n\n/**\n * Custom pg database data type generator\n */\nexport function customType<T extends CustomTypeValues = CustomTypeValues>(\n\tcustomTypeParams: CustomTypeParams<T>,\n): Equal<T['configRequired'], true> extends true ? <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig: T['config'],\n\t) => PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n\t: <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t) => PgCustomColumnBuilder<ConvertCustomConfig<TName, T>>\n{\n\treturn <TName extends string>(\n\t\tdbName: TName,\n\t\tfieldConfig?: T['config'],\n\t): PgCustomColumnBuilder<ConvertCustomConfig<TName, T>> => {\n\t\treturn new PgCustomColumnBuilder(dbName as ConvertCustomConfig<TName, T>['name'], fieldConfig, customTypeParams);\n\t};\n}\n", "import type { ColumnBuilderBaseConfig, ColumnDataType } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumnBuilder } from './common.ts';\n\nexport abstract class PgDateColumnBaseBuilder<\n\tT extends ColumnBuilderBaseConfig<ColumnDataType, string>,\n\tTRuntimeConfig extends object = object,\n> extends PgColumnBuilder<T, TRuntimeConfig> {\n\tstatic readonly [entityKind]: string = 'PgDateColumnBaseBuilder';\n\n\tdefaultNow() {\n\t\treturn this.default(sql`now()`);\n\t}\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgDateBuilderInitial<TName extends string> = PgDateBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgDate';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgDateBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgDate'>> extends PgDateColumnBaseBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgDateBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'date', 'PgDate');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDate<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDate<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgDate<T extends ColumnBaseConfig<'date', 'PgDate'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgDate';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n\n\toverride mapFromDriverValue(value: string): Date {\n\t\treturn new Date(value);\n\t}\n\n\toverride mapToDriverValue(value: Date): string {\n\t\treturn value.toISOString();\n\t}\n}\n\nexport type PgDateStringBuilderInitial<TName extends string> = PgDateStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgDateString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgDateStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgDateString'>>\n\textends PgDateColumnBaseBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgDateStringBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgDateString');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDateString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDateString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDateString<T extends ColumnBaseConfig<'string', 'PgDateString'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgDateString';\n\n\tgetSQLType(): string {\n\t\treturn 'date';\n\t}\n}\n\nexport function date<TName extends string>(\n\tname: TName,\n\tconfig?: { mode: 'string' },\n): PgDateStringBuilderInitial<TName>;\nexport function date<TName extends string>(TName: TName, config?: { mode: 'date' }): PgDateBuilderInitial<TName>;\nexport function date<TName extends string>(name: TName, config?: { mode: 'date' | 'string' }) {\n\tif (config?.mode === 'date') {\n\t\treturn new PgDateBuilder(name);\n\t}\n\treturn new PgDateStringBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgDoublePrecisionBuilderInitial<TName extends string> = PgDoublePrecisionBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgDoublePrecision';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgDoublePrecisionBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgDoublePrecision'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgDoublePrecisionBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgDoublePrecision');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgDoublePrecision<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgDoublePrecision<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgDoublePrecision<T extends ColumnBaseConfig<'number', 'PgDoublePrecision'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgDoublePrecision';\n\n\tgetSQLType(): string {\n\t\treturn 'double precision';\n\t}\n\n\toverride mapFromDriverValue(value: string | number): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function doublePrecision<TName extends string>(name: TName): PgDoublePrecisionBuilderInitial<TName> {\n\treturn new PgDoublePrecisionBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgInetBuilderInitial<TName extends string> = PgInetBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInet';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgInetBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInet'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgInetBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgInet');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInet<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInet<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInet<T extends ColumnBaseConfig<'string', 'PgInet'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgInet';\n\n\tgetSQLType(): string {\n\t\treturn 'inet';\n\t}\n}\n\nexport function inet<TName extends string>(name: TName): PgInetBuilderInitial<TName> {\n\treturn new PgInetBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\ntype PgIntegerBuilderInitial<TName extends string> = PgIntegerBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgInteger';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgIntegerBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgInteger'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgIntegerBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgInteger');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInteger<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInteger<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInteger<T extends ColumnBaseConfig<'number', 'PgInteger'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgInteger';\n\n\tgetSQLType(): string {\n\t\treturn 'integer';\n\t}\n\n\toverride mapFromDriverValue(value: number | string): number {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseInt(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function integer<TName extends string>(name: TName): PgIntegerBuilderInitial<TName> {\n\treturn new PgIntegerBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgIntervalBuilderInitial<TName extends string> = PgIntervalBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgInterval';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgIntervalBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgInterval'>>\n\textends PgColumnBuilder<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic readonly [entityKind]: string = 'PgIntervalBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tintervalConfig: IntervalConfig,\n\t) {\n\t\tsuper(name, 'string', 'PgInterval');\n\t\tthis.config.intervalConfig = intervalConfig;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgInterval<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgInterval<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgInterval<T extends ColumnBaseConfig<'string', 'PgInterval'>>\n\textends PgColumn<T, { intervalConfig: IntervalConfig }>\n{\n\tstatic readonly [entityKind]: string = 'PgInterval';\n\n\treadonly fields: IntervalConfig['fields'] = this.config.intervalConfig.fields;\n\treadonly precision: IntervalConfig['precision'] = this.config.intervalConfig.precision;\n\n\tgetSQLType(): string {\n\t\tconst fields = this.fields ? ` ${this.fields}` : '';\n\t\tconst precision = this.precision ? `(${this.precision})` : '';\n\t\treturn `interval${fields}${precision}`;\n\t}\n}\n\nexport interface IntervalConfig {\n\tfields?:\n\t\t| 'year'\n\t\t| 'month'\n\t\t| 'day'\n\t\t| 'hour'\n\t\t| 'minute'\n\t\t| 'second'\n\t\t| 'year to month'\n\t\t| 'day to hour'\n\t\t| 'day to minute'\n\t\t| 'day to second'\n\t\t| 'hour to minute'\n\t\t| 'hour to second'\n\t\t| 'minute to second';\n\tprecision?: Precision;\n}\n\nexport function interval<TName extends string>(\n\tname: TName,\n\tconfig: IntervalConfig = {},\n): PgIntervalBuilderInitial<TName> {\n\treturn new PgIntervalBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonBuilderInitial<TName extends string> = PgJsonBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJson';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgJsonBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJson'>> extends PgColumnBuilder<\n\tT\n> {\n\tstatic readonly [entityKind]: string = 'PgJsonBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJson');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJson<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJson<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJson<T extends ColumnBaseConfig<'json', 'PgJson'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgJson';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'json';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function json<TName extends string>(name: TName): PgJsonBuilderInitial<TName> {\n\treturn new PgJsonBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgJsonbBuilderInitial<TName extends string> = PgJsonbBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgJsonb';\n\tdata: unknown;\n\tdriverParam: unknown;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgJsonbBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgJsonb'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgJsonbBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgJsonb');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgJsonb<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgJsonb<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgJsonb<T extends ColumnBaseConfig<'json', 'PgJsonb'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgJsonb';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgJsonbBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'jsonb';\n\t}\n\n\toverride mapToDriverValue(value: T['data']): string {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: T['data'] | string): T['data'] {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(value);\n\t\t\t} catch {\n\t\t\t\treturn value as T['data'];\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n\nexport function jsonb<TName extends string>(name: TName): PgJsonbBuilderInitial<TName> {\n\treturn new PgJsonbBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgLineBuilderInitial<TName extends string> = PgLineBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgLine';\n\tdata: [number, number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgLineBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgLine'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgLineBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgLine');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineTuple<T extends ColumnBaseConfig<'array', 'PgLine'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgLine';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number, number] {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn [Number.parseFloat(a!), Number.parseFloat(b!), Number.parseFloat(c!)];\n\t}\n\n\toverride mapToDriverValue(value: [number, number, number]): string {\n\t\treturn `{${value[0]},${value[1]},${value[2]}}`;\n\t}\n}\n\nexport type PgLineABCBuilderInitial<TName extends string> = PgLineABCBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgLineABC';\n\tdata: { a: number; b: number; c: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgLineABCBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgLineABC'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgLineABCBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgLineABC');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgLineABC<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgLineABC<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgLineABC<T extends ColumnBaseConfig<'json', 'PgLineABC'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgLineABC';\n\n\tgetSQLType(): string {\n\t\treturn 'line';\n\t}\n\n\toverride mapFromDriverValue(value: string): { a: number; b: number; c: number } {\n\t\tconst [a, b, c] = value.slice(1, -1).split(',');\n\t\treturn { a: Number.parseFloat(a!), b: Number.parseFloat(b!), c: Number.parseFloat(c!) };\n\t}\n\n\toverride mapToDriverValue(value: { a: number; b: number; c: number }): string {\n\t\treturn `{${value.a},${value.b},${value.c}}`;\n\t}\n}\n\nexport interface PgLineTypeConfig<T extends 'tuple' | 'abc' = 'tuple' | 'abc'> {\n\tmode?: T;\n}\n\nexport function line<TName extends string, TMode extends PgLineTypeConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgLineTypeConfig<TMode>,\n): Equal<TMode, 'abc'> extends true ? PgLineABCBuilderInitial<TName>\n\t: PgLineBuilderInitial<TName>;\nexport function line(name: string, config?: PgLineTypeConfig) {\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgLineBuilder(name);\n\t}\n\n\treturn new PgLineABCBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddrBuilderInitial<TName extends string> = PgMacaddrBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgMacaddrBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgMacaddrBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr<T extends ColumnBaseConfig<'string', 'PgMacaddr'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgMacaddr';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr';\n\t}\n}\n\nexport function macaddr<TName extends string>(name: TName): PgMacaddrBuilderInitial<TName> {\n\treturn new PgMacaddrBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '../table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgMacaddr8BuilderInitial<TName extends string> = PgMacaddr8Builder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgMacaddr8';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgMacaddr8Builder<T extends ColumnBuilderBaseConfig<'string', 'PgMacaddr8'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgMacaddr8Builder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgMacaddr8');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgMacaddr8<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgMacaddr8<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgMacaddr8<T extends ColumnBaseConfig<'string', 'PgMacaddr8'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgMacaddr8';\n\n\tgetSQLType(): string {\n\t\treturn 'macaddr8';\n\t}\n}\n\nexport function macaddr8<TName extends string>(name: TName): PgMacaddr8BuilderInitial<TName> {\n\treturn new PgMacaddr8Builder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgNumericBuilderInitial<TName extends string> = PgNumericBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgNumeric';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgNumericBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgNumeric'>> extends PgColumnBuilder<\n\tT,\n\t{\n\t\tprecision: number | undefined;\n\t\tscale: number | undefined;\n\t}\n> {\n\tstatic readonly [entityKind]: string = 'PgNumericBuilder';\n\n\tconstructor(name: string, precision?: number, scale?: number) {\n\t\tsuper(name, 'string', 'PgNumeric');\n\t\tthis.config.precision = precision;\n\t\tthis.config.scale = scale;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgNumeric<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgNumeric<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgNumeric<T extends ColumnBaseConfig<'string', 'PgNumeric'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgNumeric';\n\n\treadonly precision: number | undefined;\n\treadonly scale: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgNumericBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.precision = config.precision;\n\t\tthis.scale = config.scale;\n\t}\n\n\tgetSQLType(): string {\n\t\tif (this.precision !== undefined && this.scale !== undefined) {\n\t\t\treturn `numeric(${this.precision}, ${this.scale})`;\n\t\t} else if (this.precision === undefined) {\n\t\t\treturn 'numeric';\n\t\t} else {\n\t\t\treturn `numeric(${this.precision})`;\n\t\t}\n\t}\n}\n\nexport function numeric<TName extends string>(\n\tname: TName,\n\tconfig?:\n\t\t| { precision: number; scale?: number }\n\t\t| { precision?: number; scale: number }\n\t\t| { precision: number; scale: number },\n): PgNumericBuilderInitial<TName> {\n\treturn new PgNumericBuilder(name, config?.precision, config?.scale);\n}\n\nexport const decimal = numeric;\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgPointTupleBuilderInitial<TName extends string> = PgPointTupleBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgPointTuple';\n\tdata: [number, number];\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgPointTupleBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgPointTuple'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgPointTupleBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgPointTuple');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointTuple<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointTuple<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointTuple<T extends ColumnBaseConfig<'array', 'PgPointTuple'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgPointTuple';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): [number, number] {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn [Number.parseFloat(x!), Number.parseFloat(y!)];\n\t\t}\n\t\treturn [value.x, value.y];\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `(${value[0]},${value[1]})`;\n\t}\n}\n\nexport type PgPointObjectBuilderInitial<TName extends string> = PgPointObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgPointObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgPointObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgPointObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgPointObjectBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgPointObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgPointObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgPointObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgPointObject<T extends ColumnBaseConfig<'json', 'PgPointObject'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgPointObject';\n\n\tgetSQLType(): string {\n\t\treturn 'point';\n\t}\n\n\toverride mapFromDriverValue(value: string | { x: number; y: number }): { x: number; y: number } {\n\t\tif (typeof value === 'string') {\n\t\t\tconst [x, y] = value.slice(1, -1).split(',');\n\t\t\treturn { x: Number.parseFloat(x!), y: Number.parseFloat(y!) };\n\t\t}\n\t\treturn value;\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `(${value.x},${value.y})`;\n\t}\n}\n\nexport interface PgPointConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n}\n\nexport function point<TName extends string, TMode extends PgPointConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgPointConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgPointObjectBuilderInitial<TName>\n\t: PgPointTupleBuilderInitial<TName>;\nexport function point(name: string, config?: PgPointConfig) {\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgPointTupleBuilder(name);\n\t}\n\treturn new PgPointObjectBuilder(name);\n}\n", "function hexToBytes(hex: string): Uint8Array {\n\tconst bytes: number[] = [];\n\tfor (let c = 0; c < hex.length; c += 2) {\n\t\tbytes.push(Number.parseInt(hex.slice(c, c + 2), 16));\n\t}\n\treturn new Uint8Array(bytes);\n}\n\nfunction bytesToFloat64(bytes: Uint8Array, offset: number): number {\n\tconst buffer = new ArrayBuffer(8);\n\tconst view = new DataView(buffer);\n\tfor (let i = 0; i < 8; i++) {\n\t\tview.setUint8(i, bytes[offset + i]!);\n\t}\n\treturn view.getFloat64(0, true);\n}\n\nexport function parseEWKB(hex: string): [number, number] {\n\tconst bytes = hexToBytes(hex);\n\n\tlet offset = 0;\n\n\t// Byte order: 1 is little-endian, 0 is big-endian\n\tconst byteOrder = bytes[offset];\n\toffset += 1;\n\n\tconst view = new DataView(bytes.buffer);\n\tconst geomType = view.getUint32(offset, byteOrder === 1);\n\toffset += 4;\n\n\tlet _srid: number | undefined;\n\tif (geomType & 0x20000000) { // SRID flag\n\t\t_srid = view.getUint32(offset, byteOrder === 1);\n\t\toffset += 4;\n\t}\n\n\tif ((geomType & 0xFFFF) === 1) {\n\t\tconst x = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\t\tconst y = bytesToFloat64(bytes, offset);\n\t\toffset += 8;\n\n\t\treturn [x, y];\n\t}\n\n\tthrow new Error('Unsupported geometry type');\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\n\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\nimport { parseEWKB } from './utils.ts';\n\nexport type PgGeometryBuilderInitial<TName extends string> = PgGeometryBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgGeometry';\n\tdata: [number, number];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgGeometryBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgGeometry'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgGeometryBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'array', 'PgGeometry');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometry<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometry<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometry<T extends ColumnBaseConfig<'array', 'PgGeometry'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgGeometry';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): [number, number] {\n\t\treturn parseEWKB(value);\n\t}\n\n\toverride mapToDriverValue(value: [number, number]): string {\n\t\treturn `point(${value[0]} ${value[1]})`;\n\t}\n}\n\nexport type PgGeometryObjectBuilderInitial<TName extends string> = PgGeometryObjectBuilder<{\n\tname: TName;\n\tdataType: 'json';\n\tcolumnType: 'PgGeometryObject';\n\tdata: { x: number; y: number };\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgGeometryObjectBuilder<T extends ColumnBuilderBaseConfig<'json', 'PgGeometryObject'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgGeometryObjectBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'json', 'PgGeometryObject');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgGeometryObject<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgGeometryObject<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgGeometryObject<T extends ColumnBaseConfig<'json', 'PgGeometryObject'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgGeometryObject';\n\n\tgetSQLType(): string {\n\t\treturn 'geometry(point)';\n\t}\n\n\toverride mapFromDriverValue(value: string): { x: number; y: number } {\n\t\tconst parsed = parseEWKB(value);\n\t\treturn { x: parsed[0], y: parsed[1] };\n\t}\n\n\toverride mapToDriverValue(value: { x: number; y: number }): string {\n\t\treturn `point(${value.x} ${value.y})`;\n\t}\n}\n\ninterface PgGeometryConfig<T extends 'tuple' | 'xy' = 'tuple' | 'xy'> {\n\tmode?: T;\n\ttype?: 'point' | (string & {});\n\tsrid?: number;\n}\n\nexport function geometry<TName extends string, TMode extends PgGeometryConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgGeometryConfig<TMode>,\n): Equal<TMode, 'xy'> extends true ? PgGeometryObjectBuilderInitial<TName>\n\t: PgGeometryBuilderInitial<TName>;\nexport function geometry(name: string, config?: PgGeometryConfig) {\n\tif (!config?.mode || config.mode === 'tuple') {\n\t\treturn new PgGeometryBuilder(name);\n\t}\n\treturn new PgGeometryObjectBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgRealBuilderInitial<TName extends string> = PgRealBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgReal';\n\tdata: number;\n\tdriverParam: string | number;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgRealBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgReal'>> extends PgColumnBuilder<\n\tT,\n\t{ length: number | undefined }\n> {\n\tstatic readonly [entityKind]: string = 'PgRealBuilder';\n\n\tconstructor(name: string, length?: number) {\n\t\tsuper(name, 'number', 'PgReal');\n\t\tthis.config.length = length;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgReal<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgReal<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgReal<T extends ColumnBaseConfig<'number', 'PgReal'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgReal';\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgRealBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t}\n\n\tgetSQLType(): string {\n\t\treturn 'real';\n\t}\n\n\toverride mapFromDriverValue = (value: string | number): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number.parseFloat(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function real<TName extends string>(name: TName): PgRealBuilderInitial<TName> {\n\treturn new PgRealBuilder(name);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t\tgenerated: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSerial'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgSerialBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'number', 'PgSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSerial<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSerial<T extends ColumnBaseConfig<'number', 'PgSerial'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'serial';\n\t}\n}\n\nexport function serial<TName extends string>(name: TName): PgSerialBuilderInitial<TName> {\n\treturn new PgSerialBuilder(name) as PgSerialBuilderInitial<TName>;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgIntColumnBaseBuilder } from './int.common.ts';\n\nexport type PgSmallIntBuilderInitial<TName extends string> = PgSmallIntBuilder<{\n\tname: TName;\n\tdataType: 'number';\n\tcolumnType: 'PgSmallInt';\n\tdata: number;\n\tdriverParam: number | string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgSmallIntBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallInt'>>\n\textends PgIntColumnBaseBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgSmallIntBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'number', 'PgSmallInt');\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallInt<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallInt<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgSmallInt<T extends ColumnBaseConfig<'number', 'PgSmallInt'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgSmallInt';\n\n\tgetSQLType(): string {\n\t\treturn 'smallint';\n\t}\n\n\toverride mapFromDriverValue = (value: number | string): number => {\n\t\tif (typeof value === 'string') {\n\t\t\treturn Number(value);\n\t\t}\n\t\treturn value;\n\t};\n}\n\nexport function smallint<TName extends string>(name: TName): PgSmallIntBuilderInitial<TName> {\n\treturn new PgSmallIntBuilder(name);\n}\n", "import type {\n\tColumnBuilderBaseConfig,\n\tColumnBuilderRuntimeConfig,\n\tHasDefault,\n\tMakeColumnConfig,\n\tNotNull,\n} from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgSmallSerialBuilderInitial<TName extends string> = NotNull<\n\tHasDefault<\n\t\tPgSmallSerialBuilder<{\n\t\t\tname: TName;\n\t\t\tdataType: 'number';\n\t\t\tcolumnType: 'PgSmallSerial';\n\t\t\tdata: number;\n\t\t\tdriverParam: number;\n\t\t\tenumValues: undefined;\n\t\t\tgenerated: undefined;\n\t\t}>\n\t>\n>;\n\nexport class PgSmallSerialBuilder<T extends ColumnBuilderBaseConfig<'number', 'PgSmallSerial'>>\n\textends PgColumnBuilder<T>\n{\n\tstatic readonly [entityKind]: string = 'PgSmallSerialBuilder';\n\n\tconstructor(name: string) {\n\t\tsuper(name, 'number', 'PgSmallSerial');\n\t\tthis.config.hasDefault = true;\n\t\tthis.config.notNull = true;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSmallSerial<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSmallSerial<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSmallSerial<T extends ColumnBaseConfig<'number', 'PgSmallSerial'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgSmallSerial';\n\n\tgetSQLType(): string {\n\t\treturn 'smallserial';\n\t}\n}\n\nexport function smallserial<TName extends string>(name: TName): PgSmallSerialBuilderInitial<TName> {\n\treturn new PgSmallSerialBuilder(name) as PgSmallSerialBuilderInitial<TName>;\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\ntype PgTextBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgTextBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgText';\n\tdata: TEnum[number];\n\tenumValues: TEnum;\n\tdriverParam: string;\n\tgenerated: undefined;\n}>;\n\nexport class PgTextBuilder<\n\tT extends ColumnBuilderBaseConfig<'string', 'PgText'>,\n> extends PgColumnBuilder<T, { enumValues: T['enumValues'] }> {\n\tstatic readonly [entityKind]: string = 'PgTextBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\tconfig: PgTextConfig<T['enumValues']>,\n\t) {\n\t\tsuper(name, 'string', 'PgText');\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgText<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgText<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgText<T extends ColumnBaseConfig<'string', 'PgText'>>\n\textends PgColumn<T, { enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'PgText';\n\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn 'text';\n\t}\n}\n\nexport interface PgTextConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tenum?: TEnum;\n}\n\nexport function text<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: PgTextConfig<T | Writable<T>> = {},\n): PgTextBuilderInitial<TName, Writable<T>> {\n\treturn new PgTextBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\nimport type { Precision } from './timestamp.ts';\n\nexport type PgTimeBuilderInitial<TName extends string> = PgTimeBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTime';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgTimeBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTime'>> extends PgDateColumnBaseBuilder<\n\tT,\n\t{ withTimezone: boolean; precision: number | undefined }\n> {\n\tstatic readonly [entityKind]: string = 'PgTimeBuilder';\n\n\tconstructor(\n\t\tname: T['name'],\n\t\treadonly withTimezone: boolean,\n\t\treadonly precision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTime');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTime<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTime<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTime<T extends ColumnBaseConfig<'string', 'PgTime'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgTime';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimeBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `time${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport interface TimeConfig {\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function time<TName extends string>(name: TName, config: TimeConfig = {}): PgTimeBuilderInitial<TName> {\n\treturn new PgTimeBuilder(name, config.withTimezone ?? false, config.precision);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Equal } from '~/utils.ts';\nimport { PgColumn } from './common.ts';\nimport { PgDateColumnBaseBuilder } from './date.common.ts';\n\nexport type PgTimestampBuilderInitial<TName extends string> = PgTimestampBuilder<{\n\tname: TName;\n\tdataType: 'date';\n\tcolumnType: 'PgTimestamp';\n\tdata: Date;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgTimestampBuilder<T extends ColumnBuilderBaseConfig<'date', 'PgTimestamp'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgTimestampBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'date', 'PgTimestamp');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestamp<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestamp<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgTimestamp<T extends ColumnBaseConfig<'date', 'PgTimestamp'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgTimestamp';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : ` (${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n\n\toverride mapFromDriverValue = (value: string): Date | null => {\n\t\treturn new Date(this.withTimezone ? value : value + '+0000');\n\t};\n\n\toverride mapToDriverValue = (value: Date): string => {\n\t\treturn value.toISOString();\n\t};\n}\n\nexport type PgTimestampStringBuilderInitial<TName extends string> = PgTimestampStringBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgTimestampString';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgTimestampStringBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgTimestampString'>>\n\textends PgDateColumnBaseBuilder<\n\t\tT,\n\t\t{ withTimezone: boolean; precision: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgTimestampStringBuilder';\n\n\tconstructor(\n\t\tname: string,\n\t\twithTimezone: boolean,\n\t\tprecision: number | undefined,\n\t) {\n\t\tsuper(name, 'string', 'PgTimestampString');\n\t\tthis.config.withTimezone = withTimezone;\n\t\tthis.config.precision = precision;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgTimestampString<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgTimestampString<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgTimestampString<T extends ColumnBaseConfig<'string', 'PgTimestampString'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgTimestampString';\n\n\treadonly withTimezone: boolean;\n\treadonly precision: number | undefined;\n\n\tconstructor(table: AnyPgTable<{ name: T['tableName'] }>, config: PgTimestampStringBuilder<T>['config']) {\n\t\tsuper(table, config);\n\t\tthis.withTimezone = config.withTimezone;\n\t\tthis.precision = config.precision;\n\t}\n\n\tgetSQLType(): string {\n\t\tconst precision = this.precision === undefined ? '' : `(${this.precision})`;\n\t\treturn `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;\n\t}\n}\n\nexport type Precision = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport interface PgTimestampConfig<TMode extends 'date' | 'string' = 'date' | 'string'> {\n\tmode?: TMode;\n\tprecision?: Precision;\n\twithTimezone?: boolean;\n}\n\nexport function timestamp<TName extends string, TMode extends PgTimestampConfig['mode'] & {}>(\n\tname: TName,\n\tconfig?: PgTimestampConfig<TMode>,\n): Equal<TMode, 'string'> extends true ? PgTimestampStringBuilderInitial<TName> : PgTimestampBuilderInitial<TName>;\nexport function timestamp(\n\tname: string,\n\tconfig: PgTimestampConfig = {},\n) {\n\tif (config.mode === 'string') {\n\t\treturn new PgTimestampStringBuilder(name, config.withTimezone ?? false, config.precision);\n\t}\n\treturn new PgTimestampBuilder(name, config.withTimezone ?? false, config.precision);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { sql } from '~/sql/sql.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgUUIDBuilderInitial<TName extends string> = PgUUIDBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgUUID';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgUUIDBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgUUID'>> extends PgColumnBuilder<T> {\n\tstatic readonly [entityKind]: string = 'PgUUIDBuilder';\n\n\tconstructor(name: T['name']) {\n\t\tsuper(name, 'string', 'PgUUID');\n\t}\n\n\t/**\n\t * Adds `default gen_random_uuid()` to the column definition.\n\t */\n\tdefaultRandom(): ReturnType<this['default']> {\n\t\treturn this.default(sql`gen_random_uuid()`) as ReturnType<this['default']>;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgUUID<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgUUID<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgUUID<T extends ColumnBaseConfig<'string', 'PgUUID'>> extends PgColumn<T> {\n\tstatic readonly [entityKind]: string = 'PgUUID';\n\n\tgetSQLType(): string {\n\t\treturn 'uuid';\n\t}\n}\n\nexport function uuid<TName extends string>(name: TName): PgUUIDBuilderInitial<TName> {\n\treturn new PgUUIDBuilder(name);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport type { Writable } from '~/utils.ts';\nimport { PgColumn, PgColumnBuilder } from './common.ts';\n\nexport type PgVarcharBuilderInitial<TName extends string, TEnum extends [string, ...string[]]> = PgVarcharBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgVarchar';\n\tdata: TEnum[number];\n\tdriverParam: string;\n\tenumValues: TEnum;\n\tgenerated: undefined;\n}>;\n\nexport class PgVarcharBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgVarchar'>> extends PgColumnBuilder<\n\tT,\n\t{ length: number | undefined; enumValues: T['enumValues'] }\n> {\n\tstatic readonly [entityKind]: string = 'PgVarcharBuilder';\n\n\tconstructor(name: string, config: PgVarcharConfig<T['enumValues']>) {\n\t\tsuper(name, 'string', 'PgVarchar');\n\t\tthis.config.length = config.length;\n\t\tthis.config.enumValues = config.enum;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVarchar<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgVarchar<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgVarchar<T extends ColumnBaseConfig<'string', 'PgVarchar'>>\n\textends PgColumn<T, { length: number | undefined; enumValues: T['enumValues'] }>\n{\n\tstatic readonly [entityKind]: string = 'PgVarchar';\n\n\treadonly length = this.config.length;\n\toverride readonly enumValues = this.config.enumValues;\n\n\tgetSQLType(): string {\n\t\treturn this.length === undefined ? `varchar` : `varchar(${this.length})`;\n\t}\n}\n\nexport interface PgVarcharConfig<TEnum extends readonly string[] | string[] | undefined> {\n\tlength?: number;\n\tenum?: TEnum;\n}\n\nexport function varchar<TName extends string, U extends string, T extends Readonly<[U, ...U[]]>>(\n\tname: TName,\n\tconfig: PgVarcharConfig<T | Writable<T>> = {},\n): PgVarcharBuilderInitial<TName, Writable<T>> {\n\treturn new PgVarcharBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgBinaryVectorBuilderInitial<TName extends string> = PgBinaryVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgBinaryVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgBinaryVectorBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgBinaryVector'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgBinaryVectorBuilder';\n\n\tconstructor(name: string, config: PgBinaryVectorConfig) {\n\t\tsuper(name, 'string', 'PgBinaryVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgBinaryVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgBinaryVector<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgBinaryVector<T extends ColumnBaseConfig<'string', 'PgBinaryVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic readonly [entityKind]: string = 'PgBinaryVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `bit(${this.dimensions})`;\n\t}\n}\n\nexport interface PgBinaryVectorConfig {\n\tdimensions: number;\n}\n\nexport function bit<TName extends string>(\n\tname: TName,\n\tconfig: PgBinaryVectorConfig,\n): PgBinaryVectorBuilderInitial<TName> {\n\treturn new PgBinaryVectorBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgHalfVectorBuilderInitial<TName extends string> = PgHalfVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgHalfVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgHalfVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgHalfVector'>> extends PgColumnBuilder<\n\tT,\n\t{ dimensions: number | undefined }\n> {\n\tstatic readonly [entityKind]: string = 'PgHalfVectorBuilder';\n\n\tconstructor(name: string, config: PgHalfVectorConfig) {\n\t\tsuper(name, 'array', 'PgHalfVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgHalfVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgHalfVector<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgHalfVector<T extends ColumnBaseConfig<'array', 'PgHalfVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic readonly [entityKind]: string = 'PgHalfVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `halfvec(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgHalfVectorConfig {\n\tdimensions: number;\n}\n\nexport function halfvec<TName extends string>(\n\tname: TName,\n\tconfig: PgHalfVectorConfig,\n): PgHalfVectorBuilderInitial<TName> {\n\treturn new PgHalfVectorBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgSparseVectorBuilderInitial<TName extends string> = PgSparseVectorBuilder<{\n\tname: TName;\n\tdataType: 'string';\n\tcolumnType: 'PgSparseVector';\n\tdata: string;\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgSparseVectorBuilder<T extends ColumnBuilderBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumnBuilder<\n\t\tT,\n\t\t{ dimensions: number | undefined }\n\t>\n{\n\tstatic readonly [entityKind]: string = 'PgSparseVectorBuilder';\n\n\tconstructor(name: string, config: PgSparseVectorConfig) {\n\t\tsuper(name, 'string', 'PgSparseVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgSparseVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgSparseVector<MakeColumnConfig<T, TTableName>>(\n\t\t\ttable,\n\t\t\tthis.config as ColumnBuilderRuntimeConfig<any, any>,\n\t\t);\n\t}\n}\n\nexport class PgSparseVector<T extends ColumnBaseConfig<'string', 'PgSparseVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic readonly [entityKind]: string = 'PgSparseVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `sparsevec(${this.dimensions})`;\n\t}\n}\n\nexport interface PgSparseVectorConfig {\n\tdimensions: number;\n}\n\nexport function sparsevec<TName extends string>(\n\tname: TName,\n\tconfig: PgSparseVectorConfig,\n): PgSparseVectorBuilderInitial<TName> {\n\treturn new PgSparseVectorBuilder(name, config);\n}\n", "import type { ColumnBuilderBaseConfig, ColumnBuilderRuntimeConfig, MakeColumnConfig } from '~/column-builder.ts';\nimport type { ColumnBaseConfig } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { AnyPgTable } from '~/pg-core/table.ts';\nimport { PgColumn, PgColumnBuilder } from '../common.ts';\n\nexport type PgVectorBuilderInitial<TName extends string> = PgVectorBuilder<{\n\tname: TName;\n\tdataType: 'array';\n\tcolumnType: 'PgVector';\n\tdata: number[];\n\tdriverParam: string;\n\tenumValues: undefined;\n\tgenerated: undefined;\n}>;\n\nexport class PgVectorBuilder<T extends ColumnBuilderBaseConfig<'array', 'PgVector'>> extends PgColumnBuilder<\n\tT,\n\t{ dimensions: number | undefined }\n> {\n\tstatic readonly [entityKind]: string = 'PgVectorBuilder';\n\n\tconstructor(name: string, config: PgVectorConfig) {\n\t\tsuper(name, 'array', 'PgVector');\n\t\tthis.config.dimensions = config.dimensions;\n\t}\n\n\t/** @internal */\n\toverride build<TTableName extends string>(\n\t\ttable: AnyPgTable<{ name: TTableName }>,\n\t): PgVector<MakeColumnConfig<T, TTableName>> {\n\t\treturn new PgVector<MakeColumnConfig<T, TTableName>>(table, this.config as ColumnBuilderRuntimeConfig<any, any>);\n\t}\n}\n\nexport class PgVector<T extends ColumnBaseConfig<'array', 'PgVector'>>\n\textends PgColumn<T, { dimensions: number | undefined }>\n{\n\tstatic readonly [entityKind]: string = 'PgVector';\n\n\treadonly dimensions = this.config.dimensions;\n\n\tgetSQLType(): string {\n\t\treturn `vector(${this.dimensions})`;\n\t}\n\n\toverride mapToDriverValue(value: unknown): unknown {\n\t\treturn JSON.stringify(value);\n\t}\n\n\toverride mapFromDriverValue(value: string): unknown {\n\t\treturn value\n\t\t\t.slice(1, -1)\n\t\t\t.split(',')\n\t\t\t.map((v) => Number.parseFloat(v));\n\t}\n}\n\nexport interface PgVectorConfig {\n\tdimensions: number;\n}\n\nexport function vector<TName extends string>(\n\tname: TName,\n\tconfig: PgVectorConfig,\n): PgVectorBuilderInitial<TName> {\n\treturn new PgVectorBuilder(name, config);\n}\n", "export * from './bigint.ts';\nexport * from './bigserial.ts';\nexport * from './boolean.ts';\nexport * from './char.ts';\nexport * from './cidr.ts';\nexport * from './common.ts';\nexport * from './custom.ts';\nexport * from './date.ts';\nexport * from './double-precision.ts';\nexport * from './enum.ts';\nexport * from './inet.ts';\nexport * from './integer.ts';\nexport * from './interval.ts';\nexport * from './json.ts';\nexport * from './jsonb.ts';\nexport * from './line.ts';\nexport * from './macaddr.ts';\nexport * from './macaddr8.ts';\nexport * from './numeric.ts';\nexport * from './point.ts';\nexport * from './postgis_extension/geometry.ts';\nexport * from './real.ts';\nexport * from './serial.ts';\nexport * from './smallint.ts';\nexport * from './smallserial.ts';\nexport * from './text.ts';\nexport * from './time.ts';\nexport * from './timestamp.ts';\nexport * from './uuid.ts';\nexport * from './varchar.ts';\nexport * from './vector_extension/bit.ts';\nexport * from './vector_extension/halfvec.ts';\nexport * from './vector_extension/sparsevec.ts';\nexport * from './vector_extension/vector.ts';\n", "import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { orderSelectedFields } from '~/utils.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\n\nexport type PgDeleteWithout<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T\n\t: Omit<\n\t\tPgDeleteBase<\n\t\t\tT['_']['table'],\n\t\t\tT['_']['queryResult'],\n\t\t\tT['_']['returning'],\n\t\t\tTDynamic,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>,\n\t\tT['_']['excludedMethods'] | K\n\t>;\n\nexport type PgDelete<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgDeleteBase<TTable, TQueryResult, TReturning, true, never>;\n\nexport interface PgDeleteConfig {\n\twhere?: SQL | undefined;\n\ttable: PgTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgDeleteReturningAll<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeleteReturning<\n\tT extends AnyPgDeleteBase,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgDeleteWithout<\n\tPgDeleteBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgDeletePrepare<T extends AnyPgDeleteBase> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgDeleteDynamic<T extends AnyPgDeleteBase> = PgDelete<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgDeleteBase = PgDeleteBase<any, any, any, any, any>;\n\nexport interface PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\tdialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgDeleteBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'PgDelete';\n\n\tprivate config: PgDeleteConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, withList };\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will delete only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be deleted.\n\t *\n\t * ```ts\n\t * // Delete all cars with green color\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.delete(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Delete all BMW cars with a green color\n\t * await db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Delete all cars with the green or blue color\n\t * await db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgDeleteWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the deleted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete#delete-with-return}\n\t *\n\t * @example\n\t * ```ts\n\t * // Delete all cars with the green color and return all fields\n\t * const deletedCars: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Delete all cars with the green color and return only their id and brand fields\n\t * const deletedCarsIdsAndBrands: { id: number, brand: string }[] = await db.delete(cars)\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgDeleteReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgDeleteReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgDeleteReturning<this, TDynamic, any> {\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildDeleteQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgDeletePrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgDeletePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues);\n\t\t});\n\t};\n\n\t$dynamic(): PgDeleteDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { IndexColumn } from '~/pg-core/indexes.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Param, SQL, sql } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { mapUpdateSet, orderSelectedFields } from '~/utils.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport type { SelectedFieldsFlat, SelectedFieldsOrdered } from './select.types.ts';\nimport type { PgUpdateSetSource } from './update.ts';\n\nexport interface PgInsertConfig<TTable extends PgTable = PgTable> {\n\ttable: TTable;\n\tvalues: Record<string, Param | SQL>[];\n\twithList?: Subquery[];\n\tonConflict?: SQL;\n\treturning?: SelectedFieldsOrdered;\n}\n\nexport type PgInsertValue<TTable extends PgTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]: TTable['$inferInsert'][Key] | SQL | Placeholder;\n\t}\n\t& {};\n\nexport class PgInsertBuilder<TTable extends PgTable, TQueryResult extends PgQueryResultHKT> {\n\tstatic readonly [entityKind]: string = 'PgInsertBuilder';\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tvalues(value: PgInsertValue<TTable>): PgInsertBase<TTable, TQueryResult>;\n\tvalues(values: PgInsertValue<TTable>[]): PgInsertBase<TTable, TQueryResult>;\n\tvalues(values: PgInsertValue<TTable> | PgInsertValue<TTable>[]): PgInsertBase<TTable, TQueryResult> {\n\t\tvalues = Array.isArray(values) ? values : [values];\n\t\tif (values.length === 0) {\n\t\t\tthrow new Error('values() must be called with at least one value');\n\t\t}\n\t\tconst mappedValues = values.map((entry) => {\n\t\t\tconst result: Record<string, Param | SQL> = {};\n\t\t\tconst cols = this.table[Table.Symbol.Columns];\n\t\t\tfor (const colKey of Object.keys(entry)) {\n\t\t\t\tconst colValue = entry[colKey as keyof typeof entry];\n\t\t\t\tresult[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\n\t\treturn new PgInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);\n\t}\n}\n\nexport type PgInsertWithout<T extends AnyPgInsert, TDynamic extends boolean, K extends keyof T & string> =\n\tTDynamic extends true ? T\n\t\t: Omit<\n\t\t\tPgInsertBase<\n\t\t\t\tT['_']['table'],\n\t\t\t\tT['_']['queryResult'],\n\t\t\t\tT['_']['returning'],\n\t\t\t\tTDynamic,\n\t\t\t\tT['_']['excludedMethods'] | K\n\t\t\t>,\n\t\t\tT['_']['excludedMethods'] | K\n\t\t>;\n\nexport type PgInsertReturning<\n\tT extends AnyPgInsert,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFieldsFlat,\n> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tSelectResultFields<TSelectedFields>,\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport type PgInsertReturningAll<T extends AnyPgInsert, TDynamic extends boolean> = PgInsertBase<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['table']['$inferSelect'],\n\tTDynamic,\n\tT['_']['excludedMethods']\n>;\n\nexport interface PgInsertOnConflictDoUpdateConfig<T extends AnyPgInsert> {\n\ttarget: IndexColumn | IndexColumn[];\n\t/** @deprecated use either `targetWhere` or `setWhere` */\n\twhere?: SQL;\n\t// TODO: add tests for targetWhere and setWhere\n\ttargetWhere?: SQL;\n\tsetWhere?: SQL;\n\tset: PgUpdateSetSource<T['_']['table']>;\n}\n\nexport type PgInsertPrepare<T extends AnyPgInsert> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgInsertDynamic<T extends AnyPgInsert> = PgInsert<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['returning']\n>;\n\nexport type AnyPgInsert = PgInsertBase<any, any, any, any, any>;\n\nexport type PgInsert<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgInsertBase<TTable, TQueryResult, TReturning, true, never>;\n\nexport interface PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgInsertBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'PgInsert';\n\n\tprivate config: PgInsertConfig<TTable>;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tvalues: PgInsertConfig['values'],\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { table, values, withList };\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the inserted rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#insert-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and return all fields\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t *\n\t * // Insert one row and return only the id\n\t * const insertedCarId: { id: number }[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning({ id: cars.id });\n\t * ```\n\t */\n\treturning(): PgInsertWithout<PgInsertReturningAll<this, TDynamic>, TDynamic, 'returning'>;\n\treturning<TSelectedFields extends SelectedFieldsFlat>(\n\t\tfields: TSelectedFields,\n\t): PgInsertWithout<PgInsertReturning<this, TDynamic, TSelectedFields>, TDynamic, 'returning'>;\n\treturning(\n\t\tfields: SelectedFieldsFlat = this.config.table[Table.Symbol.Columns],\n\t): PgInsertWithout<AnyPgInsert, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do nothing` clause to the query.\n\t *\n\t * Calling this method simply avoids inserting a row as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}\n\t *\n\t * @param config The `target` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Insert one row and cancel the insert if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing();\n\t *\n\t * // Explicitly specify conflict target\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoNothing({ target: cars.id });\n\t * ```\n\t */\n\tonConflictDoNothing(\n\t\tconfig: { target?: IndexColumn | IndexColumn[]; where?: SQL } = {},\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.target === undefined) {\n\t\t\tthis.config.onConflict = sql`do nothing`;\n\t\t} else {\n\t\t\tlet targetColumn = '';\n\t\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t\t? config.target.map((it) => this.dialect.escapeName(it.name)).join(',')\n\t\t\t\t: this.dialect.escapeName(config.target.name);\n\n\t\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\t\tthis.config.onConflict = sql`(${sql.raw(targetColumn)})${whereSql} do nothing`;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `on conflict do update` clause to the query.\n\t *\n\t * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}\n\t *\n\t * @param config The `target`, `set` and `where` clauses.\n\t *\n\t * @example\n\t * ```ts\n\t * // Update the row if there's a conflict\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'Porsche' }\n\t *   });\n\t *\n\t * // Upsert with 'where' clause\n\t * await db.insert(cars)\n\t *   .values({ id: 1, brand: 'BMW' })\n\t *   .onConflictDoUpdate({\n\t *     target: cars.id,\n\t *     set: { brand: 'newBMW' },\n\t *     targetWhere: sql`${cars.createdAt} > '2023-01-01'::date`,\n\t *   });\n\t * ```\n\t */\n\tonConflictDoUpdate(\n\t\tconfig: PgInsertOnConflictDoUpdateConfig<this>,\n\t): PgInsertWithout<this, TDynamic, 'onConflictDoNothing' | 'onConflictDoUpdate'> {\n\t\tif (config.where && (config.targetWhere || config.setWhere)) {\n\t\t\tthrow new Error(\n\t\t\t\t'You cannot use both \"where\" and \"targetWhere\"/\"setWhere\" at the same time - \"where\" is deprecated, use \"targetWhere\" or \"setWhere\" instead.',\n\t\t\t);\n\t\t}\n\t\tconst whereSql = config.where ? sql` where ${config.where}` : undefined;\n\t\tconst targetWhereSql = config.targetWhere ? sql` where ${config.targetWhere}` : undefined;\n\t\tconst setWhereSql = config.setWhere ? sql` where ${config.setWhere}` : undefined;\n\t\tconst setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config.set));\n\t\tlet targetColumn = '';\n\t\ttargetColumn = Array.isArray(config.target)\n\t\t\t? config.target.map((it) => this.dialect.escapeName(it.name)).join(',')\n\t\t\t: this.dialect.escapeName(config.target.name);\n\t\tthis.config.onConflict = sql`(${\n\t\t\tsql.raw(targetColumn)\n\t\t})${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`;\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildInsertQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgInsertPrepare<this> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & {\n\t\t\t\t\texecute: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t\t\t\t}\n\t\t\t>(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgInsertPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues);\n\t\t});\n\t};\n\n\t$dynamic(): PgInsertDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { type ColumnsSelection, View } from '~/sql/sql.ts';\n\nexport abstract class PgViewBase<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends View<TName, TExisting, TSelectedFields> {\n\tstatic readonly [entityKind]: string = 'PgViewBase';\n\n\tdeclare readonly _: View<TName, TExisting, TSelectedFields>['_'] & {\n\t\treadonly viewBrand: 'PgViewBase';\n\t};\n}\n", "import { aliasedTable, aliasedTableColumn, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias } from '~/alias.ts';\nimport { Column } from '~/column.ts';\nimport { entityKind, is } from '~/entity.ts';\nimport { DrizzleError } from '~/errors.ts';\nimport type { MigrationConfig, MigrationMeta } from '~/migrator.ts';\nimport {\n\tPgColumn,\n\tPgDate,\n\tPgDateString,\n\tPgJson,\n\tPgJsonb,\n\tPgNumeric,\n\tPgTime,\n\tPgTimestamp,\n\tPgTimestampString,\n\tPgUUID,\n} from '~/pg-core/columns/index.ts';\nimport type {\n\tPgDeleteConfig,\n\tPgInsertConfig,\n\tPgSelectJoinConfig,\n\tPgUpdateConfig,\n} from '~/pg-core/query-builders/index.ts';\nimport type { PgSelectConfig, SelectedFieldsOrdered } from '~/pg-core/query-builders/select.types.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport {\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tgetOperators,\n\tgetOrderByOperators,\n\tMany,\n\tnormalizeRelation,\n\tOne,\n\ttype Relation,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport { and, eq, View } from '~/sql/index.ts';\nimport {\n\ttype DriverValueEncoder,\n\ttype Name,\n\tParam,\n\ttype QueryTypingsValue,\n\ttype QueryWithTypings,\n\tSQL,\n\tsql,\n\ttype SQLChunk,\n} from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { getTableName, getTableUniqueName, Table } from '~/table.ts';\nimport { orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type { PgSession } from './session.ts';\nimport { PgViewBase } from './view-base.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport class PgDialect {\n\tstatic readonly [entityKind]: string = 'PgDialect';\n\n\tasync migrate(migrations: MigrationMeta[], session: PgSession, config: string | MigrationConfig): Promise<void> {\n\t\tconst migrationsTable = typeof config === 'string'\n\t\t\t? '__drizzle_migrations'\n\t\t\t: config.migrationsTable ?? '__drizzle_migrations';\n\t\tconst migrationsSchema = typeof config === 'string' ? 'drizzle' : config.migrationsSchema ?? 'drizzle';\n\t\tconst migrationTableCreate = sql`\n\t\t\tCREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsSchema)}.${sql.identifier(migrationsTable)} (\n\t\t\t\tid SERIAL PRIMARY KEY,\n\t\t\t\thash text NOT NULL,\n\t\t\t\tcreated_at bigint\n\t\t\t)\n\t\t`;\n\t\tawait session.execute(sql`CREATE SCHEMA IF NOT EXISTS ${sql.identifier(migrationsSchema)}`);\n\t\tawait session.execute(migrationTableCreate);\n\n\t\tconst dbMigrations = await session.all<{ id: number; hash: string; created_at: string }>(\n\t\t\tsql`select id, hash, created_at from ${sql.identifier(migrationsSchema)}.${\n\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t} order by created_at desc limit 1`,\n\t\t);\n\n\t\tconst lastDbMigration = dbMigrations[0];\n\t\tawait session.transaction(async (tx) => {\n\t\t\tfor await (const migration of migrations) {\n\t\t\t\tif (\n\t\t\t\t\t!lastDbMigration\n\t\t\t\t\t|| Number(lastDbMigration.created_at) < migration.folderMillis\n\t\t\t\t) {\n\t\t\t\t\tfor (const stmt of migration.sql) {\n\t\t\t\t\t\tawait tx.execute(sql.raw(stmt));\n\t\t\t\t\t}\n\t\t\t\t\tawait tx.execute(\n\t\t\t\t\t\tsql`insert into ${sql.identifier(migrationsSchema)}.${\n\t\t\t\t\t\t\tsql.identifier(migrationsTable)\n\t\t\t\t\t\t} (\"hash\", \"created_at\") values(${migration.hash}, ${migration.folderMillis})`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tescapeName(name: string): string {\n\t\treturn `\"${name}\"`;\n\t}\n\n\tescapeParam(num: number): string {\n\t\treturn `$${num + 1}`;\n\t}\n\n\tescapeString(str: string): string {\n\t\treturn `'${str.replace(/'/g, \"''\")}'`;\n\t}\n\n\tprivate buildWithCTE(queries: Subquery[] | undefined): SQL | undefined {\n\t\tif (!queries?.length) return undefined;\n\n\t\tconst withSqlChunks = [sql`with `];\n\t\tfor (const [i, w] of queries.entries()) {\n\t\t\twithSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);\n\t\t\tif (i < queries.length - 1) {\n\t\t\t\twithSqlChunks.push(sql`, `);\n\t\t\t}\n\t\t}\n\t\twithSqlChunks.push(sql` `);\n\t\treturn sql.join(withSqlChunks);\n\t}\n\n\tbuildDeleteQuery({ table, where, returning, withList }: PgDeleteConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}delete from ${table}${whereSql}${returningSql}`;\n\t}\n\n\tbuildUpdateSet(table: PgTable, set: UpdateSet): SQL {\n\t\tconst tableColumns = table[Table.Symbol.Columns];\n\n\t\tconst columnNames = Object.keys(tableColumns).filter((colName) =>\n\t\t\tset[colName] !== undefined || tableColumns[colName]?.onUpdateFn !== undefined\n\t\t);\n\n\t\tconst setSize = columnNames.length;\n\t\treturn sql.join(columnNames.flatMap((colName, i) => {\n\t\t\tconst col = tableColumns[colName]!;\n\n\t\t\tconst value = set[colName] ?? sql.param(col.onUpdateFn!(), col);\n\t\t\tconst res = sql`${sql.identifier(col.name)} = ${value}`;\n\n\t\t\tif (i < setSize - 1) {\n\t\t\t\treturn [res, sql.raw(', ')];\n\t\t\t}\n\t\t\treturn [res];\n\t\t}));\n\t}\n\n\tbuildUpdateQuery({ table, set, where, returning, withList }: PgUpdateConfig): SQL {\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst setSql = this.buildUpdateSet(table, set);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\treturn sql`${withSql}update ${table} set ${setSql}${whereSql}${returningSql}`;\n\t}\n\n\t/**\n\t * Builds selection SQL with provided fields/expressions\n\t *\n\t * Examples:\n\t *\n\t * `select <selection> from`\n\t *\n\t * `insert ... returning <selection>`\n\t *\n\t * If `isSingleTable` is true, then columns won't be prefixed with table name\n\t */\n\tprivate buildSelection(\n\t\tfields: SelectedFieldsOrdered,\n\t\t{ isSingleTable = false }: { isSingleTable?: boolean } = {},\n\t): SQL {\n\t\tconst columnsLen = fields.length;\n\n\t\tconst chunks = fields\n\t\t\t.flatMap(({ field }, i) => {\n\t\t\t\tconst chunk: SQLChunk[] = [];\n\n\t\t\t\tif (is(field, SQL.Aliased) && field.isSelectionField) {\n\t\t\t\t\tchunk.push(sql.identifier(field.fieldAlias));\n\t\t\t\t} else if (is(field, SQL.Aliased) || is(field, SQL)) {\n\t\t\t\t\tconst query = is(field, SQL.Aliased) ? field.sql : field;\n\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(\n\t\t\t\t\t\t\tnew SQL(\n\t\t\t\t\t\t\t\tquery.queryChunks.map((c) => {\n\t\t\t\t\t\t\t\t\tif (is(c, PgColumn)) {\n\t\t\t\t\t\t\t\t\t\treturn sql.identifier(c.name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn c;\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(query);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is(field, SQL.Aliased)) {\n\t\t\t\t\t\tchunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);\n\t\t\t\t\t}\n\t\t\t\t} else if (is(field, Column)) {\n\t\t\t\t\tif (isSingleTable) {\n\t\t\t\t\t\tchunk.push(sql.identifier(field.name));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchunk.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (i < columnsLen - 1) {\n\t\t\t\t\tchunk.push(sql`, `);\n\t\t\t\t}\n\n\t\t\t\treturn chunk;\n\t\t\t});\n\n\t\treturn sql.join(chunks);\n\t}\n\n\tbuildSelectQuery(\n\t\t{\n\t\t\twithList,\n\t\t\tfields,\n\t\t\tfieldsFlat,\n\t\t\twhere,\n\t\t\thaving,\n\t\t\ttable,\n\t\t\tjoins,\n\t\t\torderBy,\n\t\t\tgroupBy,\n\t\t\tlimit,\n\t\t\toffset,\n\t\t\tlockingClause,\n\t\t\tdistinct,\n\t\t\tsetOperators,\n\t\t}: PgSelectConfig,\n\t): SQL {\n\t\tconst fieldsList = fieldsFlat ?? orderSelectedFields<PgColumn>(fields);\n\t\tfor (const f of fieldsList) {\n\t\t\tif (\n\t\t\t\tis(f.field, Column)\n\t\t\t\t&& getTableName(f.field.table)\n\t\t\t\t\t!== (is(table, Subquery)\n\t\t\t\t\t\t? table._.alias\n\t\t\t\t\t\t: is(table, PgViewBase)\n\t\t\t\t\t\t? table[ViewBaseConfig].name\n\t\t\t\t\t\t: is(table, SQL)\n\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t: getTableName(table))\n\t\t\t\t&& !((table) =>\n\t\t\t\t\tjoins?.some(({ alias }) =>\n\t\t\t\t\t\talias === (table[Table.Symbol.IsAlias] ? getTableName(table) : table[Table.Symbol.BaseName])\n\t\t\t\t\t))(f.field.table)\n\t\t\t) {\n\t\t\t\tconst tableName = getTableName(f.field.table);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Your \"${\n\t\t\t\t\t\tf.path.join('->')\n\t\t\t\t\t}\" field references a column \"${tableName}\".\"${f.field.name}\", but the table \"${tableName}\" is not part of the query! Did you forget to join it?`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst isSingleTable = !joins || joins.length === 0;\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tlet distinctSql: SQL | undefined;\n\t\tif (distinct) {\n\t\t\tdistinctSql = distinct === true ? sql` distinct` : sql` distinct on (${sql.join(distinct.on, sql`, `)})`;\n\t\t}\n\n\t\tconst selection = this.buildSelection(fieldsList, { isSingleTable });\n\n\t\tconst tableSql = (() => {\n\t\t\tif (is(table, Table) && table[Table.Symbol.OriginalName] !== table[Table.Symbol.Name]) {\n\t\t\t\tlet fullName = sql`${sql.identifier(table[Table.Symbol.OriginalName])}`;\n\t\t\t\tif (table[Table.Symbol.Schema]) {\n\t\t\t\t\tfullName = sql`${sql.identifier(table[Table.Symbol.Schema]!)}.${fullName}`;\n\t\t\t\t}\n\t\t\t\treturn sql`${fullName} ${sql.identifier(table[Table.Symbol.Name])}`;\n\t\t\t}\n\n\t\t\treturn table;\n\t\t})();\n\n\t\tconst joinsArray: SQL[] = [];\n\n\t\tif (joins) {\n\t\t\tfor (const [index, joinMeta] of joins.entries()) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t\tconst table = joinMeta.table;\n\t\t\t\tconst lateralSql = joinMeta.lateral ? sql` lateral` : undefined;\n\n\t\t\t\tif (is(table, PgTable)) {\n\t\t\t\t\tconst tableName = table[PgTable.Symbol.Name];\n\t\t\t\t\tconst tableSchema = table[PgTable.Symbol.Schema];\n\t\t\t\t\tconst origTableName = table[PgTable.Symbol.OriginalName];\n\t\t\t\t\tconst alias = tableName === origTableName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\t\ttableSchema ? sql`${sql.identifier(tableSchema)}.` : undefined\n\t\t\t\t\t\t}${sql.identifier(origTableName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else if (is(table, View)) {\n\t\t\t\t\tconst viewName = table[ViewBaseConfig].name;\n\t\t\t\t\tconst viewSchema = table[ViewBaseConfig].schema;\n\t\t\t\t\tconst origViewName = table[ViewBaseConfig].originalName;\n\t\t\t\t\tconst alias = viewName === origViewName ? undefined : joinMeta.alias;\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${\n\t\t\t\t\t\t\tviewSchema ? sql`${sql.identifier(viewSchema)}.` : undefined\n\t\t\t\t\t\t}${sql.identifier(origViewName)}${alias && sql` ${sql.identifier(alias)}`} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tjoinsArray.push(\n\t\t\t\t\t\tsql`${sql.raw(joinMeta.joinType)} join${lateralSql} ${table} on ${joinMeta.on}`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (index < joins.length - 1) {\n\t\t\t\t\tjoinsArray.push(sql` `);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst joinsSql = sql.join(joinsArray);\n\n\t\tconst whereSql = where ? sql` where ${where}` : undefined;\n\n\t\tconst havingSql = having ? sql` having ${having}` : undefined;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\torderBySql = sql` order by ${sql.join(orderBy, sql`, `)}`;\n\t\t}\n\n\t\tlet groupBySql;\n\t\tif (groupBy && groupBy.length > 0) {\n\t\t\tgroupBySql = sql` group by ${sql.join(groupBy, sql`, `)}`;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\tconst lockingClauseSql = sql.empty();\n\t\tif (lockingClause) {\n\t\t\tconst clauseSql = sql` for ${sql.raw(lockingClause.strength)}`;\n\t\t\tif (lockingClause.config.of) {\n\t\t\t\tclauseSql.append(\n\t\t\t\t\tsql` of ${\n\t\t\t\t\t\tsql.join(\n\t\t\t\t\t\t\tArray.isArray(lockingClause.config.of) ? lockingClause.config.of : [lockingClause.config.of],\n\t\t\t\t\t\t\tsql`, `,\n\t\t\t\t\t\t)\n\t\t\t\t\t}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (lockingClause.config.noWait) {\n\t\t\t\tclauseSql.append(sql` no wait`);\n\t\t\t} else if (lockingClause.config.skipLocked) {\n\t\t\t\tclauseSql.append(sql` skip locked`);\n\t\t\t}\n\t\t\tlockingClauseSql.append(clauseSql);\n\t\t}\n\t\tconst finalQuery =\n\t\t\tsql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}${lockingClauseSql}`;\n\n\t\tif (setOperators.length > 0) {\n\t\t\treturn this.buildSetOperations(finalQuery, setOperators);\n\t\t}\n\n\t\treturn finalQuery;\n\t}\n\n\tbuildSetOperations(leftSelect: SQL, setOperators: PgSelectConfig['setOperators']): SQL {\n\t\tconst [setOperator, ...rest] = setOperators;\n\n\t\tif (!setOperator) {\n\t\t\tthrow new Error('Cannot pass undefined values to any set operator');\n\t\t}\n\n\t\tif (rest.length === 0) {\n\t\t\treturn this.buildSetOperationQuery({ leftSelect, setOperator });\n\t\t}\n\n\t\t// Some recursive magic here\n\t\treturn this.buildSetOperations(\n\t\t\tthis.buildSetOperationQuery({ leftSelect, setOperator }),\n\t\t\trest,\n\t\t);\n\t}\n\n\tbuildSetOperationQuery({\n\t\tleftSelect,\n\t\tsetOperator: { type, isAll, rightSelect, limit, orderBy, offset },\n\t}: { leftSelect: SQL; setOperator: PgSelectConfig['setOperators'][number] }): SQL {\n\t\tconst leftChunk = sql`(${leftSelect.getSQL()}) `;\n\t\tconst rightChunk = sql`(${rightSelect.getSQL()})`;\n\n\t\tlet orderBySql;\n\t\tif (orderBy && orderBy.length > 0) {\n\t\t\tconst orderByValues: (SQL<unknown> | Name)[] = [];\n\n\t\t\t// The next bit is necessary because the sql operator replaces ${table.column} with `table`.`column`\n\t\t\t// which is invalid Sql syntax, Table from one of the SELECTs cannot be used in global ORDER clause\n\t\t\tfor (const singleOrderBy of orderBy) {\n\t\t\t\tif (is(singleOrderBy, PgColumn)) {\n\t\t\t\t\torderByValues.push(sql.identifier(singleOrderBy.name));\n\t\t\t\t} else if (is(singleOrderBy, SQL)) {\n\t\t\t\t\tfor (let i = 0; i < singleOrderBy.queryChunks.length; i++) {\n\t\t\t\t\t\tconst chunk = singleOrderBy.queryChunks[i];\n\n\t\t\t\t\t\tif (is(chunk, PgColumn)) {\n\t\t\t\t\t\t\tsingleOrderBy.queryChunks[i] = sql.identifier(chunk.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t} else {\n\t\t\t\t\torderByValues.push(sql`${singleOrderBy}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torderBySql = sql` order by ${sql.join(orderByValues, sql`, `)} `;\n\t\t}\n\n\t\tconst limitSql = typeof limit === 'object' || (typeof limit === 'number' && limit >= 0)\n\t\t\t? sql` limit ${limit}`\n\t\t\t: undefined;\n\n\t\tconst operatorChunk = sql.raw(`${type} ${isAll ? 'all ' : ''}`);\n\n\t\tconst offsetSql = offset ? sql` offset ${offset}` : undefined;\n\n\t\treturn sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;\n\t}\n\n\tbuildInsertQuery({ table, values, onConflict, returning, withList }: PgInsertConfig): SQL {\n\t\tconst valuesSqlList: ((SQLChunk | SQL)[] | SQL)[] = [];\n\t\tconst columns: Record<string, PgColumn> = table[Table.Symbol.Columns];\n\n\t\tconst colEntries: [string, PgColumn][] = Object.entries(columns).filter(([_, col]) => !col.shouldDisableInsert());\n\n\t\tconst insertOrder = colEntries.map(([, column]) => sql.identifier(column.name));\n\n\t\tfor (const [valueIndex, value] of values.entries()) {\n\t\t\tconst valueList: (SQLChunk | SQL)[] = [];\n\t\t\tfor (const [fieldName, col] of colEntries) {\n\t\t\t\tconst colValue = value[fieldName];\n\t\t\t\tif (colValue === undefined || (is(colValue, Param) && colValue.value === undefined)) {\n\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\tif (col.defaultFn !== undefined) {\n\t\t\t\t\t\tconst defaultFnResult = col.defaultFn();\n\t\t\t\t\t\tconst defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);\n\t\t\t\t\t\tvalueList.push(defaultValue);\n\t\t\t\t\t\t// eslint-disable-next-line unicorn/no-negated-condition\n\t\t\t\t\t} else if (!col.default && col.onUpdateFn !== undefined) {\n\t\t\t\t\t\tconst onUpdateFnResult = col.onUpdateFn();\n\t\t\t\t\t\tconst newValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);\n\t\t\t\t\t\tvalueList.push(newValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalueList.push(sql`default`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalueList.push(colValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvaluesSqlList.push(valueList);\n\t\t\tif (valueIndex < values.length - 1) {\n\t\t\t\tvaluesSqlList.push(sql`, `);\n\t\t\t}\n\t\t}\n\n\t\tconst withSql = this.buildWithCTE(withList);\n\n\t\tconst valuesSql = sql.join(valuesSqlList);\n\n\t\tconst returningSql = returning\n\t\t\t? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}`\n\t\t\t: undefined;\n\n\t\tconst onConflictSql = onConflict ? sql` on conflict ${onConflict}` : undefined;\n\n\t\treturn sql`${withSql}insert into ${table} ${insertOrder} values ${valuesSql}${onConflictSql}${returningSql}`;\n\t}\n\n\tbuildRefreshMaterializedViewQuery(\n\t\t{ view, concurrently, withNoData }: { view: PgMaterializedView; concurrently?: boolean; withNoData?: boolean },\n\t): SQL {\n\t\tconst concurrentlySql = concurrently ? sql` concurrently` : undefined;\n\t\tconst withNoDataSql = withNoData ? sql` with no data` : undefined;\n\n\t\treturn sql`refresh materialized view${concurrentlySql} ${view}${withNoDataSql}`;\n\t}\n\n\tprepareTyping(encoder: DriverValueEncoder<unknown, unknown>): QueryTypingsValue {\n\t\tif (is(encoder, PgJsonb) || is(encoder, PgJson)) {\n\t\t\treturn 'json';\n\t\t} else if (is(encoder, PgNumeric)) {\n\t\t\treturn 'decimal';\n\t\t} else if (is(encoder, PgTime)) {\n\t\t\treturn 'time';\n\t\t} else if (is(encoder, PgTimestamp) || is(encoder, PgTimestampString)) {\n\t\t\treturn 'timestamp';\n\t\t} else if (is(encoder, PgDate) || is(encoder, PgDateString)) {\n\t\t\treturn 'date';\n\t\t} else if (is(encoder, PgUUID)) {\n\t\t\treturn 'uuid';\n\t\t} else {\n\t\t\treturn 'none';\n\t\t}\n\t}\n\n\tsqlToQuery(sql: SQL, invokeSource?: 'indexes' | undefined): QueryWithTypings {\n\t\treturn sql.toQuery({\n\t\t\tescapeName: this.escapeName,\n\t\t\tescapeParam: this.escapeParam,\n\t\t\tescapeString: this.escapeString,\n\t\t\tprepareTyping: this.prepareTyping,\n\t\t\tinvokeSource,\n\t\t});\n\t}\n\n\t// buildRelationalQueryWithPK({\n\t// \tfullSchema,\n\t// \tschema,\n\t// \ttableNamesMap,\n\t// \ttable,\n\t// \ttableConfig,\n\t// \tqueryConfig: config,\n\t// \ttableAlias,\n\t// \tisRoot = false,\n\t// \tjoinOn,\n\t// }: {\n\t// \tfullSchema: Record<string, unknown>;\n\t// \tschema: TablesRelationalConfig;\n\t// \ttableNamesMap: Record<string, string>;\n\t// \ttable: PgTable;\n\t// \ttableConfig: TableRelationalConfig;\n\t// \tqueryConfig: true | DBQueryConfig<'many', true>;\n\t// \ttableAlias: string;\n\t// \tisRoot?: boolean;\n\t// \tjoinOn?: SQL;\n\t// }): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t// \t// For { \"<relation>\": true }, return a table with selection of all columns\n\t// \tif (config === true) {\n\t// \t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t// \t\tconst selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = selectionEntries.map((\n\t// \t\t\t[key, value],\n\t// \t\t) => ({\n\t// \t\t\tdbKey: value.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: value as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection,\n\t// \t\t};\n\t// \t}\n\n\t// \t// let selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t// \t// let selectionForBuild = selection;\n\n\t// \tconst aliasedColumns = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedRelations = Object.fromEntries(\n\t// \t\tObject.entries(tableConfig.relations).map(([key, value]) => [key, aliasedRelation(value, tableAlias)]),\n\t// \t);\n\n\t// \tconst aliasedFields = Object.assign({}, aliasedColumns, aliasedRelations);\n\n\t// \tlet where, hasUserDefinedWhere;\n\t// \tif (config.where) {\n\t// \t\tconst whereSql = typeof config.where === 'function' ? config.where(aliasedFields, operators) : config.where;\n\t// \t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t// \t\thasUserDefinedWhere = !!where;\n\t// \t}\n\t// \twhere = and(joinOn, where);\n\n\t// \t// const fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased; isExtra?: boolean }[] = [];\n\t// \tlet joins: Join[] = [];\n\t// \tlet selectedColumns: string[] = [];\n\n\t// \t// Figure out which columns to select\n\t// \tif (config.columns) {\n\t// \t\tlet isIncludeMode = false;\n\n\t// \t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t// \t\t\tif (value === undefined) {\n\t// \t\t\t\tcontinue;\n\t// \t\t\t}\n\n\t// \t\t\tif (field in tableConfig.columns) {\n\t// \t\t\t\tif (!isIncludeMode && value === true) {\n\t// \t\t\t\t\tisIncludeMode = true;\n\t// \t\t\t\t}\n\t// \t\t\t\tselectedColumns.push(field);\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tif (selectedColumns.length > 0) {\n\t// \t\t\tselectedColumns = isIncludeMode\n\t// \t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t// \t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// Select all columns if selection is not specified\n\t// \t\tselectedColumns = Object.keys(tableConfig.columns);\n\t// \t}\n\n\t// \t// for (const field of selectedColumns) {\n\t// \t// \tconst column = tableConfig.columns[field]! as PgColumn;\n\t// \t// \tfieldsSelection.push({ tsKey: field, value: column });\n\t// \t// }\n\n\t// \tlet initiallySelectedRelations: {\n\t// \t\ttsKey: string;\n\t// \t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t// \t\trelation: Relation;\n\t// \t}[] = [];\n\n\t// \t// let selectedRelations: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\n\t// \t// Figure out which relations to select\n\t// \tif (config.with) {\n\t// \t\tinitiallySelectedRelations = Object.entries(config.with)\n\t// \t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t// \t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t// \t}\n\n\t// \tconst manyRelations = initiallySelectedRelations.filter((r) =>\n\t// \t\tis(r.relation, Many)\n\t// \t\t&& (schema[tableNamesMap[r.relation.referencedTable[Table.Symbol.Name]]!]?.primaryKey.length ?? 0) > 0\n\t// \t);\n\t// \t// If this is the last Many relation (or there are no Many relations), we are on the innermost subquery level\n\t// \tconst isInnermostQuery = manyRelations.length < 2;\n\n\t// \tconst selectedExtras: {\n\t// \t\ttsKey: string;\n\t// \t\tvalue: SQL.Aliased;\n\t// \t}[] = [];\n\n\t// \t// Figure out which extras to select\n\t// \tif (isInnermostQuery && config.extras) {\n\t// \t\tconst extras = typeof config.extras === 'function'\n\t// \t\t\t? config.extras(aliasedFields, { sql })\n\t// \t\t\t: config.extras;\n\t// \t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t// \t\t\tselectedExtras.push({\n\t// \t\t\t\ttsKey,\n\t// \t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\n\t// \t// Transform `fieldsSelection` into `selection`\n\t// \t// `fieldsSelection` shouldn't be used after this point\n\t// \t// for (const { tsKey, value, isExtra } of fieldsSelection) {\n\t// \t// \tselection.push({\n\t// \t// \t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t// \t// \t\ttsKey,\n\t// \t// \t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t// \t// \t\trelationTableTsKey: undefined,\n\t// \t// \t\tisJson: false,\n\t// \t// \t\tisExtra,\n\t// \t// \t\tselection: [],\n\t// \t// \t});\n\t// \t// }\n\n\t// \tlet orderByOrig = typeof config.orderBy === 'function'\n\t// \t\t? config.orderBy(aliasedFields, orderByOperators)\n\t// \t\t: config.orderBy ?? [];\n\t// \tif (!Array.isArray(orderByOrig)) {\n\t// \t\torderByOrig = [orderByOrig];\n\t// \t}\n\t// \tconst orderBy = orderByOrig.map((orderByValue) => {\n\t// \t\tif (is(orderByValue, Column)) {\n\t// \t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t// \t\t}\n\t// \t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t// \t});\n\n\t// \tconst limit = isInnermostQuery ? config.limit : undefined;\n\t// \tconst offset = isInnermostQuery ? config.offset : undefined;\n\n\t// \t// For non-root queries without additional config except columns, return a table with selection\n\t// \tif (\n\t// \t\t!isRoot\n\t// \t\t&& initiallySelectedRelations.length === 0\n\t// \t\t&& selectedExtras.length === 0\n\t// \t\t&& !where\n\t// \t\t&& orderBy.length === 0\n\t// \t\t&& limit === undefined\n\t// \t\t&& offset === undefined\n\t// \t) {\n\t// \t\treturn {\n\t// \t\t\ttableTsKey: tableConfig.tsName,\n\t// \t\t\tsql: table,\n\t// \t\t\tselection: selectedColumns.map((key) => ({\n\t// \t\t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\t\ttsKey: key,\n\t// \t\t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\t\trelationTableTsKey: undefined,\n\t// \t\t\t\tisJson: false,\n\t// \t\t\t\tselection: [],\n\t// \t\t\t})),\n\t// \t\t};\n\t// \t}\n\n\t// \tconst selectedRelationsWithoutPK:\n\n\t// \t// Process all relations without primary keys, because they need to be joined differently and will all be on the same query level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of initiallySelectedRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length > 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t\tnestedQueryRelation: relation,\n\t// \t\t});\n\t// \t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t// \t\tjoins.push({\n\t// \t\t\ton: sql`true`,\n\t// \t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: true,\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tconst oneRelations = initiallySelectedRelations.filter((r): r is typeof r & { relation: One } =>\n\t// \t\tis(r.relation, One)\n\t// \t);\n\n\t// \t// Process all One relations with PKs, because they can all be joined on the same level\n\t// \tfor (\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\trelation,\n\t// \t\t} of oneRelations\n\t// \t) {\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst relationTable = schema[relationTableTsName]!;\n\n\t// \t\tif (relationTable.primaryKey.length === 0) {\n\t// \t\t\tcontinue;\n\t// \t\t}\n\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\t// \t\tconst builtRelation = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationConfigValue,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\t// \t\tconst field = sql`case when ${sql.identifier(relationTableAlias)} is null then null else json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelation.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelation.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: is(builtRelation.sql, SQL)\n\t// \t\t\t\t? new Subquery(builtRelation.sql, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelation.sql, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: is(builtRelation.sql, SQL),\n\t// \t\t});\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelation.selection,\n\t// \t\t});\n\t// \t}\n\n\t// \tlet distinct: PgSelectConfig['distinct'];\n\t// \tlet tableFrom: PgTable | Subquery = table;\n\n\t// \t// Process first Many relation - each one requires a nested subquery\n\t// \tconst manyRelation = manyRelations[0];\n\t// \tif (manyRelation) {\n\t// \t\tconst {\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\trelation,\n\t// \t\t} = manyRelation;\n\n\t// \t\tdistinct = {\n\t// \t\t\ton: tableConfig.primaryKey.map((c) => aliasedTableColumn(c as PgColumn, tableAlias)),\n\t// \t\t};\n\n\t// \t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t// \t\tconst relationTableName = relation.referencedTable[Table.Symbol.Name];\n\t// \t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t// \t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t// \t\tconst joinOn = and(\n\t// \t\t\t...normalizedRelation.fields.map((field, i) =>\n\t// \t\t\t\teq(\n\t// \t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t// \t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t// \t\t\t\t)\n\t// \t\t\t),\n\t// \t\t);\n\n\t// \t\tconst builtRelationJoin = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t// \t\t\ttableConfig: schema[relationTableTsName]!,\n\t// \t\t\tqueryConfig: selectedRelationQueryConfig,\n\t// \t\t\ttableAlias: relationTableAlias,\n\t// \t\t\tjoinOn,\n\t// \t\t});\n\n\t// \t\tconst builtRelationSelectionField = sql`case when ${\n\t// \t\t\tsql.identifier(relationTableAlias)\n\t// \t\t} is null then '[]' else json_agg(json_build_array(${\n\t// \t\t\tsql.join(\n\t// \t\t\t\tbuiltRelationJoin.selection.map(({ field }) =>\n\t// \t\t\t\t\tis(field, SQL.Aliased)\n\t// \t\t\t\t\t\t? sql`${sql.identifier(relationTableAlias)}.${sql.identifier(field.fieldAlias)}`\n\t// \t\t\t\t\t\t: is(field, Column)\n\t// \t\t\t\t\t\t? aliasedTableColumn(field, relationTableAlias)\n\t// \t\t\t\t\t\t: field\n\t// \t\t\t\t),\n\t// \t\t\t\tsql`, `,\n\t// \t\t\t)\n\t// \t\t})) over (partition by ${sql.join(distinct.on, sql`, `)}) end`.as(selectedRelationTsKey);\n\t// \t\tconst isLateralJoin = is(builtRelationJoin.sql, SQL);\n\t// \t\tjoins.push({\n\t// \t\t\ton: isLateralJoin ? sql`true` : joinOn,\n\t// \t\t\ttable: isLateralJoin\n\t// \t\t\t\t? new Subquery(builtRelationJoin.sql as SQL, {}, relationTableAlias)\n\t// \t\t\t\t: aliasedTable(builtRelationJoin.sql as PgTable, relationTableAlias),\n\t// \t\t\talias: relationTableAlias,\n\t// \t\t\tjoinType: 'left',\n\t// \t\t\tlateral: isLateralJoin,\n\t// \t\t});\n\n\t// \t\t// Build the \"from\" subquery with the remaining Many relations\n\t// \t\tconst builtTableFrom = this.buildRelationalQueryWithPK({\n\t// \t\t\tfullSchema,\n\t// \t\t\tschema,\n\t// \t\t\ttableNamesMap,\n\t// \t\t\ttable,\n\t// \t\t\ttableConfig,\n\t// \t\t\tqueryConfig: {\n\t// \t\t\t\t...config,\n\t// \t\t\t\twhere: undefined,\n\t// \t\t\t\torderBy: undefined,\n\t// \t\t\t\tlimit: undefined,\n\t// \t\t\t\toffset: undefined,\n\t// \t\t\t\twith: manyRelations.slice(1).reduce<NonNullable<typeof config['with']>>(\n\t// \t\t\t\t\t(result, { tsKey, queryConfig: configValue }) => {\n\t// \t\t\t\t\t\tresult[tsKey] = configValue;\n\t// \t\t\t\t\t\treturn result;\n\t// \t\t\t\t\t},\n\t// \t\t\t\t\t{},\n\t// \t\t\t\t),\n\t// \t\t\t},\n\t// \t\t\ttableAlias,\n\t// \t\t});\n\n\t// \t\tselectedRelations.push({\n\t// \t\t\tdbKey: selectedRelationTsKey,\n\t// \t\t\ttsKey: selectedRelationTsKey,\n\t// \t\t\tfield: builtRelationSelectionField,\n\t// \t\t\trelationTableTsKey: relationTableTsName,\n\t// \t\t\tisJson: true,\n\t// \t\t\tselection: builtRelationJoin.selection,\n\t// \t\t});\n\n\t// \t\t// selection = builtTableFrom.selection.map((item) =>\n\t// \t\t// \tis(item.field, SQL.Aliased)\n\t// \t\t// \t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t// \t\t: item\n\t// \t\t// );\n\t// \t\t// selectionForBuild = [{\n\t// \t\t// \tdbKey: '*',\n\t// \t\t// \ttsKey: '*',\n\t// \t\t// \tfield: sql`${sql.identifier(tableAlias)}.*`,\n\t// \t\t// \tselection: [],\n\t// \t\t// \tisJson: false,\n\t// \t\t// \trelationTableTsKey: undefined,\n\t// \t\t// }];\n\t// \t\t// const newSelectionItem: (typeof selection)[number] = {\n\t// \t\t// \tdbKey: selectedRelationTsKey,\n\t// \t\t// \ttsKey: selectedRelationTsKey,\n\t// \t\t// \tfield,\n\t// \t\t// \trelationTableTsKey: relationTableTsName,\n\t// \t\t// \tisJson: true,\n\t// \t\t// \tselection: builtRelationJoin.selection,\n\t// \t\t// };\n\t// \t\t// selection.push(newSelectionItem);\n\t// \t\t// selectionForBuild.push(newSelectionItem);\n\n\t// \t\ttableFrom = is(builtTableFrom.sql, PgTable)\n\t// \t\t\t? builtTableFrom.sql\n\t// \t\t\t: new Subquery(builtTableFrom.sql, {}, tableAlias);\n\t// \t}\n\n\t// \tif (selectedColumns.length === 0 && selectedRelations.length === 0 && selectedExtras.length === 0) {\n\t// \t\tthrow new DrizzleError(`No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")`);\n\t// \t}\n\n\t// \tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'];\n\n\t// \tfunction prepareSelectedColumns() {\n\t// \t\treturn selectedColumns.map((key) => ({\n\t// \t\t\tdbKey: tableConfig.columns[key]!.name,\n\t// \t\t\ttsKey: key,\n\t// \t\t\tfield: tableConfig.columns[key] as PgColumn,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tfunction prepareSelectedExtras() {\n\t// \t\treturn selectedExtras.map((item) => ({\n\t// \t\t\tdbKey: item.value.fieldAlias,\n\t// \t\t\ttsKey: item.tsKey,\n\t// \t\t\tfield: item.value,\n\t// \t\t\trelationTableTsKey: undefined,\n\t// \t\t\tisJson: false,\n\t// \t\t\tselection: [],\n\t// \t\t}));\n\t// \t}\n\n\t// \tif (isRoot) {\n\t// \t\tselection = [\n\t// \t\t\t...prepareSelectedColumns(),\n\t// \t\t\t...prepareSelectedExtras(),\n\t// \t\t];\n\t// \t}\n\n\t// \tif (hasUserDefinedWhere || orderBy.length > 0) {\n\t// \t\ttableFrom = new Subquery(\n\t// \t\t\tthis.buildSelectQuery({\n\t// \t\t\t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\t\t\tfields: {},\n\t// \t\t\t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\t\t\tpath: [],\n\t// \t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t\t\t})),\n\t// \t\t\t\tjoins,\n\t// \t\t\t\tdistinct,\n\t// \t\t\t}),\n\t// \t\t\t{},\n\t// \t\t\ttableAlias,\n\t// \t\t);\n\t// \t\tselectionForBuild = selection.map((item) =>\n\t// \t\t\tis(item.field, SQL.Aliased)\n\t// \t\t\t\t? { ...item, field: sql`${sql.identifier(tableAlias)}.${sql.identifier(item.field.fieldAlias)}` }\n\t// \t\t\t\t: item\n\t// \t\t);\n\t// \t\tjoins = [];\n\t// \t\tdistinct = undefined;\n\t// \t}\n\n\t// \tconst result = this.buildSelectQuery({\n\t// \t\ttable: is(tableFrom, PgTable) ? aliasedTable(tableFrom, tableAlias) : tableFrom,\n\t// \t\tfields: {},\n\t// \t\tfieldsFlat: selectionForBuild.map(({ field }) => ({\n\t// \t\t\tpath: [],\n\t// \t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t// \t\t})),\n\t// \t\twhere,\n\t// \t\tlimit,\n\t// \t\toffset,\n\t// \t\tjoins,\n\t// \t\torderBy,\n\t// \t\tdistinct,\n\t// \t});\n\n\t// \treturn {\n\t// \t\ttableTsKey: tableConfig.tsName,\n\t// \t\tsql: result,\n\t// \t\tselection,\n\t// \t};\n\t// }\n\n\tbuildRelationalQueryWithoutPK({\n\t\tfullSchema,\n\t\tschema,\n\t\ttableNamesMap,\n\t\ttable,\n\t\ttableConfig,\n\t\tqueryConfig: config,\n\t\ttableAlias,\n\t\tnestedQueryRelation,\n\t\tjoinOn,\n\t}: {\n\t\tfullSchema: Record<string, unknown>;\n\t\tschema: TablesRelationalConfig;\n\t\ttableNamesMap: Record<string, string>;\n\t\ttable: PgTable;\n\t\ttableConfig: TableRelationalConfig;\n\t\tqueryConfig: true | DBQueryConfig<'many', true>;\n\t\ttableAlias: string;\n\t\tnestedQueryRelation?: Relation;\n\t\tjoinOn?: SQL;\n\t}): BuildRelationalQueryResult<PgTable, PgColumn> {\n\t\tlet selection: BuildRelationalQueryResult<PgTable, PgColumn>['selection'] = [];\n\t\tlet limit, offset, orderBy: NonNullable<PgSelectConfig['orderBy']> = [], where;\n\t\tconst joins: PgSelectJoinConfig[] = [];\n\n\t\tif (config === true) {\n\t\t\tconst selectionEntries = Object.entries(tableConfig.columns);\n\t\t\tselection = selectionEntries.map((\n\t\t\t\t[key, value],\n\t\t\t) => ({\n\t\t\t\tdbKey: value.name,\n\t\t\t\ttsKey: key,\n\t\t\t\tfield: aliasedTableColumn(value as PgColumn, tableAlias),\n\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\tisJson: false,\n\t\t\t\tselection: [],\n\t\t\t}));\n\t\t} else {\n\t\t\tconst aliasedColumns = Object.fromEntries(\n\t\t\t\tObject.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)]),\n\t\t\t);\n\n\t\t\tif (config.where) {\n\t\t\t\tconst whereSql = typeof config.where === 'function'\n\t\t\t\t\t? config.where(aliasedColumns, getOperators())\n\t\t\t\t\t: config.where;\n\t\t\t\twhere = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);\n\t\t\t}\n\n\t\t\tconst fieldsSelection: { tsKey: string; value: PgColumn | SQL.Aliased }[] = [];\n\t\t\tlet selectedColumns: string[] = [];\n\n\t\t\t// Figure out which columns to select\n\t\t\tif (config.columns) {\n\t\t\t\tlet isIncludeMode = false;\n\n\t\t\t\tfor (const [field, value] of Object.entries(config.columns)) {\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (field in tableConfig.columns) {\n\t\t\t\t\t\tif (!isIncludeMode && value === true) {\n\t\t\t\t\t\t\tisIncludeMode = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectedColumns.push(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (selectedColumns.length > 0) {\n\t\t\t\t\tselectedColumns = isIncludeMode\n\t\t\t\t\t\t? selectedColumns.filter((c) => config.columns?.[c] === true)\n\t\t\t\t\t\t: Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select all columns if selection is not specified\n\t\t\t\tselectedColumns = Object.keys(tableConfig.columns);\n\t\t\t}\n\n\t\t\tfor (const field of selectedColumns) {\n\t\t\t\tconst column = tableConfig.columns[field]! as PgColumn;\n\t\t\t\tfieldsSelection.push({ tsKey: field, value: column });\n\t\t\t}\n\n\t\t\tlet selectedRelations: {\n\t\t\t\ttsKey: string;\n\t\t\t\tqueryConfig: true | DBQueryConfig<'many', false>;\n\t\t\t\trelation: Relation;\n\t\t\t}[] = [];\n\n\t\t\t// Figure out which relations to select\n\t\t\tif (config.with) {\n\t\t\t\tselectedRelations = Object.entries(config.with)\n\t\t\t\t\t.filter((entry): entry is [typeof entry[0], NonNullable<typeof entry[1]>] => !!entry[1])\n\t\t\t\t\t.map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey]! }));\n\t\t\t}\n\n\t\t\tlet extras;\n\n\t\t\t// Figure out which extras to select\n\t\t\tif (config.extras) {\n\t\t\t\textras = typeof config.extras === 'function'\n\t\t\t\t\t? config.extras(aliasedColumns, { sql })\n\t\t\t\t\t: config.extras;\n\t\t\t\tfor (const [tsKey, value] of Object.entries(extras)) {\n\t\t\t\t\tfieldsSelection.push({\n\t\t\t\t\t\ttsKey,\n\t\t\t\t\t\tvalue: mapColumnsInAliasedSQLToAlias(value, tableAlias),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Transform `fieldsSelection` into `selection`\n\t\t\t// `fieldsSelection` shouldn't be used after this point\n\t\t\tfor (const { tsKey, value } of fieldsSelection) {\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey]!.name,\n\t\t\t\t\ttsKey,\n\t\t\t\t\tfield: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,\n\t\t\t\t\trelationTableTsKey: undefined,\n\t\t\t\t\tisJson: false,\n\t\t\t\t\tselection: [],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet orderByOrig = typeof config.orderBy === 'function'\n\t\t\t\t? config.orderBy(aliasedColumns, getOrderByOperators())\n\t\t\t\t: config.orderBy ?? [];\n\t\t\tif (!Array.isArray(orderByOrig)) {\n\t\t\t\torderByOrig = [orderByOrig];\n\t\t\t}\n\t\t\torderBy = orderByOrig.map((orderByValue) => {\n\t\t\t\tif (is(orderByValue, Column)) {\n\t\t\t\t\treturn aliasedTableColumn(orderByValue, tableAlias) as PgColumn;\n\t\t\t\t}\n\t\t\t\treturn mapColumnsInSQLToAlias(orderByValue, tableAlias);\n\t\t\t});\n\n\t\t\tlimit = config.limit;\n\t\t\toffset = config.offset;\n\n\t\t\t// Process all relations\n\t\t\tfor (\n\t\t\t\tconst {\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tqueryConfig: selectedRelationConfigValue,\n\t\t\t\t\trelation,\n\t\t\t\t} of selectedRelations\n\t\t\t) {\n\t\t\t\tconst normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);\n\t\t\t\tconst relationTableName = getTableUniqueName(relation.referencedTable);\n\t\t\t\tconst relationTableTsName = tableNamesMap[relationTableName]!;\n\t\t\t\tconst relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;\n\t\t\t\tconst joinOn = and(\n\t\t\t\t\t...normalizedRelation.fields.map((field, i) =>\n\t\t\t\t\t\teq(\n\t\t\t\t\t\t\taliasedTableColumn(normalizedRelation.references[i]!, relationTableAlias),\n\t\t\t\t\t\t\taliasedTableColumn(field, tableAlias),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tconst builtRelation = this.buildRelationalQueryWithoutPK({\n\t\t\t\t\tfullSchema,\n\t\t\t\t\tschema,\n\t\t\t\t\ttableNamesMap,\n\t\t\t\t\ttable: fullSchema[relationTableTsName] as PgTable,\n\t\t\t\t\ttableConfig: schema[relationTableTsName]!,\n\t\t\t\t\tqueryConfig: is(relation, One)\n\t\t\t\t\t\t? (selectedRelationConfigValue === true\n\t\t\t\t\t\t\t? { limit: 1 }\n\t\t\t\t\t\t\t: { ...selectedRelationConfigValue, limit: 1 })\n\t\t\t\t\t\t: selectedRelationConfigValue,\n\t\t\t\t\ttableAlias: relationTableAlias,\n\t\t\t\t\tjoinOn,\n\t\t\t\t\tnestedQueryRelation: relation,\n\t\t\t\t});\n\t\t\t\tconst field = sql`${sql.identifier(relationTableAlias)}.${sql.identifier('data')}`.as(selectedRelationTsKey);\n\t\t\t\tjoins.push({\n\t\t\t\t\ton: sql`true`,\n\t\t\t\t\ttable: new Subquery(builtRelation.sql as SQL, {}, relationTableAlias),\n\t\t\t\t\talias: relationTableAlias,\n\t\t\t\t\tjoinType: 'left',\n\t\t\t\t\tlateral: true,\n\t\t\t\t});\n\t\t\t\tselection.push({\n\t\t\t\t\tdbKey: selectedRelationTsKey,\n\t\t\t\t\ttsKey: selectedRelationTsKey,\n\t\t\t\t\tfield,\n\t\t\t\t\trelationTableTsKey: relationTableTsName,\n\t\t\t\t\tisJson: true,\n\t\t\t\t\tselection: builtRelation.selection,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (selection.length === 0) {\n\t\t\tthrow new DrizzleError({ message: `No fields selected for table \"${tableConfig.tsName}\" (\"${tableAlias}\")` });\n\t\t}\n\n\t\tlet result;\n\n\t\twhere = and(joinOn, where);\n\n\t\tif (nestedQueryRelation) {\n\t\t\tlet field = sql`json_build_array(${\n\t\t\t\tsql.join(\n\t\t\t\t\tselection.map(({ field, tsKey, isJson }) =>\n\t\t\t\t\t\tisJson\n\t\t\t\t\t\t\t? sql`${sql.identifier(`${tableAlias}_${tsKey}`)}.${sql.identifier('data')}`\n\t\t\t\t\t\t\t: is(field, SQL.Aliased)\n\t\t\t\t\t\t\t? field.sql\n\t\t\t\t\t\t\t: field\n\t\t\t\t\t),\n\t\t\t\t\tsql`, `,\n\t\t\t\t)\n\t\t\t})`;\n\t\t\tif (is(nestedQueryRelation, Many)) {\n\t\t\t\tfield = sql`coalesce(json_agg(${field}${\n\t\t\t\t\torderBy.length > 0 ? sql` order by ${sql.join(orderBy, sql`, `)}` : undefined\n\t\t\t\t}), '[]'::json)`;\n\t\t\t\t// orderBy = [];\n\t\t\t}\n\t\t\tconst nestedSelection = [{\n\t\t\t\tdbKey: 'data',\n\t\t\t\ttsKey: 'data',\n\t\t\t\tfield: field.as('data'),\n\t\t\t\tisJson: true,\n\t\t\t\trelationTableTsKey: tableConfig.tsName,\n\t\t\t\tselection,\n\t\t\t}];\n\n\t\t\tconst needsSubquery = limit !== undefined || offset !== undefined || orderBy.length > 0;\n\n\t\t\tif (needsSubquery) {\n\t\t\t\tresult = this.buildSelectQuery({\n\t\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\t\tfields: {},\n\t\t\t\t\tfieldsFlat: [{\n\t\t\t\t\t\tpath: [],\n\t\t\t\t\t\tfield: sql.raw('*'),\n\t\t\t\t\t}],\n\t\t\t\t\twhere,\n\t\t\t\t\tlimit,\n\t\t\t\t\toffset,\n\t\t\t\t\torderBy,\n\t\t\t\t\tsetOperators: [],\n\t\t\t\t});\n\n\t\t\t\twhere = undefined;\n\t\t\t\tlimit = undefined;\n\t\t\t\toffset = undefined;\n\t\t\t\torderBy = [];\n\t\t\t} else {\n\t\t\t\tresult = aliasedTable(table, tableAlias);\n\t\t\t}\n\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: is(result, PgTable) ? result : new Subquery(result, {}, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: nestedSelection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t} else {\n\t\t\tresult = this.buildSelectQuery({\n\t\t\t\ttable: aliasedTable(table, tableAlias),\n\t\t\t\tfields: {},\n\t\t\t\tfieldsFlat: selection.map(({ field }) => ({\n\t\t\t\t\tpath: [],\n\t\t\t\t\tfield: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field,\n\t\t\t\t})),\n\t\t\t\tjoins,\n\t\t\t\twhere,\n\t\t\t\tlimit,\n\t\t\t\toffset,\n\t\t\t\torderBy,\n\t\t\t\tsetOperators: [],\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttableTsKey: tableConfig.tsName,\n\t\t\tsql: result,\n\t\t\tselection,\n\t\t};\n\t}\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport type { PgColumn } from '~/pg-core/columns/index.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type { PgSession, PreparedQueryConfig } from '~/pg-core/session.ts';\nimport type { SubqueryWithSelection } from '~/pg-core/subquery.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport { PgViewBase } from '~/pg-core/view-base.ts';\nimport { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type {\n\tBuildSubquerySelection,\n\tGetSelectTableName,\n\tGetSelectTableSelection,\n\tJoinNullability,\n\tJoinType,\n\tSelectMode,\n\tSelectResult,\n\tSetOperator,\n} from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport { SQL, View } from '~/sql/sql.ts';\nimport type { ColumnsSelection, Placeholder, Query, SQLWrapper } from '~/sql/sql.ts';\nimport { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { tracer } from '~/tracing.ts';\nimport { applyMixins, getTableColumns, getTableLikeName, haveSameKeys, type ValueOrArray } from '~/utils.ts';\nimport { orderSelectedFields } from '~/utils.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport type {\n\tAnyPgSelect,\n\tCreatePgSelectFromBuilderMode,\n\tGetPgSetOperators,\n\tLockConfig,\n\tLockStrength,\n\tPgCreateSetOperatorFn,\n\tPgJoinFn,\n\tPgSelectConfig,\n\tPgSelectDynamic,\n\tPgSelectHKT,\n\tPgSelectHKTBase,\n\tPgSelectPrepare,\n\tPgSelectWithout,\n\tPgSetOperatorExcludedMethods,\n\tPgSetOperatorWithResult,\n\tSelectedFields,\n\tSetOperatorRightSelect,\n} from './select.types.ts';\n\nexport class PgSelectBuilder<\n\tTSelection extends SelectedFields | undefined,\n\tTBuilderMode extends 'db' | 'qb' = 'db',\n> {\n\tstatic readonly [entityKind]: string = 'PgSelectBuilder';\n\n\tprivate fields: TSelection;\n\tprivate session: PgSession | undefined;\n\tprivate dialect: PgDialect;\n\tprivate withList: Subquery[] = [];\n\tprivate distinct: boolean | {\n\t\ton: (PgColumn | SQLWrapper)[];\n\t} | undefined;\n\n\tconstructor(\n\t\tconfig: {\n\t\t\tfields: TSelection;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList?: Subquery[];\n\t\t\tdistinct?: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t};\n\t\t},\n\t) {\n\t\tthis.fields = config.fields;\n\t\tthis.session = config.session;\n\t\tthis.dialect = config.dialect;\n\t\tif (config.withList) {\n\t\t\tthis.withList = config.withList;\n\t\t}\n\t\tthis.distinct = config.distinct;\n\t}\n\n\t/**\n\t * Specify the table, subquery, or other target that you're\n\t * building a select query against.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM | Postgres from documentation}\n\t */\n\tfrom<TFrom extends PgTable | Subquery | PgViewBase | SQL>(\n\t\tsource: TFrom,\n\t): CreatePgSelectFromBuilderMode<\n\t\tTBuilderMode,\n\t\tGetSelectTableName<TFrom>,\n\t\tTSelection extends undefined ? GetSelectTableSelection<TFrom> : TSelection,\n\t\tTSelection extends undefined ? 'single' : 'partial'\n\t> {\n\t\tconst isPartialSelect = !!this.fields;\n\n\t\tlet fields: SelectedFields;\n\t\tif (this.fields) {\n\t\t\tfields = this.fields;\n\t\t} else if (is(source, Subquery)) {\n\t\t\t// This is required to use the proxy handler to get the correct field values from the subquery\n\t\t\tfields = Object.fromEntries(\n\t\t\t\tObject.keys(source._.selectedFields).map((\n\t\t\t\t\tkey,\n\t\t\t\t) => [key, source[key as unknown as keyof typeof source] as unknown as SelectedFields[string]]),\n\t\t\t);\n\t\t} else if (is(source, PgViewBase)) {\n\t\t\tfields = source[ViewBaseConfig].selectedFields as SelectedFields;\n\t\t} else if (is(source, SQL)) {\n\t\t\tfields = {};\n\t\t} else {\n\t\t\tfields = getTableColumns<PgTable>(source);\n\t\t}\n\n\t\treturn new PgSelectBase({\n\t\t\ttable: source,\n\t\t\tfields,\n\t\t\tisPartialSelect,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\twithList: this.withList,\n\t\t\tdistinct: this.distinct,\n\t\t}) as any;\n\t}\n}\n\nexport abstract class PgSelectQueryBuilderBase<\n\tTHKT extends PgSelectHKTBase,\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends TypedQueryBuilder<TSelectedFields, TResult> {\n\tstatic readonly [entityKind]: string = 'PgSelectQueryBuilder';\n\n\toverride readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly hkt: THKT;\n\t\treadonly tableName: TTableName;\n\t\treadonly selection: TSelection;\n\t\treadonly selectMode: TSelectMode;\n\t\treadonly nullabilityMap: TNullabilityMap;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TResult;\n\t\treadonly selectedFields: TSelectedFields;\n\t};\n\n\tprotected config: PgSelectConfig;\n\tprotected joinsNotNullableMap: Record<string, boolean>;\n\tprivate tableName: string | undefined;\n\tprivate isPartialSelect: boolean;\n\tprotected session: PgSession | undefined;\n\tprotected dialect: PgDialect;\n\n\tconstructor(\n\t\t{ table, fields, isPartialSelect, session, dialect, withList, distinct }: {\n\t\t\ttable: PgSelectConfig['table'];\n\t\t\tfields: PgSelectConfig['fields'];\n\t\t\tisPartialSelect: boolean;\n\t\t\tsession: PgSession | undefined;\n\t\t\tdialect: PgDialect;\n\t\t\twithList: Subquery[];\n\t\t\tdistinct: boolean | {\n\t\t\t\ton: (PgColumn | SQLWrapper)[];\n\t\t\t} | undefined;\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis.config = {\n\t\t\twithList,\n\t\t\ttable,\n\t\t\tfields: { ...fields },\n\t\t\tdistinct,\n\t\t\tsetOperators: [],\n\t\t};\n\t\tthis.isPartialSelect = isPartialSelect;\n\t\tthis.session = session;\n\t\tthis.dialect = dialect;\n\t\tthis._ = {\n\t\t\tselectedFields: fields as TSelectedFields,\n\t\t} as this['_'];\n\t\tthis.tableName = getTableLikeName(table);\n\t\tthis.joinsNotNullableMap = typeof this.tableName === 'string' ? { [this.tableName]: true } : {};\n\t}\n\n\tprivate createJoin<TJoinType extends JoinType>(\n\t\tjoinType: TJoinType,\n\t): PgJoinFn<this, TDynamic, TJoinType> {\n\t\treturn (\n\t\t\ttable: PgTable | Subquery | PgViewBase | SQL,\n\t\t\ton: ((aliases: TSelection) => SQL | undefined) | SQL | undefined,\n\t\t) => {\n\t\t\tconst baseTableName = this.tableName;\n\t\t\tconst tableName = getTableLikeName(table);\n\n\t\t\tif (typeof tableName === 'string' && this.config.joins?.some((join) => join.alias === tableName)) {\n\t\t\t\tthrow new Error(`Alias \"${tableName}\" is already used in this query`);\n\t\t\t}\n\n\t\t\tif (!this.isPartialSelect) {\n\t\t\t\t// If this is the first join and this is not a partial select and we're not selecting from raw SQL, \"move\" the fields from the main table to the nested object\n\t\t\t\tif (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === 'string') {\n\t\t\t\t\tthis.config.fields = {\n\t\t\t\t\t\t[baseTableName]: this.config.fields,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (typeof tableName === 'string' && !is(table, SQL)) {\n\t\t\t\t\tconst selection = is(table, Subquery)\n\t\t\t\t\t\t? table._.selectedFields\n\t\t\t\t\t\t: is(table, View)\n\t\t\t\t\t\t? table[ViewBaseConfig].selectedFields\n\t\t\t\t\t\t: table[Table.Symbol.Columns];\n\t\t\t\t\tthis.config.fields[tableName] = selection;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof on === 'function') {\n\t\t\t\ton = on(\n\t\t\t\t\tnew Proxy(\n\t\t\t\t\t\tthis.config.fields,\n\t\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t\t) as TSelection,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!this.config.joins) {\n\t\t\t\tthis.config.joins = [];\n\t\t\t}\n\n\t\t\tthis.config.joins.push({ on, table, joinType, alias: tableName });\n\n\t\t\tif (typeof tableName === 'string') {\n\t\t\t\tswitch (joinType) {\n\t\t\t\t\tcase 'left': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'right': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'inner': {\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'full': {\n\t\t\t\t\t\tthis.joinsNotNullableMap = Object.fromEntries(\n\t\t\t\t\t\t\tObject.entries(this.joinsNotNullableMap).map(([key]) => [key, false]),\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.joinsNotNullableMap[tableName] = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Executes a `left join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .leftJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tleftJoin = this.createJoin('left');\n\n\t/**\n\t * Executes a `right join` operation by adding another table to the current query.\n\t *\n\t * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .rightJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\trightJoin = this.createJoin('right');\n\n\t/**\n\t * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.\n\t *\n\t * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User; pets: Pet }[] = await db.select()\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number; petId: number }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .innerJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tinnerJoin = this.createJoin('inner');\n\n\t/**\n\t * Executes a `full join` operation by combining rows from two tables into a new table.\n\t *\n\t * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}\n\t *\n\t * @param table the table to join.\n\t * @param on the `on` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all users and their pets\n\t * const usersWithPets: { user: User | null; pets: Pet | null }[] = await db.select()\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t *\n\t * // Select userId and petId\n\t * const usersIdsAndPetIds: { userId: number | null; petId: number | null }[] = await db.select({\n\t *   userId: users.id,\n\t *   petId: pets.id,\n\t * })\n\t *   .from(users)\n\t *   .fullJoin(pets, eq(users.id, pets.ownerId))\n\t * ```\n\t */\n\tfullJoin = this.createJoin('full');\n\n\tprivate createSetOperator(\n\t\ttype: SetOperator,\n\t\tisAll: boolean,\n\t): <TValue extends PgSetOperatorWithResult<TResult>>(\n\t\trightSelection:\n\t\t\t| ((setOperators: GetPgSetOperators) => SetOperatorRightSelect<TValue, TResult>)\n\t\t\t| SetOperatorRightSelect<TValue, TResult>,\n\t) => PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\treturn (rightSelection) => {\n\t\t\tconst rightSelect = (typeof rightSelection === 'function'\n\t\t\t\t? rightSelection(getPgSetOperators())\n\t\t\t\t: rightSelection) as TypedQueryBuilder<\n\t\t\t\t\tany,\n\t\t\t\t\tTResult\n\t\t\t\t>;\n\n\t\t\tif (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.config.setOperators.push({ type, isAll, rightSelect });\n\t\t\treturn this as any;\n\t\t};\n\t}\n\n\t/**\n\t * Adds `union` set operator to the query.\n\t *\n\t * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all unique names from customers and users tables\n\t * await db.select({ name: users.name })\n\t *   .from(users)\n\t *   .union(\n\t *     db.select({ name: customers.name }).from(customers)\n\t *   );\n\t * // or\n\t * import { union } from 'drizzle-orm/pg-core'\n\t *\n\t * await union(\n\t *   db.select({ name: users.name }).from(users),\n\t *   db.select({ name: customers.name }).from(customers)\n\t * );\n\t * ```\n\t */\n\tunion = this.createSetOperator('union', false);\n\n\t/**\n\t * Adds `union all` set operator to the query.\n\t *\n\t * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all transaction ids from both online and in-store sales\n\t * await db.select({ transaction: onlineSales.transactionId })\n\t *   .from(onlineSales)\n\t *   .unionAll(\n\t *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t *   );\n\t * // or\n\t * import { unionAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await unionAll(\n\t *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n\t *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n\t * );\n\t * ```\n\t */\n\tunionAll = this.createSetOperator('union', true);\n\n\t/**\n\t * Adds `intersect` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select course names that are offered in both departments A and B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .intersect(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { intersect } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersect(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\tintersect = this.createSetOperator('intersect', false);\n\n\t/**\n\t * Adds `intersect all` set operator to the query.\n\t *\n\t * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products and quantities that are ordered by both regular and VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .intersectAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { intersectAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await intersectAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\tintersectAll = this.createSetOperator('intersect', true);\n\n\t/**\n\t * Adds `except` set operator to the query.\n\t *\n\t * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all courses offered in department A but not in department B\n\t * await db.select({ courseName: depA.courseName })\n\t *   .from(depA)\n\t *   .except(\n\t *     db.select({ courseName: depB.courseName }).from(depB)\n\t *   );\n\t * // or\n\t * import { except } from 'drizzle-orm/pg-core'\n\t *\n\t * await except(\n\t *   db.select({ courseName: depA.courseName }).from(depA),\n\t *   db.select({ courseName: depB.courseName }).from(depB)\n\t * );\n\t * ```\n\t */\n\texcept = this.createSetOperator('except', false);\n\n\t/**\n\t * Adds `except all` set operator to the query.\n\t *\n\t * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all products that are ordered by regular customers but not by VIP customers\n\t * await db.select({\n\t *   productId: regularCustomerOrders.productId,\n\t *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n\t * })\n\t * .from(regularCustomerOrders)\n\t * .exceptAll(\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * // or\n\t * import { exceptAll } from 'drizzle-orm/pg-core'\n\t *\n\t * await exceptAll(\n\t *   db.select({\n\t *     productId: regularCustomerOrders.productId,\n\t *     quantityOrdered: regularCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(regularCustomerOrders),\n\t *   db.select({\n\t *     productId: vipCustomerOrders.productId,\n\t *     quantityOrdered: vipCustomerOrders.quantityOrdered\n\t *   })\n\t *   .from(vipCustomerOrders)\n\t * );\n\t * ```\n\t */\n\texceptAll = this.createSetOperator('except', true);\n\n\t/** @internal */\n\taddSetOperators(setOperators: PgSelectConfig['setOperators']): PgSelectWithout<\n\t\tthis,\n\t\tTDynamic,\n\t\tPgSetOperatorExcludedMethods,\n\t\ttrue\n\t> {\n\t\tthis.config.setOperators.push(...setOperators);\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `where` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#filtering}\n\t *\n\t * @param where the `where` clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be selected.\n\t *\n\t * ```ts\n\t * // Select all cars with green color\n\t * await db.select().from(cars).where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.select().from(cars).where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Select all BMW cars with a green color\n\t * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Select all cars with the green or blue color\n\t * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(\n\t\twhere: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'where'> {\n\t\tif (typeof where === 'function') {\n\t\t\twhere = where(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `having` clause to the query.\n\t *\n\t * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @param having the `having` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all brands with more than one car\n\t * await db.select({\n\t * \tbrand: cars.brand,\n\t * \tcount: sql<number>`cast(count(${cars.id}) as int)`,\n\t * })\n\t *   .from(cars)\n\t *   .groupBy(cars.brand)\n\t *   .having(({ count }) => gt(count, 1));\n\t * ```\n\t */\n\thaving(\n\t\thaving: ((aliases: this['_']['selection']) => SQL | undefined) | SQL | undefined,\n\t): PgSelectWithout<this, TDynamic, 'having'> {\n\t\tif (typeof having === 'function') {\n\t\t\thaving = having(\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'sql', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t}\n\t\tthis.config.having = having;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `group by` clause to the query.\n\t *\n\t * Calling this method will group rows that have the same values into summary rows, often used for aggregation purposes.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Group and count people by their last names\n\t * await db.select({\n\t *    lastName: people.lastName,\n\t *    count: sql<number>`cast(count(*) as int)`\n\t * })\n\t *   .from(people)\n\t *   .groupBy(people.lastName);\n\t * ```\n\t */\n\tgroupBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'groupBy'>;\n\tgroupBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'groupBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst groupBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\t\t\tthis.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];\n\t\t} else {\n\t\t\tthis.config.groupBy = columns as (PgColumn | SQL | SQL.Aliased)[];\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `order by` clause to the query.\n\t *\n\t * Calling this method will sort the result-set in ascending or descending order. By default, the sort order is ascending.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#order-by}\n\t *\n\t * @example\n\t *\n\t * ```\n\t * // Select cars ordered by year\n\t * await db.select().from(cars).orderBy(cars.year);\n\t * ```\n\t *\n\t * You can specify whether results are in ascending or descending order with the `asc()` and `desc()` operators.\n\t *\n\t * ```ts\n\t * // Select cars ordered by year in descending order\n\t * await db.select().from(cars).orderBy(desc(cars.year));\n\t *\n\t * // Select cars ordered by year and price\n\t * await db.select().from(cars).orderBy(asc(cars.year), desc(cars.price));\n\t * ```\n\t */\n\torderBy(\n\t\tbuilder: (aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>,\n\t): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(...columns: (PgColumn | SQL | SQL.Aliased)[]): PgSelectWithout<this, TDynamic, 'orderBy'>;\n\torderBy(\n\t\t...columns:\n\t\t\t| [(aliases: this['_']['selection']) => ValueOrArray<PgColumn | SQL | SQL.Aliased>]\n\t\t\t| (PgColumn | SQL | SQL.Aliased)[]\n\t): PgSelectWithout<this, TDynamic, 'orderBy'> {\n\t\tif (typeof columns[0] === 'function') {\n\t\t\tconst orderBy = columns[0](\n\t\t\t\tnew Proxy(\n\t\t\t\t\tthis.config.fields,\n\t\t\t\t\tnew SelectionProxyHandler({ sqlAliasedBehavior: 'alias', sqlBehavior: 'sql' }),\n\t\t\t\t) as TSelection,\n\t\t\t);\n\n\t\t\tconst orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t} else {\n\t\t\tconst orderByArray = columns as (PgColumn | SQL | SQL.Aliased)[];\n\n\t\t\tif (this.config.setOperators.length > 0) {\n\t\t\t\tthis.config.setOperators.at(-1)!.orderBy = orderByArray;\n\t\t\t} else {\n\t\t\t\tthis.config.orderBy = orderByArray;\n\t\t\t}\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `limit` clause to the query.\n\t *\n\t * Calling this method will set the maximum number of rows that will be returned by this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param limit the `limit` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the first 10 people from this query.\n\t * await db.select().from(people).limit(10);\n\t * ```\n\t */\n\tlimit(limit: number | Placeholder): PgSelectWithout<this, TDynamic, 'limit'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.limit = limit;\n\t\t} else {\n\t\t\tthis.config.limit = limit;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds an `offset` clause to the query.\n\t *\n\t * Calling this method will skip a number of rows when returning results from this query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}\n\t *\n\t * @param offset the `offset` clause.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Get the 10th-20th people from this query.\n\t * await db.select().from(people).offset(10).limit(10);\n\t * ```\n\t */\n\toffset(offset: number | Placeholder): PgSelectWithout<this, TDynamic, 'offset'> {\n\t\tif (this.config.setOperators.length > 0) {\n\t\t\tthis.config.setOperators.at(-1)!.offset = offset;\n\t\t} else {\n\t\t\tthis.config.offset = offset;\n\t\t}\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `for` clause to the query.\n\t *\n\t * Calling this method will specify a lock strength for this query that controls how strictly it acquires exclusive access to the rows being queried.\n\t *\n\t * See docs: {@link https://www.postgresql.org/docs/current/sql-select.html#SQL-FOR-UPDATE-SHARE}\n\t *\n\t * @param strength the lock strength.\n\t * @param config the lock configuration.\n\t */\n\tfor(strength: LockStrength, config: LockConfig = {}): PgSelectWithout<this, TDynamic, 'for'> {\n\t\tthis.config.lockingClause = { strength, config };\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildSelectQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\tas<TAlias extends string>(\n\t\talias: TAlias,\n\t): SubqueryWithSelection<this['_']['selectedFields'], TAlias> {\n\t\treturn new Proxy(\n\t\t\tnew Subquery(this.getSQL(), this.config.fields, alias),\n\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as SubqueryWithSelection<this['_']['selectedFields'], TAlias>;\n\t}\n\n\t/** @internal */\n\toverride getSelectedFields(): this['_']['selectedFields'] {\n\t\treturn new Proxy(\n\t\t\tthis.config.fields,\n\t\t\tnew SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t) as this['_']['selectedFields'];\n\t}\n\n\t$dynamic(): PgSelectDynamic<this> {\n\t\treturn this;\n\t}\n}\n\nexport interface PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult extends any[] = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields extends ColumnsSelection = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends\n\tPgSelectQueryBuilderBase<\n\t\tPgSelectHKT,\n\t\tTTableName,\n\t\tTSelection,\n\t\tTSelectMode,\n\t\tTNullabilityMap,\n\t\tTDynamic,\n\t\tTExcludedMethods,\n\t\tTResult,\n\t\tTSelectedFields\n\t>,\n\tQueryPromise<TResult>,\n\tSQLWrapper\n{}\n\nexport class PgSelectBase<\n\tTTableName extends string | undefined,\n\tTSelection extends ColumnsSelection,\n\tTSelectMode extends SelectMode,\n\tTNullabilityMap extends Record<string, JoinNullability> = TTableName extends string ? Record<TTableName, 'not-null'>\n\t\t: {},\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n\tTResult = SelectResult<TSelection, TSelectMode, TNullabilityMap>[],\n\tTSelectedFields = BuildSubquerySelection<TSelection, TNullabilityMap>,\n> extends PgSelectQueryBuilderBase<\n\tPgSelectHKT,\n\tTTableName,\n\tTSelection,\n\tTSelectMode,\n\tTNullabilityMap,\n\tTDynamic,\n\tTExcludedMethods,\n\tTResult,\n\tTSelectedFields\n> implements RunnableQuery<TResult, 'pg'>, SQLWrapper {\n\tstatic readonly [entityKind]: string = 'PgSelect';\n\n\t/** @internal */\n\t_prepare(name?: string): PgSelectPrepare<this> {\n\t\tconst { session, config, dialect, joinsNotNullableMap } = this;\n\t\tif (!session) {\n\t\t\tthrow new Error('Cannot execute a query on a query builder. Please use a database instance instead.');\n\t\t}\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst fieldsList = orderSelectedFields<PgColumn>(config.fields);\n\t\t\tconst query = session.prepareQuery<\n\t\t\t\tPreparedQueryConfig & { execute: TResult }\n\t\t\t>(dialect.sqlToQuery(this.getSQL()), fieldsList, name, true);\n\t\t\tquery.joinsNotNullableMap = joinsNotNullableMap;\n\t\t\treturn query;\n\t\t});\n\t}\n\n\t/**\n\t * Create a prepared statement for this query. This allows\n\t * the database to remember this query for the given session\n\t * and call it by name, rather than specifying the full query.\n\t *\n\t * {@link https://www.postgresql.org/docs/current/sql-prepare.html | Postgres prepare documentation}\n\t */\n\tprepare(name: string): PgSelectPrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues);\n\t\t});\n\t};\n}\n\napplyMixins(PgSelectBase, [QueryPromise]);\n\nfunction createSetOperator(type: SetOperator, isAll: boolean): PgCreateSetOperatorFn {\n\treturn (leftSelect, rightSelect, ...restSelects) => {\n\t\tconst setOperators = [rightSelect, ...restSelects].map((select) => ({\n\t\t\ttype,\n\t\t\tisAll,\n\t\t\trightSelect: select as AnyPgSelect,\n\t\t}));\n\n\t\tfor (const setOperator of setOperators) {\n\t\t\tif (!haveSameKeys((leftSelect as any).getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Set operator error (union / intersect / except): selected fields are not the same or are in a different order',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (leftSelect as AnyPgSelect).addSetOperators(setOperators) as any;\n\t};\n}\n\nconst getPgSetOperators = () => ({\n\tunion,\n\tunionAll,\n\tintersect,\n\tintersectAll,\n\texcept,\n\texceptAll,\n});\n\n/**\n * Adds `union` set operator to the query.\n *\n * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}\n *\n * @example\n *\n * ```ts\n * // Select all unique names from customers and users tables\n * import { union } from 'drizzle-orm/pg-core'\n *\n * await union(\n *   db.select({ name: users.name }).from(users),\n *   db.select({ name: customers.name }).from(customers)\n * );\n * // or\n * await db.select({ name: users.name })\n *   .from(users)\n *   .union(\n *     db.select({ name: customers.name }).from(customers)\n *   );\n * ```\n */\nexport const union = createSetOperator('union', false);\n\n/**\n * Adds `union all` set operator to the query.\n *\n * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}\n *\n * @example\n *\n * ```ts\n * // Select all transaction ids from both online and in-store sales\n * import { unionAll } from 'drizzle-orm/pg-core'\n *\n * await unionAll(\n *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),\n *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n * );\n * // or\n * await db.select({ transaction: onlineSales.transactionId })\n *   .from(onlineSales)\n *   .unionAll(\n *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)\n *   );\n * ```\n */\nexport const unionAll = createSetOperator('union', true);\n\n/**\n * Adds `intersect` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}\n *\n * @example\n *\n * ```ts\n * // Select course names that are offered in both departments A and B\n * import { intersect } from 'drizzle-orm/pg-core'\n *\n * await intersect(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .intersect(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const intersect = createSetOperator('intersect', false);\n\n/**\n * Adds `intersect all` set operator to the query.\n *\n * Calling this method will retain only the rows that are present in both result sets including all duplicates.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect-all}\n *\n * @example\n *\n * ```ts\n * // Select all products and quantities that are ordered by both regular and VIP customers\n * import { intersectAll } from 'drizzle-orm/pg-core'\n *\n * await intersectAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered\n * })\n * .from(regularCustomerOrders)\n * .intersectAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const intersectAll = createSetOperator('intersect', true);\n\n/**\n * Adds `except` set operator to the query.\n *\n * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}\n *\n * @example\n *\n * ```ts\n * // Select all courses offered in department A but not in department B\n * import { except } from 'drizzle-orm/pg-core'\n *\n * await except(\n *   db.select({ courseName: depA.courseName }).from(depA),\n *   db.select({ courseName: depB.courseName }).from(depB)\n * );\n * // or\n * await db.select({ courseName: depA.courseName })\n *   .from(depA)\n *   .except(\n *     db.select({ courseName: depB.courseName }).from(depB)\n *   );\n * ```\n */\nexport const except = createSetOperator('except', false);\n\n/**\n * Adds `except all` set operator to the query.\n *\n * Calling this method will retrieve all rows from the left query, except for the rows that are present in the result set of the right query.\n *\n * See docs: {@link https://orm.drizzle.team/docs/set-operations#except-all}\n *\n * @example\n *\n * ```ts\n * // Select all products that are ordered by regular customers but not by VIP customers\n * import { exceptAll } from 'drizzle-orm/pg-core'\n *\n * await exceptAll(\n *   db.select({\n *     productId: regularCustomerOrders.productId,\n *     quantityOrdered: regularCustomerOrders.quantityOrdered\n *   })\n *   .from(regularCustomerOrders),\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered\n *   })\n *   .from(vipCustomerOrders)\n * );\n * // or\n * await db.select({\n *   productId: regularCustomerOrders.productId,\n *   quantityOrdered: regularCustomerOrders.quantityOrdered,\n * })\n * .from(regularCustomerOrders)\n * .exceptAll(\n *   db.select({\n *     productId: vipCustomerOrders.productId,\n *     quantityOrdered: vipCustomerOrders.quantityOrdered,\n *   })\n *   .from(vipCustomerOrders)\n * );\n * ```\n */\nexport const exceptAll = createSetOperator('except', true);\n", "import { entityKind } from '~/entity.ts';\nimport { PgDialect } from '~/pg-core/dialect.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { PgColumn } from '../columns/index.ts';\nimport type { WithSubqueryWithSelection } from '../subquery.ts';\nimport { PgSelectBuilder } from './select.ts';\nimport type { SelectedFields } from './select.types.ts';\n\nexport class QueryBuilder {\n\tstatic readonly [entityKind]: string = 'PgQueryBuilder';\n\n\tprivate dialect: PgDialect | undefined;\n\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\tconst queryBuilder = this;\n\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(queryBuilder);\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\tfunction select(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction select<TSelection extends SelectedFields>(\n\t\t\tfields?: TSelection,\n\t\t): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinct(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined, 'qb'>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection, 'qb'>;\n\t\tfunction selectDistinctOn(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: SelectedFields,\n\t\t): PgSelectBuilder<SelectedFields | undefined, 'qb'> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: undefined,\n\t\t\t\tdialect: self.getDialect(),\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn };\n\t}\n\n\tselect(): PgSelectBuilder<undefined, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection, 'qb'>;\n\tselect<TSelection extends SelectedFields>(fields?: TSelection): PgSelectBuilder<TSelection | undefined, 'qb'> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t});\n\t}\n\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: SelectedFields,\n\t): PgSelectBuilder<SelectedFields | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: undefined,\n\t\t\tdialect: this.getDialect(),\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t// Lazy load dialect to avoid circular dependency\n\tprivate getDialect() {\n\t\tif (!this.dialect) {\n\t\t\tthis.dialect = new PgDialect();\n\t\t}\n\n\t\treturn this.dialect;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgMaterializedView } from '~/pg-core/view.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends\n\t\tQueryPromise<PgQueryResultKind<TQueryResult, never>>,\n\t\tRunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>,\n\t\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: PgQueryResultKind<TQueryResult, never>;\n\t};\n}\n\nexport class PgRefreshMaterializedView<TQueryResult extends PgQueryResultHKT>\n\textends QueryPromise<PgQueryResultKind<TQueryResult, never>>\n\timplements RunnableQuery<PgQueryResultKind<TQueryResult, never>, 'pg'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'PgRefreshMaterializedView';\n\n\tprivate config: {\n\t\tview: PgMaterializedView;\n\t\tconcurrently?: boolean;\n\t\twithNoData?: boolean;\n\t};\n\n\tconstructor(\n\t\tview: PgMaterializedView,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t) {\n\t\tsuper();\n\t\tthis.config = { view };\n\t}\n\n\tconcurrently(): this {\n\t\tif (this.config.withNoData !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.concurrently = true;\n\t\treturn this;\n\t}\n\n\twithNoData(): this {\n\t\tif (this.config.concurrently !== undefined) {\n\t\t\tthrow new Error('Cannot use concurrently and withNoData together');\n\t\t}\n\t\tthis.config.withNoData = true;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildRefreshMaterializedViewQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\treturn this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), undefined, name, true);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<\n\t\tPreparedQueryConfig & {\n\t\t\texecute: PgQueryResultKind<TQueryResult, never>;\n\t\t}\n\t> {\n\t\treturn this._prepare(name);\n\t}\n\n\texecute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute(placeholderValues);\n\t\t});\n\t};\n}\n", "//# sourceMappingURL=select.types.js.map", "import type { GetColumnData } from '~/column.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport type {\n\tPgPreparedQuery,\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { SelectResultFields } from '~/query-builders/select.types.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport type { Subquery } from '~/subquery.ts';\nimport { Table } from '~/table.ts';\nimport { mapUpdateSet, orderSelectedFields, type UpdateSet } from '~/utils.ts';\nimport type { PgColumn } from '../columns/common.ts';\nimport type { SelectedFields, SelectedFieldsOrdered } from './select.types.ts';\n\nexport interface PgUpdateConfig {\n\twhere?: SQL | undefined;\n\tset: UpdateSet;\n\ttable: PgTable;\n\treturning?: SelectedFieldsOrdered;\n\twithList?: Subquery[];\n}\n\nexport type PgUpdateSetSource<TTable extends PgTable> =\n\t& {\n\t\t[Key in keyof TTable['$inferInsert']]?:\n\t\t\t| GetColumnData<TTable['_']['columns'][Key]>\n\t\t\t| SQL;\n\t}\n\t& {};\n\nexport class PgUpdateBuilder<TTable extends PgTable, TQueryResult extends PgQueryResultHKT> {\n\tstatic readonly [entityKind]: string = 'PgUpdateBuilder';\n\n\tdeclare readonly _: {\n\t\treadonly table: TTable;\n\t};\n\n\tconstructor(\n\t\tprivate table: TTable,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\tprivate withList?: Subquery[],\n\t) {}\n\n\tset(values: PgUpdateSetSource<TTable>): PgUpdateBase<TTable, TQueryResult> {\n\t\treturn new PgUpdateBase<TTable, TQueryResult>(\n\t\t\tthis.table,\n\t\t\tmapUpdateSet(this.table, values),\n\t\t\tthis.session,\n\t\t\tthis.dialect,\n\t\t\tthis.withList,\n\t\t);\n\t}\n}\n\nexport type PgUpdateWithout<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tK extends keyof T & string,\n> = TDynamic extends true ? T : Omit<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['returning'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods'] | K\n\t>,\n\tT['_']['excludedMethods'] | K\n>;\n\nexport type PgUpdateReturningAll<T extends AnyPgUpdate, TDynamic extends boolean> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tT['_']['table']['$inferSelect'],\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdateReturning<\n\tT extends AnyPgUpdate,\n\tTDynamic extends boolean,\n\tTSelectedFields extends SelectedFields,\n> = PgUpdateWithout<\n\tPgUpdateBase<\n\t\tT['_']['table'],\n\t\tT['_']['queryResult'],\n\t\tSelectResultFields<TSelectedFields>,\n\t\tTDynamic,\n\t\tT['_']['excludedMethods']\n\t>,\n\tTDynamic,\n\t'returning'\n>;\n\nexport type PgUpdatePrepare<T extends AnyPgUpdate> = PgPreparedQuery<\n\tPreparedQueryConfig & {\n\t\texecute: T['_']['returning'] extends undefined ? PgQueryResultKind<T['_']['queryResult'], never>\n\t\t\t: T['_']['returning'][];\n\t}\n>;\n\nexport type PgUpdateDynamic<T extends AnyPgUpdate> = PgUpdate<\n\tT['_']['table'],\n\tT['_']['queryResult'],\n\tT['_']['returning']\n>;\n\nexport type PgUpdate<\n\tTTable extends PgTable = PgTable,\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = Record<string, unknown> | undefined,\n> = PgUpdateBase<TTable, TQueryResult, TReturning, true, never>;\n\ntype AnyPgUpdate = PgUpdateBase<any, any, any, any, any>;\n\nexport interface PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\tTDynamic extends boolean = false,\n\tTExcludedMethods extends string = never,\n> extends\n\tQueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>,\n\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\tSQLWrapper\n{\n\treadonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly table: TTable;\n\t\treadonly queryResult: TQueryResult;\n\t\treadonly returning: TReturning;\n\t\treadonly dynamic: TDynamic;\n\t\treadonly excludedMethods: TExcludedMethods;\n\t\treadonly result: TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[];\n\t};\n}\n\nexport class PgUpdateBase<\n\tTTable extends PgTable,\n\tTQueryResult extends PgQueryResultHKT,\n\tTReturning extends Record<string, unknown> | undefined = undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTDynamic extends boolean = false,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tTExcludedMethods extends string = never,\n> extends QueryPromise<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[]>\n\timplements\n\t\tRunnableQuery<TReturning extends undefined ? PgQueryResultKind<TQueryResult, never> : TReturning[], 'pg'>,\n\t\tSQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'PgUpdate';\n\n\tprivate config: PgUpdateConfig;\n\n\tconstructor(\n\t\ttable: TTable,\n\t\tset: UpdateSet,\n\t\tprivate session: PgSession,\n\t\tprivate dialect: PgDialect,\n\t\twithList?: Subquery[],\n\t) {\n\t\tsuper();\n\t\tthis.config = { set, table, withList };\n\t}\n\n\t/**\n\t * Adds a 'where' clause to the query.\n\t *\n\t * Calling this method will update only those rows that fulfill a specified condition.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param where the 'where' clause.\n\t *\n\t * @example\n\t * You can use conditional operators and `sql function` to filter the rows to be updated.\n\t *\n\t * ```ts\n\t * // Update all cars with green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'));\n\t * // or\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(sql`${cars.color} = 'green'`)\n\t * ```\n\t *\n\t * You can logically combine conditional operators with `and()` and `or()` operators:\n\t *\n\t * ```ts\n\t * // Update all BMW cars with a green color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));\n\t *\n\t * // Update all cars with the green or blue color\n\t * await db.update(cars).set({ color: 'red' })\n\t *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));\n\t * ```\n\t */\n\twhere(where: SQL | undefined): PgUpdateWithout<this, TDynamic, 'where'> {\n\t\tthis.config.where = where;\n\t\treturn this as any;\n\t}\n\n\t/**\n\t * Adds a `returning` clause to the query.\n\t *\n\t * Calling this method will return the specified fields of the updated rows. If no fields are specified, all fields will be returned.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update#update-with-returning}\n\t *\n\t * @example\n\t * ```ts\n\t * // Update all cars with the green color and return all fields\n\t * const updatedCars: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning();\n\t *\n\t * // Update all cars with the green color and return only their id and brand fields\n\t * const updatedCarsIdsAndBrands: { id: number, brand: string }[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.color, 'green'))\n\t *   .returning({ id: cars.id, brand: cars.brand });\n\t * ```\n\t */\n\treturning(): PgUpdateReturningAll<this, TDynamic>;\n\treturning<TSelectedFields extends SelectedFields>(\n\t\tfields: TSelectedFields,\n\t): PgUpdateReturning<this, TDynamic, TSelectedFields>;\n\treturning(\n\t\tfields: SelectedFields = this.config.table[Table.Symbol.Columns],\n\t): PgUpdateWithout<AnyPgUpdate, TDynamic, 'returning'> {\n\t\tthis.config.returning = orderSelectedFields<PgColumn>(fields);\n\t\treturn this as any;\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this.dialect.buildUpdateQuery(this.config);\n\t}\n\n\ttoSQL(): Query {\n\t\tconst { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());\n\t\treturn rest;\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgUpdatePrepare<this> {\n\t\treturn this.session.prepareQuery(this.dialect.sqlToQuery(this.getSQL()), this.config.returning, name, true);\n\t}\n\n\tprepare(name: string): PgUpdatePrepare<this> {\n\t\treturn this._prepare(name);\n\t}\n\n\toverride execute: ReturnType<this['prepare']>['execute'] = (placeholderValues) => {\n\t\treturn this._prepare().execute(placeholderValues);\n\t};\n\n\t$dynamic(): PgUpdateDynamic<this> {\n\t\treturn this as any;\n\t}\n}\n", "export * from './delete.ts';\nexport * from './insert.ts';\nexport * from './query-builder.ts';\nexport * from './refresh-materialized-view.ts';\nexport * from './select.ts';\nexport * from './select.types.ts';\nexport * from './update.ts';\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport {\n\ttype BuildQueryResult,\n\ttype BuildRelationalQueryResult,\n\ttype DBQueryConfig,\n\tmapRelationalRow,\n\ttype TableRelationalConfig,\n\ttype TablesRelationalConfig,\n} from '~/relations.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { Query, QueryWithTypings, SQL, SQLWrapper } from '~/sql/sql.ts';\nimport { tracer } from '~/tracing.ts';\nimport type { KnownKeysOnly } from '~/utils.ts';\nimport type { PgDialect } from '../dialect.ts';\nimport type { PgPreparedQuery, PgSession, PreparedQueryConfig } from '../session.ts';\nimport type { PgTable } from '../table.ts';\n\nexport class RelationalQueryBuilder<TSchema extends TablesRelationalConfig, TFields extends TableRelationalConfig> {\n\tstatic readonly [entityKind]: string = 'PgRelationalQueryBuilder';\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TSchema,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t) {}\n\n\tfindMany<TConfig extends DBQueryConfig<'many', true, TSchema, TFields>>(\n\t\tconfig?: KnownKeysOnly<TConfig, DBQueryConfig<'many', true, TSchema, TFields>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TConfig>[]> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? (config as DBQueryConfig<'many', true>) : {},\n\t\t\t'many',\n\t\t);\n\t}\n\n\tfindFirst<TSelection extends Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>(\n\t\tconfig?: KnownKeysOnly<TSelection, Omit<DBQueryConfig<'many', true, TSchema, TFields>, 'limit'>>,\n\t): PgRelationalQuery<BuildQueryResult<TSchema, TFields, TSelection> | undefined> {\n\t\treturn new PgRelationalQuery(\n\t\t\tthis.fullSchema,\n\t\t\tthis.schema,\n\t\t\tthis.tableNamesMap,\n\t\t\tthis.table,\n\t\t\tthis.tableConfig,\n\t\t\tthis.dialect,\n\t\t\tthis.session,\n\t\t\tconfig ? { ...(config as DBQueryConfig<'many', true> | undefined), limit: 1 } : { limit: 1 },\n\t\t\t'first',\n\t\t);\n\t}\n}\n\nexport class PgRelationalQuery<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper\n{\n\tstatic readonly [entityKind]: string = 'PgRelationalQuery';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tprivate fullSchema: Record<string, unknown>,\n\t\tprivate schema: TablesRelationalConfig,\n\t\tprivate tableNamesMap: Record<string, string>,\n\t\tprivate table: PgTable,\n\t\tprivate tableConfig: TableRelationalConfig,\n\t\tprivate dialect: PgDialect,\n\t\tprivate session: PgSession,\n\t\tprivate config: DBQueryConfig<'many', true> | true,\n\t\tprivate mode: 'many' | 'first',\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\t_prepare(name?: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\tconst { query, builtQuery } = this._toSQL();\n\n\t\t\treturn this.session.prepareQuery<PreparedQueryConfig & { execute: TResult }>(\n\t\t\t\tbuiltQuery,\n\t\t\t\tundefined,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\t(rawRows, mapColumnValue) => {\n\t\t\t\t\tconst rows = rawRows.map((row) =>\n\t\t\t\t\t\tmapRelationalRow(this.schema, this.tableConfig, row, query.selection, mapColumnValue)\n\t\t\t\t\t);\n\t\t\t\t\tif (this.mode === 'first') {\n\t\t\t\t\t\treturn rows[0] as TResult;\n\t\t\t\t\t}\n\t\t\t\t\treturn rows as TResult;\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t}\n\n\tprepare(name: string): PgPreparedQuery<PreparedQueryConfig & { execute: TResult }> {\n\t\treturn this._prepare(name);\n\t}\n\n\tprivate _getQuery() {\n\t\treturn this.dialect.buildRelationalQueryWithoutPK({\n\t\t\tfullSchema: this.fullSchema,\n\t\t\tschema: this.schema,\n\t\t\ttableNamesMap: this.tableNamesMap,\n\t\t\ttable: this.table,\n\t\t\ttableConfig: this.tableConfig,\n\t\t\tqueryConfig: this.config,\n\t\t\ttableAlias: this.tableConfig.tsName,\n\t\t});\n\t}\n\n\t/** @internal */\n\tgetSQL(): SQL {\n\t\treturn this._getQuery().sql as SQL;\n\t}\n\n\tprivate _toSQL(): { query: BuildRelationalQueryResult; builtQuery: QueryWithTypings } {\n\t\tconst query = this._getQuery();\n\n\t\tconst builtQuery = this.dialect.sqlToQuery(query.sql as SQL);\n\n\t\treturn { query, builtQuery };\n\t}\n\n\ttoSQL(): Query {\n\t\treturn this._toSQL().builtQuery;\n\t}\n\n\toverride execute(): Promise<TResult> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\treturn this._prepare().execute();\n\t\t});\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport { QueryPromise } from '~/query-promise.ts';\nimport type { RunnableQuery } from '~/runnable-query.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport type { Query, SQL, SQLWrapper } from '~/sql/sql.ts';\n\nexport interface PgRaw<TResult> extends QueryPromise<TResult>, RunnableQuery<TResult, 'pg'>, SQLWrapper {}\n\nexport class PgRaw<TResult> extends QueryPromise<TResult>\n\timplements RunnableQuery<TResult, 'pg'>, SQLWrapper, PreparedQuery\n{\n\tstatic readonly [entityKind]: string = 'PgRaw';\n\n\tdeclare readonly _: {\n\t\treadonly dialect: 'pg';\n\t\treadonly result: TResult;\n\t};\n\n\tconstructor(\n\t\tpublic execute: () => Promise<TResult>,\n\t\tprivate sql: SQL,\n\t\tprivate query: Query,\n\t\tprivate mapBatchResult: (result: unknown) => unknown,\n\t) {\n\t\tsuper();\n\t}\n\n\t/** @internal */\n\tgetSQL() {\n\t\treturn this.sql;\n\t}\n\n\tgetQuery() {\n\t\treturn this.query;\n\t}\n\n\tmapResult(result: unknown, isFromBatch?: boolean) {\n\t\treturn isFromBatch ? this.mapBatchResult(result) : result;\n\t}\n\n\t_prepare(): PreparedQuery {\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tisResponseInArrayMode() {\n\t\treturn false;\n\t}\n}\n", "import { entityKind } from '~/entity.ts';\nimport type { PgDialect } from '~/pg-core/dialect.ts';\nimport {\n\tPgDeleteBase,\n\tPgInsertBuilder,\n\tPgSelectBuilder,\n\tPgUpdateBuilder,\n\tQueryBuilder,\n} from '~/pg-core/query-builders/index.ts';\nimport type {\n\tPgQueryResultHKT,\n\tPgQueryResultKind,\n\tPgSession,\n\tPgTransaction,\n\tPgTransactionConfig,\n\tPreparedQueryConfig,\n} from '~/pg-core/session.ts';\nimport type { PgTable } from '~/pg-core/table.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { ExtractTablesWithRelations, RelationalSchemaConfig, TablesRelationalConfig } from '~/relations.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQLWrapper } from '~/sql/sql.ts';\nimport { WithSubquery } from '~/subquery.ts';\nimport type { DrizzleTypeError } from '~/utils.ts';\nimport type { PgColumn } from './columns/index.ts';\nimport { RelationalQueryBuilder } from './query-builders/query.ts';\nimport { PgRaw } from './query-builders/raw.ts';\nimport { PgRefreshMaterializedView } from './query-builders/refresh-materialized-view.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport type { WithSubqueryWithSelection } from './subquery.ts';\nimport type { PgMaterializedView } from './view.ts';\n\nexport class PgDatabase<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = ExtractTablesWithRelations<TFullSchema>,\n> {\n\tstatic readonly [entityKind]: string = 'PgDatabase';\n\n\tdeclare readonly _: {\n\t\treadonly schema: TSchema | undefined;\n\t\treadonly fullSchema: TFullSchema;\n\t\treadonly tableNamesMap: Record<string, string>;\n\t\treadonly session: PgSession<TQueryResult, TFullSchema, TSchema>;\n\t};\n\n\tquery: TFullSchema extends Record<string, never>\n\t\t? DrizzleTypeError<'Seems like the schema generic is missing - did you forget to add it to your DB type?'>\n\t\t: {\n\t\t\t[K in keyof TSchema]: RelationalQueryBuilder<TSchema, TSchema[K]>;\n\t\t};\n\n\tconstructor(\n\t\t/** @internal */\n\t\treadonly dialect: PgDialect,\n\t\t/** @internal */\n\t\treadonly session: PgSession<any, any, any>,\n\t\tschema: RelationalSchemaConfig<TSchema> | undefined,\n\t) {\n\t\tthis._ = schema\n\t\t\t? {\n\t\t\t\tschema: schema.schema,\n\t\t\t\tfullSchema: schema.fullSchema as TFullSchema,\n\t\t\t\ttableNamesMap: schema.tableNamesMap,\n\t\t\t\tsession,\n\t\t\t}\n\t\t\t: {\n\t\t\t\tschema: undefined,\n\t\t\t\tfullSchema: {} as TFullSchema,\n\t\t\t\ttableNamesMap: {},\n\t\t\t\tsession,\n\t\t\t};\n\t\tthis.query = {} as typeof this['query'];\n\t\tif (this._.schema) {\n\t\t\tfor (const [tableName, columns] of Object.entries(this._.schema)) {\n\t\t\t\t(this.query as PgDatabase<TQueryResult, Record<string, any>>['query'])[tableName] = new RelationalQueryBuilder(\n\t\t\t\t\tschema!.fullSchema,\n\t\t\t\t\tthis._.schema,\n\t\t\t\t\tthis._.tableNamesMap,\n\t\t\t\t\tschema!.fullSchema[tableName] as PgTable,\n\t\t\t\t\tcolumns,\n\t\t\t\t\tdialect,\n\t\t\t\t\tsession,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a subquery that defines a temporary named result set as a CTE.\n\t *\n\t * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param alias The alias for the subquery.\n\t *\n\t * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Create a subquery with alias 'sq' and use it in the select query\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t *\n\t * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:\n\t *\n\t * ```ts\n\t * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query\n\t * const sq = db.$with('sq').as(db.select({\n\t *   name: sql<string>`upper(${users.name})`.as('name'),\n\t * })\n\t * .from(users));\n\t *\n\t * const result = await db.with(sq).select({ name: sq.name }).from(sq);\n\t * ```\n\t */\n\t$with<TAlias extends string>(alias: TAlias) {\n\t\treturn {\n\t\t\tas<TSelection extends ColumnsSelection>(\n\t\t\t\tqb: TypedQueryBuilder<TSelection> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelection>),\n\t\t\t): WithSubqueryWithSelection<TSelection, TAlias> {\n\t\t\t\tif (typeof qb === 'function') {\n\t\t\t\t\tqb = qb(new QueryBuilder());\n\t\t\t\t}\n\n\t\t\t\treturn new Proxy(\n\t\t\t\t\tnew WithSubquery(qb.getSQL(), qb.getSelectedFields() as SelectedFields, alias, true),\n\t\t\t\t\tnew SelectionProxyHandler({ alias, sqlAliasedBehavior: 'alias', sqlBehavior: 'error' }),\n\t\t\t\t) as WithSubqueryWithSelection<TSelection, TAlias>;\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Incorporates a previously defined CTE (using `$with`) into the main query.\n\t *\n\t * This method allows the main query to reference a temporary named result set.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}\n\t *\n\t * @param queries The CTEs to incorporate into the main query.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Define a subquery 'sq' as a CTE using $with\n\t * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));\n\t *\n\t * // Incorporate the CTE 'sq' into the main query and select from it\n\t * const result = await db.with(sq).select().from(sq);\n\t * ```\n\t */\n\twith(...queries: WithSubquery[]) {\n\t\tconst self = this;\n\n\t\t/**\n\t\t * Creates a select query.\n\t\t *\n\t\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Select all columns and all rows from the 'cars' table\n\t\t * const allCars: Car[] = await db.select().from(cars);\n\t\t *\n\t\t * // Select specific columns and all rows from the 'cars' table\n\t\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   brand: cars.brand\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t *\n\t\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t\t *\n\t\t * ```ts\n\t\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t\t *   id: cars.id,\n\t\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t\t * })\n\t\t *   .from(cars);\n\t\t * ```\n\t\t */\n\t\tfunction select(): PgSelectBuilder<undefined>;\n\t\tfunction select<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction select(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct` expression to the select query.\n\t\t *\n\t\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select all unique rows from the 'cars' table\n\t\t * await db.selectDistinct()\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t\t *\n\t\t * // Select all unique brands from the 'cars' table\n\t\t * await db.selectDistinct({ brand: cars.brand })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinct(): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinct(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: true,\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Adds `distinct on` expression to the select query.\n\t\t *\n\t\t * Calling this method will specify how the unique rows are determined.\n\t\t *\n\t\t * Use `.from()` method to specify which table to select from.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t\t *\n\t\t * @param on The expression defining uniqueness.\n\t\t * @param fields The selection object.\n\t\t *\n\t\t * @example\n\t\t * ```ts\n\t\t * // Select the first row for each unique brand from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand])\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand);\n\t\t *\n\t\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t\t *   .from(cars)\n\t\t *   .orderBy(cars.brand, cars.color);\n\t\t * ```\n\t\t */\n\t\tfunction selectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\t\tfunction selectDistinctOn<TSelection extends SelectedFields>(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields: TSelection,\n\t\t): PgSelectBuilder<TSelection>;\n\t\tfunction selectDistinctOn(\n\t\t\ton: (PgColumn | SQLWrapper)[],\n\t\t\tfields?: SelectedFields,\n\t\t): PgSelectBuilder<SelectedFields | undefined> {\n\t\t\treturn new PgSelectBuilder({\n\t\t\t\tfields: fields ?? undefined,\n\t\t\t\tsession: self.session,\n\t\t\t\tdialect: self.dialect,\n\t\t\t\twithList: queries,\n\t\t\t\tdistinct: { on },\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Creates an update query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t\t *\n\t\t * Use `.set()` method to specify which values to update.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t\t *\n\t\t * @param table The table to update.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Update all rows in the 'cars' table\n\t\t * await db.update(cars).set({ color: 'red' });\n\t\t *\n\t\t * // Update rows with filters and conditions\n\t\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t\t *\n\t\t * // Update with returning clause\n\t\t * const updatedCar: Car[] = await db.update(cars)\n\t\t *   .set({ color: 'red' })\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction update<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgUpdateBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates an insert query.\n\t\t *\n\t\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t\t *\n\t\t * @param table The table to insert into.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Insert one row\n\t\t * await db.insert(cars).values({ brand: 'BMW' });\n\t\t *\n\t\t * // Insert multiple rows\n\t\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t\t *\n\t\t * // Insert with returning clause\n\t\t * const insertedCar: Car[] = await db.insert(cars)\n\t\t *   .values({ brand: 'BMW' })\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction insert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\t\treturn new PgInsertBuilder(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\t/**\n\t\t * Creates a delete query.\n\t\t *\n\t\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t\t *\n\t\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t\t *\n\t\t * @param table The table to delete from.\n\t\t *\n\t\t * @example\n\t\t *\n\t\t * ```ts\n\t\t * // Delete all rows in the 'cars' table\n\t\t * await db.delete(cars);\n\t\t *\n\t\t * // Delete rows with filters and conditions\n\t\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t\t *\n\t\t * // Delete with returning clause\n\t\t * const deletedCar: Car[] = await db.delete(cars)\n\t\t *   .where(eq(cars.id, 1))\n\t\t *   .returning();\n\t\t * ```\n\t\t */\n\t\tfunction delete_<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\t\treturn new PgDeleteBase(table, self.session, self.dialect, queries);\n\t\t}\n\n\t\treturn { select, selectDistinct, selectDistinctOn, update, insert, delete: delete_ };\n\t}\n\n\t/**\n\t * Creates a select query.\n\t *\n\t * Calling this method with no arguments will select all columns from the table. Pass a selection object to specify the columns you want to select.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Select all columns and all rows from the 'cars' table\n\t * const allCars: Car[] = await db.select().from(cars);\n\t *\n\t * // Select specific columns and all rows from the 'cars' table\n\t * const carsIdsAndBrands: { id: number; brand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   brand: cars.brand\n\t * })\n\t *   .from(cars);\n\t * ```\n\t *\n\t * Like in SQL, you can use arbitrary expressions as selection fields, not just table columns:\n\t *\n\t * ```ts\n\t * // Select specific columns along with expression and all rows from the 'cars' table\n\t * const carsIdsAndLowerNames: { id: number; lowerBrand: string }[] = await db.select({\n\t *   id: cars.id,\n\t *   lowerBrand: sql<string>`lower(${cars.brand})`,\n\t * })\n\t *   .from(cars);\n\t * ```\n\t */\n\tselect(): PgSelectBuilder<undefined>;\n\tselect<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselect(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct` expression to the select query.\n\t *\n\t * Calling this method will return only unique values. When multiple columns are selected, it returns rows with unique combinations of values in these columns.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select all unique rows from the 'cars' table\n\t * await db.selectDistinct()\n\t *   .from(cars)\n\t *   .orderBy(cars.id, cars.brand, cars.color);\n\t *\n\t * // Select all unique brands from the 'cars' table\n\t * await db.selectDistinct({ brand: cars.brand })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t * ```\n\t */\n\tselectDistinct(): PgSelectBuilder<undefined>;\n\tselectDistinct<TSelection extends SelectedFields>(fields: TSelection): PgSelectBuilder<TSelection>;\n\tselectDistinct(fields?: SelectedFields): PgSelectBuilder<SelectedFields | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: true,\n\t\t});\n\t}\n\n\t/**\n\t * Adds `distinct on` expression to the select query.\n\t *\n\t * Calling this method will specify how the unique rows are determined.\n\t *\n\t * Use `.from()` method to specify which table to select from.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/select#distinct}\n\t *\n\t * @param on The expression defining uniqueness.\n\t * @param fields The selection object.\n\t *\n\t * @example\n\t * ```ts\n\t * // Select the first row for each unique brand from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand])\n\t *   .from(cars)\n\t *   .orderBy(cars.brand);\n\t *\n\t * // Selects the first occurrence of each unique car brand along with its color from the 'cars' table\n\t * await db.selectDistinctOn([cars.brand], { brand: cars.brand, color: cars.color })\n\t *   .from(cars)\n\t *   .orderBy(cars.brand, cars.color);\n\t * ```\n\t */\n\tselectDistinctOn(on: (PgColumn | SQLWrapper)[]): PgSelectBuilder<undefined>;\n\tselectDistinctOn<TSelection extends SelectedFields>(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields: TSelection,\n\t): PgSelectBuilder<TSelection>;\n\tselectDistinctOn(\n\t\ton: (PgColumn | SQLWrapper)[],\n\t\tfields?: SelectedFields,\n\t): PgSelectBuilder<SelectedFields | undefined> {\n\t\treturn new PgSelectBuilder({\n\t\t\tfields: fields ?? undefined,\n\t\t\tsession: this.session,\n\t\t\tdialect: this.dialect,\n\t\t\tdistinct: { on },\n\t\t});\n\t}\n\n\t/**\n\t * Creates an update query.\n\t *\n\t * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.\n\t *\n\t * Use `.set()` method to specify which values to update.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/update}\n\t *\n\t * @param table The table to update.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Update all rows in the 'cars' table\n\t * await db.update(cars).set({ color: 'red' });\n\t *\n\t * // Update rows with filters and conditions\n\t * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));\n\t *\n\t * // Update with returning clause\n\t * const updatedCar: Car[] = await db.update(cars)\n\t *   .set({ color: 'red' })\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tupdate<TTable extends PgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult> {\n\t\treturn new PgUpdateBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates an insert query.\n\t *\n\t * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/insert}\n\t *\n\t * @param table The table to insert into.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Insert one row\n\t * await db.insert(cars).values({ brand: 'BMW' });\n\t *\n\t * // Insert multiple rows\n\t * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);\n\t *\n\t * // Insert with returning clause\n\t * const insertedCar: Car[] = await db.insert(cars)\n\t *   .values({ brand: 'BMW' })\n\t *   .returning();\n\t * ```\n\t */\n\tinsert<TTable extends PgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult> {\n\t\treturn new PgInsertBuilder(table, this.session, this.dialect);\n\t}\n\n\t/**\n\t * Creates a delete query.\n\t *\n\t * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.\n\t *\n\t * See docs: {@link https://orm.drizzle.team/docs/delete}\n\t *\n\t * @param table The table to delete from.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * // Delete all rows in the 'cars' table\n\t * await db.delete(cars);\n\t *\n\t * // Delete rows with filters and conditions\n\t * await db.delete(cars).where(eq(cars.color, 'green'));\n\t *\n\t * // Delete with returning clause\n\t * const deletedCar: Car[] = await db.delete(cars)\n\t *   .where(eq(cars.id, 1))\n\t *   .returning();\n\t * ```\n\t */\n\tdelete<TTable extends PgTable>(table: TTable): PgDeleteBase<TTable, TQueryResult> {\n\t\treturn new PgDeleteBase(table, this.session, this.dialect);\n\t}\n\n\trefreshMaterializedView<TView extends PgMaterializedView>(view: TView): PgRefreshMaterializedView<TQueryResult> {\n\t\treturn new PgRefreshMaterializedView(view, this.session, this.dialect);\n\t}\n\n\texecute<TRow extends Record<string, unknown> = Record<string, unknown>>(\n\t\tquery: SQLWrapper,\n\t): PgRaw<PgQueryResultKind<TQueryResult, TRow>> {\n\t\tconst sql = query.getSQL();\n\t\tconst builtQuery = this.dialect.sqlToQuery(sql);\n\t\tconst prepared = this.session.prepareQuery<\n\t\t\tPreparedQueryConfig & { execute: PgQueryResultKind<TQueryResult, TRow> }\n\t\t>(\n\t\t\tbuiltQuery,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\t\treturn new PgRaw(\n\t\t\t() => prepared.execute(),\n\t\t\tsql,\n\t\t\tbuiltQuery,\n\t\t\t(result) => prepared.mapResult(result, true),\n\t\t);\n\t}\n\n\ttransaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T> {\n\t\treturn this.session.transaction(transaction, config);\n\t}\n}\n\nexport type PgWithReplicas<Q> = Q & { $primary: Q };\n\nexport const withReplicas = <\n\tHKT extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown>,\n\tTSchema extends TablesRelationalConfig,\n\tQ extends PgDatabase<HKT, TFullSchema, TSchema>,\n>(\n\tprimary: Q,\n\treplicas: [Q, ...Q[]],\n\tgetReplica: (replicas: Q[]) => Q = () => replicas[Math.floor(Math.random() * replicas.length)]!,\n): PgWithReplicas<Q> => {\n\tconst select: Q['select'] = (...args: []) => getReplica(replicas).select(...args);\n\tconst selectDistinct: Q['selectDistinct'] = (...args: []) => getReplica(replicas).selectDistinct(...args);\n\tconst selectDistinctOn: Q['selectDistinctOn'] = (...args: [any]) => getReplica(replicas).selectDistinctOn(...args);\n\tconst $with: Q['with'] = (...args: any) => getReplica(replicas).with(...args);\n\n\tconst update: Q['update'] = (...args: [any]) => primary.update(...args);\n\tconst insert: Q['insert'] = (...args: [any]) => primary.insert(...args);\n\tconst $delete: Q['delete'] = (...args: [any]) => primary.delete(...args);\n\tconst execute: Q['execute'] = (...args: [any]) => primary.execute(...args);\n\tconst transaction: Q['transaction'] = (...args: [any]) => primary.transaction(...args);\n\tconst refreshMaterializedView: Q['refreshMaterializedView'] = (...args: [any]) =>\n\t\tprimary.refreshMaterializedView(...args);\n\n\treturn {\n\t\t...primary,\n\t\tupdate,\n\t\tinsert,\n\t\tdelete: $delete,\n\t\texecute,\n\t\ttransaction,\n\t\trefreshMaterializedView,\n\t\t$primary: primary,\n\t\tselect,\n\t\tselectDistinct,\n\t\tselectDistinctOn,\n\t\twith: $with,\n\t\tget query() {\n\t\t\treturn getReplica(replicas).query;\n\t\t},\n\t};\n};\n", "import { SQL } from '~/sql/sql.ts';\n\nimport { entityKind, is } from '~/entity.ts';\nimport type { ExtraConfigColumn, PgColumn } from './columns/index.ts';\nimport { IndexedColumn } from './columns/index.ts';\nimport type { PgTable } from './table.ts';\n\ninterface IndexConfig {\n\tname?: string;\n\n\tcolumns: Partial<IndexedColumn | SQL>[];\n\n\t/**\n\t * If true, the index will be created as `create unique index` instead of `create index`.\n\t */\n\tunique: boolean;\n\n\t/**\n\t * If true, the index will be created as `create index concurrently` instead of `create index`.\n\t */\n\tconcurrently?: boolean;\n\n\t/**\n\t * If true, the index will be created as `create index ... on only <table>` instead of `create index ... on <table>`.\n\t */\n\tonly: boolean;\n\n\t/**\n\t * Condition for partial index.\n\t */\n\twhere?: SQL;\n\n\t/**\n\t * The optional WITH clause specifies storage parameters for the index\n\t */\n\twith?: Record<string, any>;\n\n\t/**\n\t * The optional WITH clause method for the index\n\t */\n\tmethod?: 'btree' | string;\n}\n\nexport type IndexColumn = PgColumn;\n\nexport type PgIndexMethod = 'btree' | 'hash' | 'gist' | 'spgist' | 'gin' | 'brin' | 'hnsw' | 'ivfflat' | (string & {});\n\nexport type PgIndexOpClass =\n\t| 'abstime_ops'\n\t| 'access_method'\n\t| 'anyarray_eq'\n\t| 'anyarray_ge'\n\t| 'anyarray_gt'\n\t| 'anyarray_le'\n\t| 'anyarray_lt'\n\t| 'anyarray_ne'\n\t| 'bigint_ops'\n\t| 'bit_ops'\n\t| 'bool_ops'\n\t| 'box_ops'\n\t| 'bpchar_ops'\n\t| 'char_ops'\n\t| 'cidr_ops'\n\t| 'cstring_ops'\n\t| 'date_ops'\n\t| 'float_ops'\n\t| 'int2_ops'\n\t| 'int4_ops'\n\t| 'int8_ops'\n\t| 'interval_ops'\n\t| 'jsonb_ops'\n\t| 'macaddr_ops'\n\t| 'name_ops'\n\t| 'numeric_ops'\n\t| 'oid_ops'\n\t| 'oidint4_ops'\n\t| 'oidint8_ops'\n\t| 'oidname_ops'\n\t| 'oidvector_ops'\n\t| 'point_ops'\n\t| 'polygon_ops'\n\t| 'range_ops'\n\t| 'record_eq'\n\t| 'record_ge'\n\t| 'record_gt'\n\t| 'record_le'\n\t| 'record_lt'\n\t| 'record_ne'\n\t| 'text_ops'\n\t| 'time_ops'\n\t| 'timestamp_ops'\n\t| 'timestamptz_ops'\n\t| 'timetz_ops'\n\t| 'uuid_ops'\n\t| 'varbit_ops'\n\t| 'varchar_ops'\n\t// pg_vector types\n\t| 'xml_ops'\n\t| 'vector_l2_ops'\n\t| 'vector_ip_ops'\n\t| 'vector_cosine_ops'\n\t| 'vector_l1_ops'\n\t| 'bit_hamming_ops'\n\t| 'bit_jaccard_ops'\n\t| 'halfvec_l2_ops'\n\t| 'sparsevec_l2_op'\n\t| (string & {});\n\nexport class IndexBuilderOn {\n\tstatic readonly [entityKind]: string = 'PgIndexBuilderOn';\n\n\tconstructor(private unique: boolean, private name?: string) {}\n\n\ton(...columns: [Partial<ExtraConfigColumn> | SQL, ...Partial<ExtraConfigColumn | SQL>[]]): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\tfalse,\n\t\t\tthis.name,\n\t\t);\n\t}\n\n\tonOnly(...columns: [Partial<ExtraConfigColumn | SQL>, ...Partial<ExtraConfigColumn | SQL>[]]): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = it.defaultConfig;\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\ttrue,\n\t\t\tthis.name,\n\t\t);\n\t}\n\n\t/**\n\t * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.\n\t *\n\t * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.\n\t *\n\t * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**\n\t *\n\t * @param method The name of the index method to be used\n\t * @param columns\n\t * @returns\n\t */\n\tusing(\n\t\tmethod: PgIndexMethod,\n\t\t...columns: [Partial<ExtraConfigColumn | SQL>, ...Partial<ExtraConfigColumn | SQL>[]]\n\t): IndexBuilder {\n\t\treturn new IndexBuilder(\n\t\t\tcolumns.map((it) => {\n\t\t\t\tif (is(it, SQL)) {\n\t\t\t\t\treturn it;\n\t\t\t\t}\n\t\t\t\tit = it as ExtraConfigColumn;\n\t\t\t\tconst clonedIndexedColumn = new IndexedColumn(it.name, it.columnType!, it.indexConfig!);\n\t\t\t\tit.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));\n\t\t\t\treturn clonedIndexedColumn;\n\t\t\t}),\n\t\t\tthis.unique,\n\t\t\ttrue,\n\t\t\tthis.name,\n\t\t\tmethod,\n\t\t);\n\t}\n}\n\nexport interface AnyIndexBuilder {\n\tbuild(table: PgTable): Index;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IndexBuilder extends AnyIndexBuilder {}\n\nexport class IndexBuilder implements AnyIndexBuilder {\n\tstatic readonly [entityKind]: string = 'PgIndexBuilder';\n\n\t/** @internal */\n\tconfig: IndexConfig;\n\n\tconstructor(\n\t\tcolumns: Partial<IndexedColumn | SQL>[],\n\t\tunique: boolean,\n\t\tonly: boolean,\n\t\tname?: string,\n\t\tmethod: string = 'btree',\n\t) {\n\t\tthis.config = {\n\t\t\tname,\n\t\t\tcolumns,\n\t\t\tunique,\n\t\t\tonly,\n\t\t\tmethod,\n\t\t};\n\t}\n\n\tconcurrently(): this {\n\t\tthis.config.concurrently = true;\n\t\treturn this;\n\t}\n\n\twith(obj: Record<string, any>): this {\n\t\tthis.config.with = obj;\n\t\treturn this;\n\t}\n\n\twhere(condition: SQL): this {\n\t\tthis.config.where = condition;\n\t\treturn this;\n\t}\n\n\t/** @internal */\n\tbuild(table: PgTable): Index {\n\t\treturn new Index(this.config, table);\n\t}\n}\n\nexport class Index {\n\tstatic readonly [entityKind]: string = 'PgIndex';\n\n\treadonly config: IndexConfig & { table: PgTable };\n\n\tconstructor(config: IndexConfig, table: PgTable) {\n\t\tthis.config = { ...config, table };\n\t}\n}\n\nexport type GetColumnsTableName<TColumns> = TColumns extends PgColumn ? TColumns['_']['name']\n\t: TColumns extends PgColumn[] ? TColumns[number]['_']['name']\n\t: never;\n\nexport function index(name?: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(false, name);\n}\n\nexport function uniqueIndex(name?: string): IndexBuilderOn {\n\treturn new IndexBuilderOn(true, name);\n}\n", "import { entityKind, is } from '~/entity.ts';\n\nexport type PgSequenceOptions = {\n\tincrement?: number | string;\n\tminValue?: number | string;\n\tmaxValue?: number | string;\n\tstartWith?: number | string;\n\tcache?: number | string;\n\tcycle?: boolean;\n};\n\nexport class PgSequence {\n\tstatic readonly [entityKind]: string = 'PgSequence';\n\n\tconstructor(\n\t\tpublic readonly seqName: string | undefined,\n\t\tpublic readonly seqOptions: PgSequenceOptions | undefined,\n\t\tpublic readonly schema: string | undefined,\n\t) {\n\t}\n}\n\nexport function pgSequence(\n\tname: string,\n\toptions?: PgSequenceOptions,\n): PgSequence {\n\treturn pgSequenceWithSchema(name, options, undefined);\n}\n\n/** @internal */\nexport function pgSequenceWithSchema(\n\tname: string,\n\toptions?: PgSequenceOptions,\n\tschema?: string,\n): PgSequence {\n\treturn new PgSequence(name, options, schema);\n}\n\nexport function isPgSequence(obj: unknown): obj is PgSequence {\n\treturn is(obj, PgSequence);\n}\n", "export const PgViewConfig = Symbol.for('drizzle:PgViewConfig');\n", "import type { BuildColumns } from '~/column-builder.ts';\nimport { entityKind } from '~/entity.ts';\nimport type { TypedQueryBuilder } from '~/query-builders/query-builder.ts';\nimport type { AddAliasToSelection } from '~/query-builders/select.types.ts';\nimport { SelectionProxyHandler } from '~/selection-proxy.ts';\nimport type { ColumnsSelection, SQL } from '~/sql/sql.ts';\nimport { getTableColumns } from '~/utils.ts';\nimport type { PgColumn, PgColumnBuilderBase } from './columns/common.ts';\nimport { QueryBuilder } from './query-builders/query-builder.ts';\nimport type { SelectedFields } from './query-builders/select.types.ts';\nimport { pgTable } from './table.ts';\nimport { PgViewBase } from './view-base.ts';\nimport { PgViewConfig } from './view-common.ts';\n\nexport interface ViewWithConfig {\n\tcheckOption: 'local' | 'cascaded';\n\tsecurityBarrier: boolean;\n\tsecurityInvoker: boolean;\n}\n\nexport class DefaultViewBuilderCore<TConfig extends { name: string; columns?: unknown }> {\n\tstatic readonly [entityKind]: string = 'PgDefaultViewBuilderCore';\n\n\tdeclare readonly _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t\tprotected schema: string | undefined,\n\t) {}\n\n\tprotected config: {\n\t\twith?: ViewWithConfig;\n\t} = {};\n\n\twith(config: ViewWithConfig): this {\n\t\tthis.config.with = config;\n\t\treturn this;\n\t}\n}\n\nexport class ViewBuilder<TName extends string = string> extends DefaultViewBuilderCore<{ name: TName }> {\n\tstatic readonly [entityKind]: string = 'PgViewBuilder';\n\n\tas<TSelectedFields extends SelectedFields>(\n\t\tqb: TypedQueryBuilder<TSelectedFields> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelectedFields>),\n\t): PgViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelectedFields>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\tconst aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: aliasedSelection,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as PgViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>>;\n\t}\n}\n\nexport class ManualViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, PgColumnBuilderBase> = Record<string, PgColumnBuilderBase>,\n> extends DefaultViewBuilderCore<{ name: TName; columns: TColumns }> {\n\tstatic readonly [entityKind]: string = 'PgManualViewBuilder';\n\n\tprivate columns: Record<string, PgColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t\tschema: string | undefined,\n\t) {\n\t\tsuper(name, schema);\n\t\tthis.columns = getTableColumns(pgTable(name, columns));\n\t}\n\n\texisting(): PgViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n\n\tas(query: SQL): PgViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgView({\n\t\t\t\tpgConfig: this.config,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n}\n\nexport interface PgMaterializedViewWithConfig {\n\t[Key: string]: string | number | boolean | SQL;\n}\n\nexport class MaterializedViewBuilderCore<TConfig extends { name: string; columns?: unknown }> {\n\tstatic readonly [entityKind]: string = 'PgMaterializedViewBuilderCore';\n\n\tdeclare _: {\n\t\treadonly name: TConfig['name'];\n\t\treadonly columns: TConfig['columns'];\n\t};\n\n\tconstructor(\n\t\tprotected name: TConfig['name'],\n\t\tprotected schema: string | undefined,\n\t) {}\n\n\tprotected config: {\n\t\twith?: PgMaterializedViewWithConfig;\n\t\tusing?: string;\n\t\ttablespace?: string;\n\t\twithNoData?: boolean;\n\t} = {};\n\n\tusing(using: string): this {\n\t\tthis.config.using = using;\n\t\treturn this;\n\t}\n\n\twith(config: PgMaterializedViewWithConfig): this {\n\t\tthis.config.with = config;\n\t\treturn this;\n\t}\n\n\ttablespace(tablespace: string): this {\n\t\tthis.config.tablespace = tablespace;\n\t\treturn this;\n\t}\n\n\twithNoData(): this {\n\t\tthis.config.withNoData = true;\n\t\treturn this;\n\t}\n}\n\nexport class MaterializedViewBuilder<TName extends string = string>\n\textends MaterializedViewBuilderCore<{ name: TName }>\n{\n\tstatic readonly [entityKind]: string = 'PgMaterializedViewBuilder';\n\n\tas<TSelectedFields extends SelectedFields>(\n\t\tqb: TypedQueryBuilder<TSelectedFields> | ((qb: QueryBuilder) => TypedQueryBuilder<TSelectedFields>),\n\t): PgMaterializedViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>> {\n\t\tif (typeof qb === 'function') {\n\t\t\tqb = qb(new QueryBuilder());\n\t\t}\n\t\tconst selectionProxy = new SelectionProxyHandler<TSelectedFields>({\n\t\t\talias: this.name,\n\t\t\tsqlBehavior: 'error',\n\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\treplaceOriginalName: true,\n\t\t});\n\t\tconst aliasedSelection = new Proxy(qb.getSelectedFields(), selectionProxy);\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: {\n\t\t\t\t\twith: this.config.with,\n\t\t\t\t\tusing: this.config.using,\n\t\t\t\t\ttablespace: this.config.tablespace,\n\t\t\t\t\twithNoData: this.config.withNoData,\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: aliasedSelection,\n\t\t\t\t\tquery: qb.getSQL().inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tselectionProxy as any,\n\t\t) as PgMaterializedViewWithSelection<TName, false, AddAliasToSelection<TSelectedFields, TName, 'pg'>>;\n\t}\n}\n\nexport class ManualMaterializedViewBuilder<\n\tTName extends string = string,\n\tTColumns extends Record<string, PgColumnBuilderBase> = Record<string, PgColumnBuilderBase>,\n> extends MaterializedViewBuilderCore<{ name: TName; columns: TColumns }> {\n\tstatic readonly [entityKind]: string = 'PgManualMaterializedViewBuilder';\n\n\tprivate columns: Record<string, PgColumn>;\n\n\tconstructor(\n\t\tname: TName,\n\t\tcolumns: TColumns,\n\t\tschema: string | undefined,\n\t) {\n\t\tsuper(name, schema);\n\t\tthis.columns = getTableColumns(pgTable(name, columns));\n\t}\n\n\texisting(): PgMaterializedViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: undefined,\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgMaterializedViewWithSelection<TName, true, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n\n\tas(query: SQL): PgMaterializedViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>> {\n\t\treturn new Proxy(\n\t\t\tnew PgMaterializedView({\n\t\t\t\tpgConfig: undefined,\n\t\t\t\tconfig: {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t\tselectedFields: this.columns,\n\t\t\t\t\tquery: query.inlineParams(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\tnew SelectionProxyHandler({\n\t\t\t\talias: this.name,\n\t\t\t\tsqlBehavior: 'error',\n\t\t\t\tsqlAliasedBehavior: 'alias',\n\t\t\t\treplaceOriginalName: true,\n\t\t\t}),\n\t\t) as PgMaterializedViewWithSelection<TName, false, BuildColumns<TName, TColumns, 'pg'>>;\n\t}\n}\n\nexport class PgView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends PgViewBase<TName, TExisting, TSelectedFields> {\n\tstatic readonly [entityKind]: string = 'PgView';\n\n\t[PgViewConfig]: {\n\t\twith?: ViewWithConfig;\n\t} | undefined;\n\n\tconstructor({ pgConfig, config }: {\n\t\tpgConfig: {\n\t\t\twith?: ViewWithConfig;\n\t\t} | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tif (pgConfig) {\n\t\t\tthis[PgViewConfig] = {\n\t\t\t\twith: pgConfig.with,\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport type PgViewWithSelection<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> = PgView<TName, TExisting, TSelectedFields> & TSelectedFields;\n\nexport const PgMaterializedViewConfig = Symbol.for('drizzle:PgMaterializedViewConfig');\n\nexport class PgMaterializedView<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> extends PgViewBase<TName, TExisting, TSelectedFields> {\n\tstatic readonly [entityKind]: string = 'PgMaterializedView';\n\n\treadonly [PgMaterializedViewConfig]: {\n\t\treadonly with?: PgMaterializedViewWithConfig;\n\t\treadonly using?: string;\n\t\treadonly tablespace?: string;\n\t\treadonly withNoData?: boolean;\n\t} | undefined;\n\n\tconstructor({ pgConfig, config }: {\n\t\tpgConfig: {\n\t\t\twith: PgMaterializedViewWithConfig | undefined;\n\t\t\tusing: string | undefined;\n\t\t\ttablespace: string | undefined;\n\t\t\twithNoData: boolean | undefined;\n\t\t} | undefined;\n\t\tconfig: {\n\t\t\tname: TName;\n\t\t\tschema: string | undefined;\n\t\t\tselectedFields: SelectedFields;\n\t\t\tquery: SQL | undefined;\n\t\t};\n\t}) {\n\t\tsuper(config);\n\t\tthis[PgMaterializedViewConfig] = {\n\t\t\twith: pgConfig?.with,\n\t\t\tusing: pgConfig?.using,\n\t\t\ttablespace: pgConfig?.tablespace,\n\t\t\twithNoData: pgConfig?.withNoData,\n\t\t};\n\t}\n}\n\nexport type PgMaterializedViewWithSelection<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n\tTSelectedFields extends ColumnsSelection = ColumnsSelection,\n> = PgMaterializedView<TName, TExisting, TSelectedFields> & TSelectedFields;\n\n/** @internal */\nexport function pgViewWithSchema(\n\tname: string,\n\tselection: Record<string, PgColumnBuilderBase> | undefined,\n\tschema: string | undefined,\n): ViewBuilder | ManualViewBuilder {\n\tif (selection) {\n\t\treturn new ManualViewBuilder(name, selection, schema);\n\t}\n\treturn new ViewBuilder(name, schema);\n}\n\n/** @internal */\nexport function pgMaterializedViewWithSchema(\n\tname: string,\n\tselection: Record<string, PgColumnBuilderBase> | undefined,\n\tschema: string | undefined,\n): MaterializedViewBuilder | ManualMaterializedViewBuilder {\n\tif (selection) {\n\t\treturn new ManualMaterializedViewBuilder(name, selection, schema);\n\t}\n\treturn new MaterializedViewBuilder(name, schema);\n}\n\nexport function pgView<TName extends string>(name: TName): ViewBuilder<TName>;\nexport function pgView<TName extends string, TColumns extends Record<string, PgColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualViewBuilder<TName, TColumns>;\nexport function pgView(name: string, columns?: Record<string, PgColumnBuilderBase>): ViewBuilder | ManualViewBuilder {\n\treturn pgViewWithSchema(name, columns, undefined);\n}\n\nexport function pgMaterializedView<TName extends string>(name: TName): MaterializedViewBuilder<TName>;\nexport function pgMaterializedView<TName extends string, TColumns extends Record<string, PgColumnBuilderBase>>(\n\tname: TName,\n\tcolumns: TColumns,\n): ManualMaterializedViewBuilder<TName, TColumns>;\nexport function pgMaterializedView(\n\tname: string,\n\tcolumns?: Record<string, PgColumnBuilderBase>,\n): MaterializedViewBuilder | ManualMaterializedViewBuilder {\n\treturn pgMaterializedViewWithSchema(name, columns, undefined);\n}\n", "import { entityKind, is } from '~/entity.ts';\nimport { SQL, sql, type SQLWrapper } from '~/sql/sql.ts';\nimport type { pgEnum } from './columns/enum.ts';\nimport { pgEnumWithSchema } from './columns/enum.ts';\nimport { type pgSequence, pgSequenceWithSchema } from './sequence.ts';\nimport { type PgTableFn, pgTableWithSchema } from './table.ts';\nimport { type pgMaterializedView, pgMaterializedViewWithSchema, type pgView, pgViewWithSchema } from './view.ts';\n\nexport class PgSchema<TName extends string = string> implements SQLWrapper {\n\tstatic readonly [entityKind]: string = 'PgSchema';\n\tconstructor(\n\t\tpublic readonly schemaName: TName,\n\t) {}\n\n\ttable: PgTableFn<TName> = ((name, columns, extraConfig) => {\n\t\treturn pgTableWithSchema(name, columns, extraConfig, this.schemaName);\n\t});\n\n\tview = ((name, columns) => {\n\t\treturn pgViewWithSchema(name, columns, this.schemaName);\n\t}) as typeof pgView;\n\n\tmaterializedView = ((name, columns) => {\n\t\treturn pgMaterializedViewWithSchema(name, columns, this.schemaName);\n\t}) as typeof pgMaterializedView;\n\n\tenum: typeof pgEnum = ((name, values) => {\n\t\treturn pgEnumWithSchema(name, values, this.schemaName);\n\t});\n\n\tsequence: typeof pgSequence = ((name, options) => {\n\t\treturn pgSequenceWithSchema(name, options, this.schemaName);\n\t});\n\n\tgetSQL(): SQL {\n\t\treturn new SQL([sql.identifier(this.schemaName)]);\n\t}\n\n\tshouldOmitSQLParens(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport function isPgSchema(obj: unknown): obj is PgSchema {\n\treturn is(obj, PgSchema);\n}\n\nexport function pgSchema<T extends string>(name: T) {\n\tif (name === 'public') {\n\t\tthrow new Error(\n\t\t\t`You can't specify 'public' as schema name. Postgres is using public schema by default. If you want to use 'public' schema, just use pgTable() instead of creating a schema`,\n\t\t);\n\t}\n\n\treturn new PgSchema(name);\n}\n", "import { entityKind } from '~/entity.ts';\nimport { TransactionRollbackError } from '~/errors.ts';\nimport type { TablesRelationalConfig } from '~/relations.ts';\nimport type { PreparedQuery } from '~/session.ts';\nimport { type Query, type SQL, sql } from '~/sql/index.ts';\nimport { tracer } from '~/tracing.ts';\nimport { PgDatabase } from './db.ts';\nimport type { PgDialect } from './dialect.ts';\nimport type { SelectedFieldsOrdered } from './query-builders/select.types.ts';\n\nexport interface PreparedQueryConfig {\n\texecute: unknown;\n\tall: unknown;\n\tvalues: unknown;\n}\n\nexport abstract class PgPreparedQuery<T extends PreparedQueryConfig> implements PreparedQuery {\n\tconstructor(protected query: Query) {}\n\n\tgetQuery(): Query {\n\t\treturn this.query;\n\t}\n\n\tmapResult(response: unknown, _isFromBatch?: boolean): unknown {\n\t\treturn response;\n\t}\n\n\tstatic readonly [entityKind]: string = 'PgPreparedQuery';\n\n\t/** @internal */\n\tjoinsNotNullableMap?: Record<string, boolean>;\n\n\tabstract execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;\n\n\t/** @internal */\n\tabstract all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;\n\n\t/** @internal */\n\tabstract isResponseInArrayMode(): boolean;\n}\n\nexport interface PgTransactionConfig {\n\tisolationLevel?: 'read uncommitted' | 'read committed' | 'repeatable read' | 'serializable';\n\taccessMode?: 'read only' | 'read write';\n\tdeferrable?: boolean;\n}\n\nexport abstract class PgSession<\n\tTQueryResult extends PgQueryResultHKT = PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> {\n\tstatic readonly [entityKind]: string = 'PgSession';\n\n\tconstructor(protected dialect: PgDialect) {}\n\n\tabstract prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(\n\t\tquery: Query,\n\t\tfields: SelectedFieldsOrdered | undefined,\n\t\tname: string | undefined,\n\t\tisResponseInArrayMode: boolean,\n\t\tcustomResultMapper?: (rows: unknown[][], mapColumnValue?: (value: unknown) => unknown) => T['execute'],\n\t): PgPreparedQuery<T>;\n\n\texecute<T>(query: SQL): Promise<T> {\n\t\treturn tracer.startActiveSpan('drizzle.operation', () => {\n\t\t\tconst prepared = tracer.startActiveSpan('drizzle.prepareQuery', () => {\n\t\t\t\treturn this.prepareQuery<PreparedQueryConfig & { execute: T }>(\n\t\t\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tfalse,\n\t\t\t\t);\n\t\t\t});\n\n\t\t\treturn prepared.execute();\n\t\t});\n\t}\n\n\tall<T = unknown>(query: SQL): Promise<T[]> {\n\t\treturn this.prepareQuery<PreparedQueryConfig & { all: T[] }>(\n\t\t\tthis.dialect.sqlToQuery(query),\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t).all();\n\t}\n\n\tabstract transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t\tconfig?: PgTransactionConfig,\n\t): Promise<T>;\n}\n\nexport abstract class PgTransaction<\n\tTQueryResult extends PgQueryResultHKT,\n\tTFullSchema extends Record<string, unknown> = Record<string, never>,\n\tTSchema extends TablesRelationalConfig = Record<string, never>,\n> extends PgDatabase<TQueryResult, TFullSchema, TSchema> {\n\tstatic readonly [entityKind]: string = 'PgTransaction';\n\n\tconstructor(\n\t\tdialect: PgDialect,\n\t\tsession: PgSession<any, any, any>,\n\t\tprotected schema: {\n\t\t\tfullSchema: Record<string, unknown>;\n\t\t\tschema: TSchema;\n\t\t\ttableNamesMap: Record<string, string>;\n\t\t} | undefined,\n\t\tprotected readonly nestedIndex = 0,\n\t) {\n\t\tsuper(dialect, session, schema);\n\t}\n\n\trollback(): never {\n\t\tthrow new TransactionRollbackError();\n\t}\n\n\t/** @internal */\n\tgetTransactionConfigSQL(config: PgTransactionConfig): SQL {\n\t\tconst chunks: string[] = [];\n\t\tif (config.isolationLevel) {\n\t\t\tchunks.push(`isolation level ${config.isolationLevel}`);\n\t\t}\n\t\tif (config.accessMode) {\n\t\t\tchunks.push(config.accessMode);\n\t\t}\n\t\tif (typeof config.deferrable === 'boolean') {\n\t\t\tchunks.push(config.deferrable ? 'deferrable' : 'not deferrable');\n\t\t}\n\t\treturn sql.raw(chunks.join(' '));\n\t}\n\n\tsetTransaction(config: PgTransactionConfig): Promise<void> {\n\t\treturn this.session.execute(sql`set transaction ${this.getTransactionConfigSQL(config)}`);\n\t}\n\n\tabstract override transaction<T>(\n\t\ttransaction: (tx: PgTransaction<TQueryResult, TFullSchema, TSchema>) => Promise<T>,\n\t): Promise<T>;\n}\n\nexport interface PgQueryResultHKT {\n\treadonly $brand: 'PgQueryResultHKT';\n\treadonly row: unknown;\n\treadonly type: unknown;\n}\n\nexport type PgQueryResultKind<TKind extends PgQueryResultHKT, TRow> = (TKind & {\n\treadonly row: TRow;\n})['type'];\n", "//# sourceMappingURL=subquery.js.map", "import { is } from '~/entity.ts';\nimport { PgTable } from '~/pg-core/table.ts';\nimport { Table } from '~/table.ts';\nimport { ViewBaseConfig } from '~/view-common.ts';\nimport { type Check, CheckBuilder } from './checks.ts';\nimport type { AnyPgColumn } from './columns/index.ts';\nimport { type ForeignKey, ForeignKeyBuilder } from './foreign-keys.ts';\nimport type { Index } from './indexes.ts';\nimport { IndexBuilder } from './indexes.ts';\nimport { type PrimaryKey, PrimaryKeyBuilder } from './primary-keys.ts';\nimport { type UniqueConstraint, UniqueConstraintBuilder } from './unique-constraint.ts';\nimport { PgViewConfig } from './view-common.ts';\nimport { type PgMaterializedView, PgMaterializedViewConfig, type PgView } from './view.ts';\n\nexport function getTableConfig<TTable extends PgTable>(table: TTable) {\n\tconst columns = Object.values(table[Table.Symbol.Columns]);\n\tconst indexes: Index[] = [];\n\tconst checks: Check[] = [];\n\tconst primaryKeys: PrimaryKey[] = [];\n\tconst foreignKeys: ForeignKey[] = Object.values(table[PgTable.Symbol.InlineForeignKeys]);\n\tconst uniqueConstraints: UniqueConstraint[] = [];\n\tconst name = table[Table.Symbol.Name];\n\tconst schema = table[Table.Symbol.Schema];\n\n\tconst extraConfigBuilder = table[PgTable.Symbol.ExtraConfigBuilder];\n\n\tif (extraConfigBuilder !== undefined) {\n\t\tconst extraConfig = extraConfigBuilder(table[Table.Symbol.ExtraConfigColumns]);\n\t\tfor (const builder of Object.values(extraConfig)) {\n\t\t\tif (is(builder, IndexBuilder)) {\n\t\t\t\tindexes.push(builder.build(table));\n\t\t\t} else if (is(builder, CheckBuilder)) {\n\t\t\t\tchecks.push(builder.build(table));\n\t\t\t} else if (is(builder, UniqueConstraintBuilder)) {\n\t\t\t\tuniqueConstraints.push(builder.build(table));\n\t\t\t} else if (is(builder, PrimaryKeyBuilder)) {\n\t\t\t\tprimaryKeys.push(builder.build(table));\n\t\t\t} else if (is(builder, ForeignKeyBuilder)) {\n\t\t\t\tforeignKeys.push(builder.build(table));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcolumns,\n\t\tindexes,\n\t\tforeignKeys,\n\t\tchecks,\n\t\tprimaryKeys,\n\t\tuniqueConstraints,\n\t\tname,\n\t\tschema,\n\t};\n}\n\nexport function getViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: PgView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[PgViewConfig],\n\t};\n}\n\nexport function getMaterializedViewConfig<\n\tTName extends string = string,\n\tTExisting extends boolean = boolean,\n>(view: PgMaterializedView<TName, TExisting>) {\n\treturn {\n\t\t...view[ViewBaseConfig],\n\t\t...view[PgMaterializedViewConfig],\n\t};\n}\n\nexport type ColumnsWithTable<\n\tTTableName extends string,\n\tTForeignTableName extends string,\n\tTColumns extends AnyPgColumn<{ tableName: TTableName }>[],\n> = { [Key in keyof TColumns]: AnyPgColumn<{ tableName: TForeignTableName }> };\n", "export * from './array.ts';\n", "export * from './alias.ts';\nexport * from './checks.ts';\nexport * from './columns/index.ts';\nexport * from './db.ts';\nexport * from './dialect.ts';\nexport * from './foreign-keys.ts';\nexport * from './indexes.ts';\nexport * from './primary-keys.ts';\nexport * from './query-builders/index.ts';\nexport * from './schema.ts';\nexport * from './sequence.ts';\nexport * from './session.ts';\nexport * from './subquery.ts';\nexport * from './table.ts';\nexport * from './unique-constraint.ts';\nexport * from './utils.ts';\nexport * from './utils/index.ts';\nexport * from './view-common.ts';\nexport * from './view.ts';\n", null, "import {\n  sqliteTable,\n  text,\n  integer,\n  real,\n  primaryKey,\n} from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Organizations table\nexport const organizations = sqliteTable(\"organizations\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  auth0OrgId: text(\"auth0_org_id\").notNull().unique(),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Shows table\nexport const shows = sqliteTable(\"shows\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  language: text(\"language\"), // Language code (e.g. \"en\", \"es\")\n  categories: text(\"categories\"), // JSON string containing array of categories\n  author: text(\"author\"), // Show author/creator\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Episodes table\nexport const episodes = sqliteTable(\"episodes\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  showId: text(\"show_id\")\n    .notNull()\n    .references(() => shows.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  audioUrl: text(\"audio_url\"),\n  transcriptUrl: text(\"transcript_url\"),\n  encodedAudioUrls: text(\"encoded_audio_urls\"), // JSON string containing encoded audio URLs\n  published: integer(\"published\", { mode: \"boolean\" }).default(false),\n  publishedAt: text(\"published_at\"),\n  duration: integer(\"duration\"), // Duration in seconds\n  episodeNumber: integer(\"episode_number\"), // Episode number within season\n  seasonNumber: integer(\"season_number\"), // Season number\n  episodeType: text(\"episode_type\"), // full, trailer, bonus\n  author: text(\"author\"), // Episode-specific author/narrator\n  subtitle: text(\"subtitle\"), // iTunes subtitle\n  explicit: integer(\"explicit\", { mode: \"boolean\" }), // Explicit content flag\n  keywords: text(\"keywords\"), // JSON string containing array of keywords/tags\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Audio uploads table\nexport const audioUploads = sqliteTable(\"audio_uploads\", {\n  id: text(\"id\").primaryKey(),\n  episodeId: text(\"episode_id\")\n    .notNull()\n    .references(() => episodes.id, { onDelete: \"cascade\" }),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  url: text(\"url\").notNull(),\n  uploadedAt: text(\"uploaded_at\").notNull(),\n});\n\n// Image uploads table\nexport const imageUploads = sqliteTable(\"image_uploads\", {\n  id: text(\"id\").primaryKey(),\n  showId: text(\"show_id\").references(() => shows.id, { onDelete: \"cascade\" }),\n  episodeId: text(\"episode_id\").references(() => episodes.id, {\n    onDelete: \"cascade\",\n  }),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  url: text(\"url\").notNull(),\n  uploadedAt: text(\"uploaded_at\").notNull(),\n});\n\n// Tasks table for background job processing\nexport const tasks = sqliteTable(\"tasks\", {\n  id: integer(\"id\").primaryKey({ autoIncrement: true }),\n  type: text(\"type\").notNull(), // \"transcribe\", \"encode\", \"publish\", \"notification\", \"audio_processing\"\n  status: text(\"status\").notNull().default(\"pending\"), // \"pending\", \"processing\", \"done\", \"failed\", \"retry\"\n  payload: text(\"payload\"), // JSON string with input data\n  result: text(\"result\"), // JSON string with output data\n  error: text(\"error\"), // Error message if failed\n  attempts: integer(\"attempts\").default(0),\n  startedAt: text(\"started_at\"), // When task processing actually started\n  progress: integer(\"progress\").default(0), // Progress percentage (0-100)\n  step: text(\"step\"), // Current step description (e.g., \"2/10 Encoding audio for processing\")\n  workflowId: text(\"workflow_id\"), // Associated workflow instance ID\n  workflowInstanceId: text(\"workflow_instance_id\"), // Cloudflare workflow instance ID\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Workflows table to track workflow instances\nexport const workflows = sqliteTable(\"workflows\", {\n  id: text(\"id\").primaryKey(),\n  taskId: integer(\"task_id\").references(() => tasks.id, {\n    onDelete: \"cascade\",\n  }),\n  workflowName: text(\"workflow_name\").notNull(),\n  instanceId: text(\"instance_id\").notNull(), // Cloudflare workflow instance ID\n  status: text(\"status\").notNull().default(\"queued\"), // \"queued\", \"running\", \"paused\", \"completed\", \"failed\", \"cancelled\", \"terminated\"\n  episodeId: text(\"episode_id\"),\n  metadata: text(\"metadata\"), // JSON string with workflow metadata\n  progress: text(\"progress\"), // JSON string with step progress\n  estimatedProgress: integer(\"estimated_progress\").default(0), // Overall progress percentage (0-100)\n  estimatedDuration: text(\"estimated_duration\"),\n  actualDuration: integer(\"actual_duration\"), // Duration in seconds\n  error: text(\"error\"),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n  completedAt: text(\"completed_at\"),\n});\n\n// Campaigns table\nexport const campaigns = sqliteTable(\"campaigns\", {\n  id: text(\"id\").primaryKey(),\n  organizationId: text(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  advertiser: text(\"advertiser\"),\n  startDate: text(\"start_date\"),\n  endDate: text(\"end_date\"),\n  targetImpressions: integer(\"target_impressions\"),\n  priority: integer(\"priority\").notNull().default(5), // Lower number = higher priority\n  status: text(\"status\", { enum: [\"draft\", \"active\", \"paused\", \"ended\"] })\n    .notNull()\n    .default(\"draft\"),\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Creatives table\nexport const creatives = sqliteTable(\"creatives\", {\n  id: text(\"id\").primaryKey(),\n  campaignId: text(\"campaign_id\")\n    .notNull()\n    .references(() => campaigns.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: [\"audio\", \"video\", \"display\"] })\n    .notNull()\n    .default(\"audio\"),\n  audioUrl: text(\"audio_url\"),\n  imageUrl: text(\"image_url\"),\n  duration: integer(\"duration\"), // Length in seconds\n  placementType: text(\"placement_type\", { enum: [\"pre\", \"mid\", \"post\", \"any\"] })\n    .notNull()\n    .default(\"any\"),\n  language: text(\"language\"), // Optional (e.g. \"en\", \"es\")\n  createdAt: text(\"created_at\").notNull(),\n  updatedAt: text(\"updated_at\").notNull(),\n});\n\n// Campaign-Show junction table for many-to-many relationship\nexport const campaignShows = sqliteTable(\"campaign_shows\", {\n  campaignId: text(\"campaign_id\")\n    .notNull()\n    .references(() => campaigns.id, { onDelete: \"cascade\" }),\n  showId: text(\"show_id\")\n    .notNull()\n    .references(() => shows.id, { onDelete: \"cascade\" }),\n  createdAt: text(\"created_at\").notNull(),\n});\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  shows: many(shows),\n  campaigns: many(campaigns),\n}));\n\nexport const showsRelations = relations(shows, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [shows.organizationId],\n    references: [organizations.id],\n  }),\n  episodes: many(episodes),\n  imageUploads: many(imageUploads),\n  campaignShows: many(campaignShows),\n}));\n\nexport const episodesRelations = relations(episodes, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [episodes.organizationId],\n    references: [organizations.id],\n  }),\n  show: one(shows, {\n    fields: [episodes.showId],\n    references: [shows.id],\n  }),\n  audioUploads: many(audioUploads),\n  imageUploads: many(imageUploads),\n}));\n\nexport const audioUploadsRelations = relations(audioUploads, ({ one }) => ({\n  episode: one(episodes, {\n    fields: [audioUploads.episodeId],\n    references: [episodes.id],\n  }),\n}));\n\nexport const imageUploadsRelations = relations(imageUploads, ({ one }) => ({\n  show: one(shows, {\n    fields: [imageUploads.showId],\n    references: [shows.id],\n  }),\n  episode: one(episodes, {\n    fields: [imageUploads.episodeId],\n    references: [episodes.id],\n  }),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  workflow: one(workflows, {\n    fields: [tasks.id],\n    references: [workflows.taskId],\n  }),\n}));\n\nexport const workflowsRelations = relations(workflows, ({ one }) => ({\n  task: one(tasks, {\n    fields: [workflows.taskId],\n    references: [tasks.id],\n  }),\n}));\n\nexport const campaignsRelations = relations(campaigns, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [campaigns.organizationId],\n    references: [organizations.id],\n  }),\n  creatives: many(creatives),\n  campaignShows: many(campaignShows),\n}));\n\nexport const creativesRelations = relations(creatives, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [creatives.campaignId],\n    references: [campaigns.id],\n  }),\n}));\n\nexport const campaignShowsRelations = relations(campaignShows, ({ one }) => ({\n  campaign: one(campaigns, {\n    fields: [campaignShows.campaignId],\n    references: [campaigns.id],\n  }),\n  show: one(shows, {\n    fields: [campaignShows.showId],\n    references: [shows.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertOrganizationSchema = createInsertSchema(organizations);\nexport const selectOrganizationSchema = createSelectSchema(organizations);\n\nexport const insertShowSchema = createInsertSchema(shows);\nexport const selectShowSchema = createSelectSchema(shows);\n\nexport const insertEpisodeSchema = createInsertSchema(episodes);\nexport const selectEpisodeSchema = createSelectSchema(episodes);\n\nexport const insertAudioUploadSchema = createInsertSchema(audioUploads);\nexport const selectAudioUploadSchema = createSelectSchema(audioUploads);\n\nexport const insertImageUploadSchema = createInsertSchema(imageUploads);\nexport const selectImageUploadSchema = createSelectSchema(imageUploads);\n\nexport const insertTaskSchema = createInsertSchema(tasks);\nexport const selectTaskSchema = createSelectSchema(tasks);\n\nexport const insertWorkflowSchema = createInsertSchema(workflows);\nexport const selectWorkflowSchema = createSelectSchema(workflows);\n\nexport const insertCampaignSchema = createInsertSchema(campaigns);\nexport const selectCampaignSchema = createSelectSchema(campaigns);\n\nexport const insertCreativeSchema = createInsertSchema(creatives);\nexport const selectCreativeSchema = createSelectSchema(creatives);\n\nexport const insertCampaignShowSchema = createInsertSchema(campaignShows);\nexport const selectCampaignShowSchema = createSelectSchema(campaignShows);\n\n// Types\nexport type Organization = typeof organizations.$inferSelect;\nexport type NewOrganization = typeof organizations.$inferInsert;\n\nexport type Show = typeof shows.$inferSelect;\nexport type NewShow = typeof shows.$inferInsert;\n\nexport type Episode = typeof episodes.$inferSelect;\nexport type NewEpisode = typeof episodes.$inferInsert;\n\nexport type AudioUpload = typeof audioUploads.$inferSelect;\nexport type NewAudioUpload = typeof audioUploads.$inferInsert;\n\nexport type ImageUpload = typeof imageUploads.$inferSelect;\nexport type NewImageUpload = typeof imageUploads.$inferInsert;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type NewTask = typeof tasks.$inferInsert;\n\nexport type Workflow = typeof workflows.$inferSelect;\nexport type NewWorkflow = typeof workflows.$inferInsert;\n\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type NewCampaign = typeof campaigns.$inferInsert;\n\nexport type Creative = typeof creatives.$inferSelect;\nexport type NewCreative = typeof creatives.$inferInsert;\n\nexport type CampaignShow = typeof campaignShows.$inferSelect;\nexport type NewCampaignShow = typeof campaignShows.$inferInsert;\n", "import { drizzle } from \"drizzle-orm/d1\";\nimport * as schema from \"./schema\";\n\n// For Cloudflare Workers with D1\nlet db: ReturnType<typeof drizzle>;\n\nexport const getDatabase = (D1Database?: D1Database) => {\n  if (db) {\n    return db;\n  }\n\n  if (D1Database) {\n    // Production/development with D1 binding\n    db = drizzle(D1Database, { schema });\n    return db;\n  }\n\n  throw new Error(\n    \"D1 database binding is required. Make sure DB is bound in wrangler.toml\"\n  );\n};\n\nexport type Database = ReturnType<typeof getDatabase>;\n", "import { drizzle } from \"drizzle-orm/d1\";\nimport { eq, and, desc, asc, sql, or } from \"drizzle-orm\";\nimport { tasks, type Task, type NewTask } from \"../database/schema.js\";\nimport { getDatabase } from \"../database/client.js\";\n\nexport class TaskRepository {\n  private db;\n\n  constructor(database?: D1Database) {\n    this.db = getDatabase(database);\n  }\n\n  async create(\n    task: Omit<NewTask, \"id\" | \"createdAt\" | \"updatedAt\">\n  ): Promise<Task> {\n    const now = new Date().toISOString();\n    const newTask: NewTask = {\n      ...task,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    const result = await this.db.insert(tasks).values(newTask).returning();\n\n    return result[0];\n  }\n\n  async findById(id: number): Promise<Task | null> {\n    const result = await this.db.select().from(tasks).where(eq(tasks.id, id));\n\n    return result[0] || null;\n  }\n\n  async findByStatus(\n    status?: string,\n    limit = 10,\n    offset = 0,\n    sortBy = \"created_at\",\n    sortOrder = \"desc\"\n  ): Promise<Task[]> {\n    // Determine the sort column\n    const sortColumn =\n      sortBy === \"created_at\"\n        ? tasks.createdAt\n        : sortBy === \"updated_at\"\n        ? tasks.updatedAt\n        : sortBy === \"type\"\n        ? tasks.type\n        : sortBy === \"status\"\n        ? tasks.status\n        : tasks.createdAt; // default fallback\n\n    // Determine sort direction\n    const orderByColumn =\n      sortOrder === \"asc\" ? asc(sortColumn) : desc(sortColumn);\n\n    if (status) {\n      return await this.db\n        .select()\n        .from(tasks)\n        .where(eq(tasks.status, status))\n        .orderBy(orderByColumn)\n        .limit(limit)\n        .offset(offset);\n    }\n\n    return await this.db\n      .select()\n      .from(tasks)\n      .orderBy(orderByColumn)\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async findPendingTasks(limit = 5): Promise<Task[]> {\n    return await this.db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.status, \"pending\"))\n      .orderBy(tasks.createdAt)\n      .limit(limit);\n  }\n\n  async findPendingAndRetryTasks(limit = 5): Promise<Task[]> {\n    return await this.db\n      .select()\n      .from(tasks)\n      .where(or(eq(tasks.status, \"pending\"), eq(tasks.status, \"retry\")))\n      .orderBy(tasks.createdAt)\n      .limit(limit);\n  }\n\n  async updateStatus(\n    id: number,\n    status: string,\n    updates: {\n      result?: string;\n      error?: string;\n      attempts?: number;\n      startedAt?: string;\n      progress?: number;\n      step?: string;\n    } = {}\n  ): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const result = await this.db\n      .update(tasks)\n      .set({\n        status,\n        updatedAt: now,\n        ...updates,\n      })\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n\n  async incrementAttempts(id: number): Promise<Task | null> {\n    console.log(`Incrementing attempts for task ${id}`);\n    const task = await this.findById(id);\n    if (!task) {\n      console.log(`Task ${id} not found`);\n      return null;\n    }\n\n    console.log(\n      `Task ${id} current status: ${task.status}, attempts: ${\n        task.attempts || 0\n      }`\n    );\n    const updatedTask = await this.updateStatus(id, \"processing\", {\n      attempts: (task.attempts || 0) + 1,\n    });\n    console.log(\n      `Task ${id} updated status: ${updatedTask?.status}, attempts: ${updatedTask?.attempts}`\n    );\n\n    return updatedTask;\n  }\n\n  async markAsDone(id: number, result?: any): Promise<Task | null> {\n    return await this.updateStatus(id, \"done\", {\n      result: result ? JSON.stringify(result) : undefined,\n    });\n  }\n\n  async markAsFailed(id: number, error: string): Promise<Task | null> {\n    return await this.updateStatus(id, \"failed\", {\n      error,\n    });\n  }\n\n  async markAsRetry(\n    id: number,\n    error: string,\n    attempts: number\n  ): Promise<Task | null> {\n    return await this.updateStatus(id, \"retry\", {\n      error,\n      attempts,\n    });\n  }\n\n  async resetForRetry(id: number): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const result = await this.db\n      .update(tasks)\n      .set({\n        status: \"pending\",\n        error: null,\n        result: null,\n        progress: 0,\n        step: null,\n        startedAt: null,\n        updatedAt: now,\n      })\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n\n  async updateProgress(id: number, progress: number): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const result = await this.db\n      .update(tasks)\n      .set({\n        progress,\n        updatedAt: now,\n      })\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n\n  async updateStep(\n    id: number,\n    step: string,\n    progress?: number\n  ): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const updateData: any = {\n      step,\n      updatedAt: now,\n    };\n\n    if (progress !== undefined) {\n      updateData.progress = progress;\n    }\n\n    const result = await this.db\n      .update(tasks)\n      .set(updateData)\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n\n  async markAsStarted(id: number): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const result = await this.db\n      .update(tasks)\n      .set({\n        status: \"processing\",\n        startedAt: now,\n        progress: 0,\n        updatedAt: now,\n      })\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n\n  async update(\n    id: number,\n    updates: Partial<Omit<NewTask, \"id\" | \"createdAt\">>\n  ): Promise<Task | null> {\n    const now = new Date().toISOString();\n\n    const result = await this.db\n      .update(tasks)\n      .set({\n        ...updates,\n        updatedAt: now,\n      })\n      .where(eq(tasks.id, id))\n      .returning();\n\n    return result[0] || null;\n  }\n}\n", "import { drizzle } from \"drizzle-orm/d1\";\nimport { eq, desc, asc, and } from \"drizzle-orm\";\nimport {\n  workflows,\n  type Workflow,\n  type NewWorkflow,\n} from \"../database/schema.js\";\n\nexport class WorkflowRepository {\n  private db: ReturnType<typeof drizzle>;\n\n  constructor(database?: D1Database) {\n    if (database) {\n      this.db = drizzle(database);\n    } else {\n      // Create a mock db for testing purposes\n      this.db = {} as any;\n    }\n  }\n\n  async create(workflow: NewWorkflow): Promise<Workflow> {\n    const [result] = await this.db\n      .insert(workflows)\n      .values(workflow)\n      .returning();\n    return result;\n  }\n\n  async findById(id: string): Promise<Workflow | null> {\n    const result = await this.db\n      .select()\n      .from(workflows)\n      .where(eq(workflows.id, id))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async findByTaskId(taskId: number): Promise<Workflow | null> {\n    const result = await this.db\n      .select()\n      .from(workflows)\n      .where(eq(workflows.taskId, taskId))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async findByInstanceId(instanceId: string): Promise<Workflow | null> {\n    const result = await this.db\n      .select()\n      .from(workflows)\n      .where(eq(workflows.instanceId, instanceId))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async findByStatus(\n    status?: string,\n    limit = 10,\n    offset = 0,\n    sortBy = \"createdAt\",\n    sortOrder: \"asc\" | \"desc\" = \"desc\"\n  ): Promise<Workflow[]> {\n    let baseQuery = this.db.select().from(workflows);\n\n    if (status) {\n      baseQuery = baseQuery.where(\n        eq(workflows.status, status)\n      ) as typeof baseQuery;\n    }\n\n    const orderFn = sortOrder === \"desc\" ? desc : asc;\n    const sortColumn =\n      sortBy === \"createdAt\" ? workflows.createdAt : workflows.updatedAt;\n\n    return await baseQuery\n      .orderBy(orderFn(sortColumn))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async updateStatus(\n    id: string,\n    status: string,\n    updates?: {\n      error?: string;\n      completedAt?: string;\n      actualDuration?: number;\n      estimatedProgress?: number;\n      progress?: string;\n      metadata?: string;\n    }\n  ): Promise<Workflow | null> {\n    const updateData = {\n      status,\n      updatedAt: new Date().toISOString(),\n      ...updates,\n    };\n\n    const [result] = await this.db\n      .update(workflows)\n      .set(updateData)\n      .where(eq(workflows.id, id))\n      .returning();\n\n    return result || null;\n  }\n\n  async updateProgress(\n    id: string,\n    estimatedProgress: number,\n    progress?: string\n  ): Promise<void> {\n    await this.db\n      .update(workflows)\n      .set({\n        estimatedProgress,\n        progress,\n        updatedAt: new Date().toISOString(),\n      })\n      .where(eq(workflows.id, id));\n  }\n\n  async markAsCompleted(\n    id: string,\n    result?: any,\n    actualDuration?: number\n  ): Promise<Workflow | null> {\n    const completedAt = new Date().toISOString();\n    const updateData = {\n      status: \"completed\",\n      estimatedProgress: 100,\n      completedAt,\n      updatedAt: completedAt,\n      ...(actualDuration && { actualDuration }),\n      ...(result && { metadata: JSON.stringify(result) }),\n    };\n\n    const [updated] = await this.db\n      .update(workflows)\n      .set(updateData)\n      .where(eq(workflows.id, id))\n      .returning();\n\n    return updated || null;\n  }\n\n  async markAsFailed(\n    id: string,\n    error: string,\n    actualDuration?: number\n  ): Promise<Workflow | null> {\n    const completedAt = new Date().toISOString();\n    const updateData = {\n      status: \"failed\",\n      error,\n      completedAt,\n      updatedAt: completedAt,\n      ...(actualDuration && { actualDuration }),\n    };\n\n    const [updated] = await this.db\n      .update(workflows)\n      .set(updateData)\n      .where(eq(workflows.id, id))\n      .returning();\n\n    return updated || null;\n  }\n\n  async deleteById(id: string): Promise<boolean> {\n    const result = await this.db.delete(workflows).where(eq(workflows.id, id));\n\n    return (result as any).changes > 0;\n  }\n\n  async findByEpisodeId(episodeId: string): Promise<Workflow[]> {\n    return await this.db\n      .select()\n      .from(workflows)\n      .where(eq(workflows.episodeId, episodeId))\n      .orderBy(desc(workflows.createdAt));\n  }\n\n  async getStats(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    recentActivity: {\n      last24h: number;\n      last7d: number;\n      last30d: number;\n    };\n    successRate: number;\n  }> {\n    // Get all workflows for basic stats\n    const allWorkflows = await this.db.select().from(workflows);\n\n    const total = allWorkflows.length;\n    const byStatus = allWorkflows.reduce((acc, workflow) => {\n      acc[workflow.status] = (acc[workflow.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    // Calculate recent activity\n    const now = new Date();\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    const last7d = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const last30d = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    const recentActivity = {\n      last24h: allWorkflows.filter((w) => new Date(w.createdAt) >= last24h)\n        .length,\n      last7d: allWorkflows.filter((w) => new Date(w.createdAt) >= last7d)\n        .length,\n      last30d: allWorkflows.filter((w) => new Date(w.createdAt) >= last30d)\n        .length,\n    };\n\n    // Calculate success rate\n    const completed = byStatus.completed || 0;\n    const failed = byStatus.failed || 0;\n    const totalFinished = completed + failed;\n    const successRate =\n      totalFinished > 0 ? (completed / totalFinished) * 100 : 0;\n\n    return {\n      total,\n      byStatus,\n      recentActivity,\n      successRate,\n    };\n  }\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", "import { WorkflowRepository } from \"./repository.js\";\nimport { TaskRepository } from \"../tasks/repository.js\";\nimport type { Workflow } from \"../database/schema.js\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport interface WorkflowProgressUpdate {\n  step: string;\n  progress: number;\n  message?: string;\n  data?: any;\n}\n\nexport class WorkflowService {\n  private repository: WorkflowRepository;\n  private taskRepository: TaskRepository;\n\n  constructor(database?: D1Database) {\n    this.repository = new WorkflowRepository(database);\n    this.taskRepository = new TaskRepository(database);\n  }\n\n  async createWorkflow(\n    taskId: number,\n    workflowName: string,\n    params: any,\n    workflowBinding?: any // This is the Cloudflare Workflow binding\n  ): Promise<{ workflow: Workflow; instanceId: string }> {\n    const now = new Date().toISOString();\n    const workflowId = uuidv4();\n\n    // Create Cloudflare Workflow instance\n    let instanceId: string;\n\n    try {\n      if (workflowName === \"audio-processing\" && workflowBinding) {\n        const instance = await (workflowBinding as any).create({\n          id: workflowId,\n          params: {\n            ...params,\n            taskId: taskId.toString(), // Pass task ID to the workflow as string\n            workflowId, // Pass workflow ID to the workflow\n          },\n        });\n        instanceId = instance.id;\n      } else if (workflowName === \"import-show\" && workflowBinding) {\n        const instance = await (workflowBinding as any).create({\n          id: workflowId,\n          params: {\n            ...params,\n            taskId: taskId.toString(), // Pass task ID to the workflow as string\n            workflowId, // Pass workflow ID to the workflow\n          },\n        });\n        instanceId = instance.id;\n      } else {\n        throw new Error(\n          `Workflow ${workflowName} not available or binding not provided`\n        );\n      }\n    } catch (error) {\n      console.error(`Failed to create ${workflowName} workflow:`, error);\n      throw new Error(\n        `Failed to create workflow: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Create workflow record in database\n    const workflow = await this.repository.create({\n      id: workflowId,\n      taskId,\n      workflowName,\n      instanceId,\n      status: \"queued\",\n      episodeId: params.episodeId,\n      metadata: JSON.stringify(params),\n      estimatedProgress: 0,\n      estimatedDuration:\n        workflowName === \"audio-processing\"\n          ? \"5-15 minutes\"\n          : workflowName === \"import-show\"\n          ? \"2-10 minutes\"\n          : undefined,\n      createdAt: now,\n      updatedAt: now,\n    });\n\n    return { workflow, instanceId };\n  }\n\n  async getWorkflow(id: string): Promise<Workflow | null> {\n    return await this.repository.findById(id);\n  }\n\n  async getWorkflowByTaskId(taskId: number): Promise<Workflow | null> {\n    return await this.repository.findByTaskId(taskId);\n  }\n\n  async getWorkflowByInstanceId(instanceId: string): Promise<Workflow | null> {\n    return await this.repository.findByInstanceId(instanceId);\n  }\n\n  async updateWorkflowStatus(\n    workflowId: string,\n    status: string,\n    updates?: {\n      error?: string;\n      completedAt?: string;\n      actualDuration?: number;\n      estimatedProgress?: number;\n      progress?: string;\n      metadata?: any;\n    }\n  ): Promise<Workflow | null> {\n    const updateData = {\n      ...updates,\n      ...(updates?.metadata && { metadata: JSON.stringify(updates.metadata) }),\n      ...(updates?.progress &&\n        typeof updates.progress === \"object\" && {\n          progress: JSON.stringify(updates.progress),\n        }),\n    };\n\n    return await this.repository.updateStatus(workflowId, status, updateData);\n  }\n\n  async updateWorkflowProgress(\n    workflowId: string,\n    progressUpdate: WorkflowProgressUpdate\n  ): Promise<void> {\n    // Get current progress data\n    const workflow = await this.repository.findById(workflowId);\n    if (!workflow) {\n      throw new Error(`Workflow ${workflowId} not found`);\n    }\n\n    // Parse existing progress or create new\n    let currentProgress: Record<string, any> = {};\n    if (workflow.progress) {\n      try {\n        currentProgress = JSON.parse(workflow.progress);\n      } catch (error) {\n        console.warn(\"Failed to parse existing workflow progress:\", error);\n      }\n    }\n\n    // Update step progress\n    currentProgress[progressUpdate.step] = {\n      progress: progressUpdate.progress,\n      message: progressUpdate.message,\n      updatedAt: new Date().toISOString(),\n      ...(progressUpdate.data && { data: progressUpdate.data }),\n    };\n\n    // Calculate overall estimated progress based on step weights\n    const estimatedProgress = this.calculateOverallProgress(currentProgress);\n\n    // Update workflow progress\n    await this.repository.updateProgress(\n      workflowId,\n      estimatedProgress,\n      JSON.stringify(currentProgress)\n    );\n\n    // Also update the associated task progress\n    if (workflow.taskId) {\n      await this.taskRepository.updateProgress(\n        workflow.taskId,\n        estimatedProgress\n      );\n    }\n  }\n\n  async completeWorkflow(\n    workflowId: string,\n    result?: any,\n    actualDuration?: number\n  ): Promise<Workflow | null> {\n    const completed = await this.repository.markAsCompleted(\n      workflowId,\n      result,\n      actualDuration\n    );\n\n    // Mark associated task as done\n    if (completed?.taskId) {\n      await this.taskRepository.markAsDone(completed.taskId, result || {});\n    }\n\n    return completed;\n  }\n\n  async failWorkflow(\n    workflowId: string,\n    error: string,\n    actualDuration?: number\n  ): Promise<Workflow | null> {\n    const failed = await this.repository.markAsFailed(\n      workflowId,\n      error,\n      actualDuration\n    );\n\n    // Mark associated task as failed\n    if (failed?.taskId) {\n      await this.taskRepository.markAsFailed(failed.taskId, error);\n    }\n\n    return failed;\n  }\n\n  async getWorkflowsByEpisodeId(episodeId: string): Promise<Workflow[]> {\n    return await this.repository.findByEpisodeId(episodeId);\n  }\n\n  async getWorkflowStats(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    recentActivity: {\n      last24h: number;\n      last7d: number;\n      last30d: number;\n    };\n    successRate: number;\n  }> {\n    return await this.repository.getStats();\n  }\n\n  async listWorkflows(\n    status?: string,\n    limit = 10,\n    offset = 0,\n    sortBy = \"createdAt\",\n    sortOrder: \"asc\" | \"desc\" = \"desc\"\n  ): Promise<Workflow[]> {\n    return await this.repository.findByStatus(\n      status,\n      limit,\n      offset,\n      sortBy,\n      sortOrder\n    );\n  }\n\n  /**\n   * Calculate overall progress based on individual step progress\n   * This uses predefined weights for different workflow steps\n   */\n  private calculateOverallProgress(stepProgress: Record<string, any>): number {\n    // Define step weights for audio processing workflow\n    const stepWeights = {\n      \"initialize-workflow\": 5,\n      \"encode-for-processing\": 15,\n      \"prepare-chunk-storage\": 5,\n      \"audio-chunking\": 15,\n      \"transcribe-chunks\": 30,\n      \"audio-encoding\": 20,\n      \"update-episode-encodings\": 5,\n      \"cleanup-resources\": 3,\n      \"finalize-processing\": 2,\n    };\n\n    let totalWeight = 0;\n    let completedWeight = 0;\n\n    for (const [stepName, weight] of Object.entries(stepWeights)) {\n      totalWeight += weight;\n\n      if (stepProgress[stepName]) {\n        const stepProgressPercent = stepProgress[stepName].progress || 0;\n        completedWeight += (weight * stepProgressPercent) / 100;\n      }\n    }\n\n    return totalWeight > 0\n      ? Math.round((completedWeight / totalWeight) * 100)\n      : 0;\n  }\n\n  /**\n   * Handle workflow progress updates from Cloudflare Workflows\n   * This would be called by workflow steps to report progress\n   */\n  async handleWorkflowProgressUpdate(\n    instanceId: string,\n    step: string,\n    progress: number,\n    message?: string,\n    data?: any\n  ): Promise<void> {\n    const workflow = await this.repository.findByInstanceId(instanceId);\n    if (!workflow) {\n      console.warn(`Workflow with instance ID ${instanceId} not found`);\n      return;\n    }\n\n    await this.updateWorkflowProgress(workflow.id, {\n      step,\n      progress,\n      message,\n      data,\n    });\n  }\n}\n", "import { TaskRepository } from \"./repository.js\";\nimport { WorkflowService } from \"../workflows/service.js\";\nimport type { Task } from \"../database/schema.js\";\n\nexport type TaskType = \"audio_processing\" | \"import_show\";\n\nexport interface TaskPayload {\n  [key: string]: any;\n}\n\nexport interface TaskResult {\n  [key: string]: any;\n}\n\nexport class TaskService {\n  private repository: TaskRepository;\n  private workflowService: WorkflowService;\n  private audioProcessingWorkflow?: Workflow; // This is the Cloudflare Workflow binding\n  private importShowWorkflow?: Workflow; // This is the Cloudflare Workflow binding\n\n  constructor(\n    database?: D1Database,\n    audioProcessingWorkflow?: Workflow,\n    importShowWorkflow?: Workflow\n  ) {\n    this.repository = new TaskRepository(database);\n    this.workflowService = new WorkflowService(database);\n    this.audioProcessingWorkflow = audioProcessingWorkflow;\n    this.importShowWorkflow = importShowWorkflow;\n    console.log(\n      `TaskService initialized with workflows: audio=${!!audioProcessingWorkflow}, import=${!!importShowWorkflow}`\n    );\n  }\n\n  async createTask(type: TaskType, payload?: TaskPayload): Promise<Task> {\n    const now = new Date().toISOString();\n    const task = await this.repository.create({\n      type,\n      status: \"pending\",\n      attempts: 0,\n      createdAt: now,\n      updatedAt: now,\n      payload: payload ? JSON.stringify(payload) : undefined,\n    } as any);\n\n    // Immediately process workflow-enabled tasks\n    try {\n      if (type === \"audio_processing\" && payload) {\n        console.log(`Creating workflow for audio_processing task ${task.id}`);\n        await this.handleAudioProcessing({ ...payload, taskId: task.id });\n      } else if (type === \"import_show\" && payload) {\n        console.log(`Creating workflow for import_show task ${task.id}`);\n        await this.handleImportShow({ ...payload, taskId: task.id });\n      } else {\n        console.log(`Task ${task.id} created, will be processed in batch`);\n      }\n    } catch (error) {\n      console.error(`Failed to start workflow for task ${task.id}:`, error);\n      await this.repository.update(task.id, {\n        status: \"failed\",\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n\n    return task;\n  }\n\n  async getTask(id: number): Promise<Task | null> {\n    return await this.repository.findById(id);\n  }\n\n  async getTasks(\n    status?: string,\n    limit = 10,\n    offset = 0,\n    sortBy = \"created_at\",\n    sortOrder = \"desc\"\n  ): Promise<Task[]> {\n    return await this.repository.findByStatus(\n      status,\n      limit,\n      offset,\n      sortBy,\n      sortOrder\n    );\n  }\n\n  async retryTask(id: number): Promise<Task> {\n    const task = await this.repository.findById(id);\n    if (!task) {\n      throw new Error(\"Task not found\");\n    }\n\n    // Reset the task status to pending and clear errors\n    const retriedTask = await this.repository.resetForRetry(id);\n    if (!retriedTask) {\n      throw new Error(\"Failed to reset task for retry\");\n    }\n\n    // For workflow-enabled task types, immediately retry workflow creation\n    try {\n      if (retriedTask.type === \"audio_processing\" && retriedTask.payload) {\n        const payload = JSON.parse(retriedTask.payload);\n        console.log(\n          `Retrying workflow for audio_processing task ${retriedTask.id}`\n        );\n        await this.handleAudioProcessing({\n          ...payload,\n          taskId: retriedTask.id,\n        });\n        await this.repository.update(retriedTask.id, { status: \"running\" });\n      } else {\n        console.log(\n          `Task ${retriedTask.id} reset to pending, will be processed in next batch`\n        );\n      }\n    } catch (error) {\n      console.error(\n        `Failed to retry workflow for task ${retriedTask.id}:`,\n        error\n      );\n      await this.repository.update(retriedTask.id, {\n        status: \"failed\",\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n\n    return retriedTask;\n  }\n\n  // Method for task handlers to update progress\n  async updateTaskProgress(\n    taskId: number,\n    progress: number,\n    message?: string\n  ): Promise<Task | null> {\n    console.log(`Updating task ${taskId} progress to ${progress}%`);\n    const updates: any = { progress };\n    if (message) {\n      updates.result = JSON.stringify({ message, progress });\n      updates.step = message; // Also update the step field with the message\n    }\n    return await this.repository.updateStatus(taskId, \"processing\", updates);\n  }\n\n  // Method for workflows to update task status\n  async updateTaskStatus(\n    taskId: number,\n    status: string,\n    options: { message?: string } = {}\n  ): Promise<Task | null> {\n    console.log(`Updating task ${taskId} status to ${status}`);\n    const updates: any = {};\n    if (options.message) {\n      if (status === \"failed\") {\n        updates.error = options.message;\n      } else {\n        updates.result = JSON.stringify({ message: options.message, status });\n      }\n    }\n    return await this.repository.updateStatus(taskId, status, updates);\n  }\n\n  private async handleAudioProcessing(payload: TaskPayload): Promise<void> {\n    console.log(\n      `handleAudioProcessing called with workflow: ${!!this\n        .audioProcessingWorkflow}`\n    );\n    if (!this.audioProcessingWorkflow) {\n      console.error(\"Audio processing workflow is null/undefined\");\n      throw new Error(\"Audio processing workflow not available\");\n    }\n\n    const { taskId, episodeId, audioR2Key } = payload;\n    if (!episodeId || !audioR2Key) {\n      throw new Error(\n        \"Episode ID and audio R2 key are required for audio processing\"\n      );\n    }\n\n    console.log(\n      `Creating audio processing workflow for episode ${episodeId} (task ${taskId})`\n    );\n\n    try {\n      // Update task status to \"processing\" (in progress) before starting workflow\n      if (taskId) {\n        await this.repository.updateStatus(taskId, \"processing\", {\n          startedAt: new Date().toISOString(),\n        });\n        console.log(`Task ${taskId} status updated to processing`);\n      }\n\n      // Create workflow through the workflow service\n      const { workflow, instanceId } =\n        await this.workflowService.createWorkflow(\n          taskId || 0,\n          \"audio-processing\",\n          {\n            ...payload,\n            workflowId: undefined, // Will be set by the workflow service\n          },\n          this.audioProcessingWorkflow\n        );\n\n      console.log(\n        `Audio processing workflow created: ${workflow.id} (instance: ${instanceId})`\n      );\n\n      // Update task with workflow information\n      if (taskId) {\n        await this.repository.update(taskId, {\n          workflowId: workflow.id,\n          workflowInstanceId: instanceId,\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to create audio processing workflow:\", error);\n      throw error;\n    }\n  }\n\n  private async handleImportShow(payload: TaskPayload): Promise<void> {\n    console.log(\n      `handleImportShow called with workflow: ${!!this.importShowWorkflow}`\n    );\n    if (!this.importShowWorkflow) {\n      console.error(\"Import show workflow is null/undefined\");\n      throw new Error(\"Import show workflow not available\");\n    }\n\n    const { taskId, rssUrl } = payload;\n    if (!rssUrl) {\n      throw new Error(\"RSS URL is required for import show\");\n    }\n\n    console.log(\n      `Creating import show workflow for RSS ${rssUrl} (task ${taskId})`\n    );\n\n    try {\n      // Update task status to \"processing\" (in progress) before starting workflow\n      if (taskId) {\n        await this.repository.updateStatus(taskId, \"processing\", {\n          startedAt: new Date().toISOString(),\n        });\n        console.log(`Task ${taskId} status updated to processing`);\n      }\n\n      // Create workflow through the workflow service\n      const { workflow, instanceId } =\n        await this.workflowService.createWorkflow(\n          taskId || 0,\n          \"import-show\",\n          {\n            ...payload,\n            workflowId: undefined, // Will be set by the workflow service\n          },\n          this.importShowWorkflow\n        );\n\n      console.log(\n        `Import show workflow created: ${workflow.id} (instance: ${instanceId})`\n      );\n\n      // Update task with workflow information\n      if (taskId) {\n        await this.repository.update(taskId, {\n          workflowId: workflow.id,\n          workflowInstanceId: instanceId,\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to create import show workflow:\", error);\n      throw error;\n    }\n  }\n\n  async updateTaskStep(\n    taskId: number,\n    step: string,\n    progress?: number\n  ): Promise<void> {\n    try {\n      await this.repository.updateStep(taskId, step, progress);\n      console.log(\n        `Task ${taskId} step updated to: ${step}${\n          progress !== undefined ? ` (${progress}%)` : \"\"\n        }`\n      );\n    } catch (error) {\n      console.error(`Failed to update task ${taskId} step:`, error);\n      throw error;\n    }\n  }\n}\n", "import { z } from \"zod\";\n\n// Enhanced workflow environment bindings for import-show workflow\nexport type Env = {\n  DB: D1Database;\n  BUCKET: R2Bucket;\n  AI: Ai;\n  ENCODING_CONTAINER: DurableObjectNamespace;\n  IMPORT_SHOW_WORKFLOW: Workflow;\n  AUDIO_PROCESSING_WORKFLOW: Workflow;\n  // Secrets\n  R2_ACCESS_KEY_ID: string;\n  R2_SECRET_ACCESS_KEY: string;\n  R2_ENDPOINT: string;\n  STORAGE_SIGNATURE_SECRET: string;\n  SERVICE_BASE_URL?: string; // Base URL for the service (e.g., https://your-worker.workers.dev)\n};\n\n// RSS Episode structure\nexport const RSSEpisodeSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  audioUrl: z.string().url(),\n  imageUrl: z.string().url().nullable().optional(),\n  publishedAt: z.string().datetime().nullable().optional(),\n  duration: z.number().positive().nullable().optional(),\n  episodeNumber: z.number().int().nonnegative().nullable().optional(),\n  seasonNumber: z.number().int().nonnegative().nullable().optional(),\n  episodeType: z.string().nullable().optional(),\n  author: z.string().nullable().optional(),\n  subtitle: z.string().nullable().optional(),\n  explicit: z.boolean().nullable().optional(),\n  keywords: z.array(z.string()).nullable().optional(),\n});\n\n// RSS Show structure\nexport const RSSShowSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().url().nullable().optional(),\n  language: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n  author: z.string().optional(),\n  episodes: z.array(RSSEpisodeSchema),\n});\n\n// Import Show Parameters Schema\nexport const ImportShowParamsSchema = z.object({\n  rssUrl: z.string().url(\"Invalid RSS URL\"),\n  taskId: z.string().optional(),\n  workflowId: z.string().optional(),\n  skipExistingEpisodes: z.boolean().optional().default(false),\n  maxEpisodes: z.number().int().positive().optional().default(100),\n});\n\n// Workflow State Schema\nexport const ImportShowWorkflowStateSchema = z.object({\n  workflowId: z.string().uuid(),\n  rssUrl: z.string().url(),\n  taskId: z.string().optional(),\n  startedAt: z.string().datetime(),\n  skipExistingEpisodes: z.boolean(),\n  maxEpisodes: z.number().int().positive(),\n  showId: z.string().uuid().optional(), // Set after show creation\n  totalEpisodes: z.number().int().nonnegative().optional(),\n  processedEpisodes: z.number().int().nonnegative().optional().default(0),\n});\n\n// Episode Processing Result Schema\nexport const EpisodeProcessingResultSchema = z.object({\n  episodeId: z.string().uuid(),\n  title: z.string(),\n  status: z.enum([\"created\", \"skipped\", \"failed\"]),\n  error: z.string().optional(),\n  audioR2Key: z.string().optional(),\n  audioProcessingTaskId: z.string().optional(),\n});\n\n// Show Creation Result Schema\nexport const ShowCreationResultSchema = z.object({\n  showId: z.string().uuid(),\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().nullable().optional(),\n  totalEpisodes: z.number().int().nonnegative(),\n});\n\n// Type exports\nexport type ImportShowParams = z.infer<typeof ImportShowParamsSchema>;\nexport type ImportShowWorkflowState = z.infer<\n  typeof ImportShowWorkflowStateSchema\n>;\nexport type RSSShow = z.infer<typeof RSSShowSchema>;\nexport type RSSEpisode = z.infer<typeof RSSEpisodeSchema>;\nexport type EpisodeProcessingResult = z.infer<\n  typeof EpisodeProcessingResultSchema\n>;\nexport type ShowCreationResult = z.infer<typeof ShowCreationResultSchema>;\n", "import { eq } from \"drizzle-orm\";\nimport { getDatabase } from \"../database/client\";\nimport { shows } from \"../database/schema\";\nimport { CreateShow, UpdateShow, Pagination } from \"./schemas\";\nimport { NotFoundError } from \"../common/errors\";\n\nexport class ShowRepository {\n  private db;\n\n  constructor(database?: D1Database) {\n    this.db = getDatabase(database);\n  }\n\n  async findAll({ limit, offset }: Pagination) {\n    const results = await this.db\n      .select()\n      .from(shows)\n      .limit(limit)\n      .offset(offset)\n      .orderBy(shows.createdAt);\n\n    // Parse categories JSON for each show\n    return results.map((show) => ({\n      ...show,\n      categories: show.categories ? JSON.parse(show.categories) : null,\n    }));\n  }\n\n  async findById(id: string) {\n    const result = await this.db\n      .select()\n      .from(shows)\n      .where(eq(shows.id, id))\n      .limit(1);\n\n    const show = result[0] || null;\n    if (!show) return null;\n\n    // Parse categories JSON\n    return {\n      ...show,\n      categories: show.categories ? JSON.parse(show.categories) : null,\n    };\n  }\n\n  async create(data: CreateShow & { id: string; organizationId: string }) {\n    const now = new Date().toISOString();\n\n    const newShow = {\n      ...data,\n      categories: data.categories ? JSON.stringify(data.categories) : null,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    await this.db.insert(shows).values(newShow);\n\n    // Return with parsed categories\n    return {\n      ...newShow,\n      categories: data.categories || null,\n    };\n  }\n\n  async update(id: string, data: UpdateShow) {\n    const existing = await this.findById(id);\n    if (!existing) {\n      throw new NotFoundError(\"Show not found\");\n    }\n\n    const updatedAt = new Date().toISOString();\n\n    // Handle categories serialization\n    const updateData = {\n      ...data,\n      categories: data.categories ? JSON.stringify(data.categories) : undefined,\n      updatedAt,\n    };\n\n    await this.db.update(shows).set(updateData).where(eq(shows.id, id));\n\n    // Return with parsed categories\n    const updatedShow = {\n      ...existing,\n      ...data,\n      updatedAt,\n    };\n\n    return updatedShow;\n  }\n\n  async delete(id: string) {\n    const existing = await this.findById(id);\n    if (!existing) {\n      throw new NotFoundError(\"Show not found\");\n    }\n\n    await this.db.delete(shows).where(eq(shows.id, id));\n    return true;\n  }\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/markus/Projects/sesamy/sesamy-fm-api/.wrangler/tmp/bundle-tHy9MI/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/markus/Projects/sesamy/sesamy-fm-api/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/markus/Projects/sesamy/sesamy-fm-api/.wrangler/tmp/bundle-tHy9MI/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/markus/Projects/sesamy/sesamy-fm-api/.wrangler/tmp/bundle-tHy9MI/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/markus/Projects/sesamy/sesamy-fm-api/dist/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/markus/Projects/sesamy/sesamy-fm-api/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/markus/Projects/sesamy/sesamy-fm-api/dist/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "/**\n * Cloudflare Workers entry point for Podcast Service\n * Optimized for edge runtime with minimal cold start overhead\n */\n\n/// <reference types=\"@cloudflare/workers-types\" />\n\nimport { createApp } from \"./app\";\nimport { TaskProcessor } from \"./tasks/processor\";\nimport { EncodingContainer } from \"./encoding/container\";\nimport { AudioProcessingWorkflow } from \"./workflows/audio-processing\";\nimport { ImportShowWorkflow } from \"./workflows/import-show\";\n\n// Interface for Cloudflare Worker environment\ninterface CloudflareEnv {\n  DB: D1Database;\n  BUCKET: R2Bucket;\n  AI: Ai;\n  JWT_SECRET?: string;\n  NODE_ENV?: string;\n  R2_ACCESS_KEY_ID?: string;\n  R2_SECRET_ACCESS_KEY?: string;\n  R2_ENDPOINT?: string; // Full R2 endpoint URL with account ID\n  ENCODING_CONTAINER: DurableObjectNamespace;\n  AUDIO_PROCESSING_WORKFLOW?: Workflow;\n  IMPORT_SHOW_WORKFLOW?: Workflow;\n  // AWS Lambda encoding service configuration (optional)\n  AWS_LAMBDA_ENCODING_URL?: string;\n  AWS_LAMBDA_API_KEY?: string;\n  ENCODING_SERVICE_PROVIDER?: string;\n  // Auth0 configuration\n  AUTH0_DOMAIN?: string;\n  AUTH0_CLIENT_ID?: string;\n  AUTH0_CLIENT_SECRET?: string;\n  // TTS configuration\n  TTS_DEFAULT_MODEL?: string;\n  TTS_DEFAULT_VOICE?: string;\n}\n\nexport default {\n  async fetch(\n    request: Request,\n    env: CloudflareEnv,\n    ctx: ExecutionContext\n  ): Promise<Response> {\n    // Create app with D1 database, R2 bucket, and R2 credentials\n    const app = createApp(\n      env.DB,\n      env.BUCKET,\n      env.R2_ACCESS_KEY_ID,\n      env.R2_SECRET_ACCESS_KEY,\n      env.R2_ENDPOINT,\n      env.AI,\n      env.ENCODING_CONTAINER,\n      env.AUDIO_PROCESSING_WORKFLOW,\n      env.IMPORT_SHOW_WORKFLOW,\n      env.AWS_LAMBDA_ENCODING_URL,\n      env.AWS_LAMBDA_API_KEY,\n      env.AUTH0_DOMAIN,\n      env.AUTH0_CLIENT_ID,\n      env.AUTH0_CLIENT_SECRET\n    ); // Set environment variables for JWT\n    if (env.JWT_SECRET && !process.env.JWT_SECRET) {\n      process.env.JWT_SECRET = env.JWT_SECRET;\n    }\n    if (\n      env.ENCODING_SERVICE_PROVIDER &&\n      !process.env.ENCODING_SERVICE_PROVIDER\n    ) {\n      process.env.ENCODING_SERVICE_PROVIDER = env.ENCODING_SERVICE_PROVIDER;\n    }\n    // Don't modify NODE_ENV as it's a compile-time constant in Workers\n\n    return app.fetch(request, env, ctx);\n  },\n\n  async scheduled(\n    event: ScheduledEvent,\n    env: CloudflareEnv,\n    ctx: ExecutionContext\n  ): Promise<void> {\n    // Process background tasks\n    const taskProcessor = new TaskProcessor(env.DB);\n    await taskProcessor.handleScheduledTask(event);\n  },\n\n  async queue(\n    batch: MessageBatch,\n    env: CloudflareEnv,\n    ctx: ExecutionContext\n  ): Promise<void> {\n    // Empty queue handler for deployment compatibility\n    console.log(`Processing ${batch.messages.length} queue messages`);\n\n    for (const message of batch.messages) {\n      try {\n        console.log(\"Processing message:\", message.id);\n        message.ack();\n      } catch (error) {\n        console.error(\"Error processing queue message:\", error);\n        message.retry();\n      }\n    }\n  },\n};\n\n// Export the EncodingContainer, AudioProcessingWorkflow, and ImportShowWorkflow for Cloudflare Workers\nexport { EncodingContainer, AudioProcessingWorkflow, ImportShowWorkflow };\n", "import { OpenAPIHono } from \"@hono/zod-openapi\";\nimport { swaggerUI } from \"@hono/swagger-ui\";\nimport { cors } from \"hono/cors\";\nimport { logger } from \"hono/logger\";\n\nimport { errorHandler } from \"./common/errors\";\nimport { authMiddleware, jwtMiddleware } from \"./auth/middleware\";\nimport { registerHealthRoutes } from \"./health/routes\";\nimport { registerShowRoutes } from \"./shows/routes\";\nimport { registerEpisodeRoutes } from \"./episodes/routes\";\nimport { registerAudioRoutes } from \"./audio/routes\";\nimport { registerFeedRoutes } from \"./feed/routes\";\nimport { createTaskRoutes } from \"./tasks/routes\";\nimport { createWorkflowRoutes } from \"./workflows/routes\";\nimport storageRoutes from \"./storage/routes\";\nimport { createCampaignRoutes } from \"./campaigns/routes\";\nimport { registerOrganizationRoutes } from \"./organizations/routes\";\n\n// Services\nimport { EventPublisher } from \"./events/publisher\";\nimport { ShowRepository } from \"./shows/repository\";\nimport { ShowService } from \"./shows/service\";\nimport { EpisodeRepository } from \"./episodes/repository\";\nimport { EpisodeService } from \"./episodes/service\";\nimport { AudioService } from \"./audio/service\";\nimport { ImageService } from \"./images/service\";\nimport { TaskService } from \"./tasks/service\";\nimport { CampaignRepository } from \"./campaigns/repository\";\nimport { CampaignService } from \"./campaigns/service\";\nimport { CreativeUploadService } from \"./campaigns/creative-upload-service\";\nimport { OrganizationService } from \"./organizations/service\";\nimport { Auth0Service } from \"./auth/auth0-service\";\n\nexport function createApp(\n  database?: D1Database,\n  bucket?: R2Bucket,\n  r2AccessKeyId?: string,\n  r2SecretAccessKey?: string,\n  r2Endpoint?: string,\n  ai?: Ai,\n  encodingContainer?: DurableObjectNamespace,\n  audioProcessingWorkflow?: Workflow,\n  importShowWorkflow?: Workflow,\n  awsLambdaUrl?: string,\n  awsApiKey?: string,\n  auth0Domain?: string,\n  auth0ClientId?: string,\n  auth0ClientSecret?: string\n) {\n  const app = new OpenAPIHono();\n\n  // Initialize services\n  const eventPublisher = new EventPublisher();\n\n  const showRepository = new ShowRepository(database);\n  const showService = new ShowService(showRepository, eventPublisher);\n\n  const episodeRepository = new EpisodeRepository(database);\n  const taskService = new TaskService(database, audioProcessingWorkflow);\n  const episodeService = new EpisodeService(\n    episodeRepository,\n    eventPublisher,\n    taskService\n  );\n\n  const audioService = new AudioService(\n    database,\n    bucket,\n    eventPublisher,\n    r2AccessKeyId,\n    r2SecretAccessKey,\n    r2Endpoint,\n    audioProcessingWorkflow\n  );\n\n  const imageService =\n    bucket && r2AccessKeyId && r2SecretAccessKey\n      ? new ImageService(\n          bucket as any,\n          r2AccessKeyId,\n          r2SecretAccessKey,\n          r2Endpoint,\n          database\n        )\n      : undefined;\n\n  const campaignRepository = new CampaignRepository(database);\n  const campaignService = new CampaignService(\n    campaignRepository,\n    eventPublisher\n  );\n\n  const creativeUploadService =\n    bucket && r2AccessKeyId && r2SecretAccessKey && r2Endpoint\n      ? new CreativeUploadService(\n          database,\n          bucket,\n          eventPublisher,\n          r2AccessKeyId,\n          r2SecretAccessKey,\n          r2Endpoint\n        )\n      : undefined;\n\n  // Initialize Auth0 service and organization service\n  const auth0Service =\n    auth0Domain && auth0ClientId && auth0ClientSecret\n      ? new Auth0Service(auth0Domain, auth0ClientId, auth0ClientSecret)\n      : undefined;\n\n  const organizationService = new OrganizationService(\n    database ? require(\"./database/client\").getDatabase(database) : undefined,\n    auth0Service\n  );\n\n  // Global middleware\n  app.use(\"*\", cors());\n  app.use(\"*\", logger());\n\n  // Error handler\n  app.onError(errorHandler);\n\n  // Service info endpoint\n  app.get(\"/\", (c) => {\n    return c.json({\n      name: \"podcast-service\",\n      version: \"1.0.0\",\n    });\n  });\n\n  // OpenAPI JSON endpoint\n  app.doc(\"/openapi.json\", {\n    openapi: \"3.0.0\",\n    info: {\n      title: \"Podcast Service API\",\n      version: \"1.0.0\",\n      description: \"Service Standard v1 compliant Podcast Service\",\n    },\n    security: [\n      {\n        Bearer: [],\n      },\n    ],\n    tags: [\n      { name: \"health\", description: \"Health check endpoints\" },\n      { name: \"feeds\", description: \"RSS feed endpoints (no auth required)\" },\n      { name: \"shows\", description: \"Podcast shows management\" },\n      { name: \"episodes\", description: \"Episode management\" },\n      { name: \"audio\", description: \"Audio file management\" },\n      { name: \"tasks\", description: \"Background task management\" },\n      { name: \"campaigns\", description: \"Advertising campaigns management\" },\n      { name: \"creatives\", description: \"Campaign creatives management\" },\n      { name: \"tts\", description: \"Text-to-speech conversion\" },\n      { name: \"testing\", description: \"Testing endpoints\" },\n    ],\n  });\n\n  // Swagger UI\n  app.get(\"/swagger\", swaggerUI({ url: \"/openapi.json\" }));\n\n  // ===== ROUTES THAT DON'T REQUIRE AUTH =====\n\n  // Storage routes for signed file operations (no auth required)\n  app.route(\"/storage\", storageRoutes);\n\n  // Health routes (no auth required)\n  registerHealthRoutes(app, database);\n\n  // RSS feeds don't require authentication (public access)\n  registerFeedRoutes(app, showService, episodeRepository, audioService);\n\n  // ===== ORGANIZATION ROUTES (REQUIRE ONLY VALID JWT) =====\n\n  // Apply JWT middleware for organizations (no org context required)\n  app.use(\"/organizations\", jwtMiddleware);\n  app.use(\"/organizations/*\", jwtMiddleware);\n\n  // Register organization routes\n  registerOrganizationRoutes(app, organizationService);\n\n  // ===== ALL OTHER ROUTES (REQUIRE JWT + ORGANIZATION CONTEXT) =====\n\n  // Apply full auth middleware (JWT + organization validation)\n  app.use(\"/shows/*\", (c, next) => {\n    // Skip auth for RSS feed endpoints\n    if (c.req.path.endsWith(\"/feed\")) {\n      return next();\n    }\n    return authMiddleware(c, next);\n  });\n  app.use(\"/episodes/*\", authMiddleware);\n  app.use(\"/audio/*\", authMiddleware);\n  app.use(\"/tasks/*\", authMiddleware);\n  app.use(\"/workflows/*\", authMiddleware);\n  app.use(\"/campaigns/*\", authMiddleware);\n  app.use(\"/tts/*\", authMiddleware);\n\n  // Apply auth to transcription routes except /transcription/test\n  app.use(\"/transcription/*\", (c, next) => {\n    // Skip auth for test endpoint\n    if (c.req.path === \"/transcription/test\") {\n      return next();\n    }\n    return authMiddleware(c, next);\n  });\n\n  // Apply auth to test routes except /test/tts (for easy testing)\n  app.use(\"/test/*\", (c, next) => {\n    // Skip auth for TTS test endpoint\n    if (c.req.path === \"/test/tts\") {\n      return next();\n    }\n    return authMiddleware(c, next);\n  });\n\n  // Register protected API routes\n  registerShowRoutes(\n    app,\n    showService,\n    audioService,\n    imageService,\n    database,\n    importShowWorkflow\n  );\n  registerEpisodeRoutes(\n    app,\n    episodeService,\n    audioService,\n    imageService,\n    bucket\n  );\n  registerAudioRoutes(app, audioService);\n  app.route(\"/\", createTaskRoutes(database));\n  app.route(\"/\", createWorkflowRoutes());\n  app.route(\n    \"/\",\n    createCampaignRoutes(campaignService, audioService, creativeUploadService)\n  );\n\n  return app;\n}\n", "// src/index.ts\nimport {\n  OpenAPIRegistry,\n  OpenApiGeneratorV3,\n  OpenApiGeneratorV31,\n  extendZodWithOpenApi\n} from \"@asteasolutions/zod-to-openapi\";\nimport { zValidator } from \"@hono/zod-validator\";\nimport { Hono } from \"hono\";\nimport { mergePath } from \"hono/utils/url\";\nimport { ZodType, z } from \"zod\";\nvar OpenAPIHono = class _OpenAPIHono extends Hono {\n  openAPIRegistry;\n  defaultHook;\n  constructor(init) {\n    super(init);\n    this.openAPIRegistry = new OpenAPIRegistry();\n    this.defaultHook = init?.defaultHook;\n  }\n  /**\n   *\n   * @param {RouteConfig} route - The route definition which you create with `createRoute()`.\n   * @param {Handler} handler - The handler. If you want to return a JSON object, you should specify the status code with `c.json()`.\n   * @param {Hook} hook - Optional. The hook method defines what it should do after validation.\n   * @example\n   * app.openapi(\n   *   route,\n   *   (c) => {\n   *     // ...\n   *     return c.json(\n   *       {\n   *         age: 20,\n   *         name: 'Young man',\n   *       },\n   *       200 // You should specify the status code even if it's 200.\n   *     )\n   *   },\n   *  (result, c) => {\n   *    if (!result.success) {\n   *      return c.json(\n   *        {\n   *          code: 400,\n   *          message: 'Custom Message',\n   *        },\n   *        400\n   *      )\n   *    }\n   *  }\n   *)\n   */\n  openapi = ({ middleware: routeMiddleware, ...route }, handler, hook = this.defaultHook) => {\n    this.openAPIRegistry.registerPath(route);\n    const validators = [];\n    if (route.request?.query) {\n      const validator = zValidator(\"query\", route.request.query, hook);\n      validators.push(validator);\n    }\n    if (route.request?.params) {\n      const validator = zValidator(\"param\", route.request.params, hook);\n      validators.push(validator);\n    }\n    if (route.request?.headers) {\n      const validator = zValidator(\"header\", route.request.headers, hook);\n      validators.push(validator);\n    }\n    if (route.request?.cookies) {\n      const validator = zValidator(\"cookie\", route.request.cookies, hook);\n      validators.push(validator);\n    }\n    const bodyContent = route.request?.body?.content;\n    if (bodyContent) {\n      for (const mediaType of Object.keys(bodyContent)) {\n        if (!bodyContent[mediaType]) {\n          continue;\n        }\n        const schema = bodyContent[mediaType][\"schema\"];\n        if (!(schema instanceof ZodType)) {\n          continue;\n        }\n        if (isJSONContentType(mediaType)) {\n          const validator = zValidator(\"json\", schema, hook);\n          if (route.request?.body?.required) {\n            validators.push(validator);\n          } else {\n            const mw = async (c, next) => {\n              if (c.req.header(\"content-type\")) {\n                if (isJSONContentType(c.req.header(\"content-type\"))) {\n                  return await validator(c, next);\n                }\n              }\n              c.req.addValidatedData(\"json\", {});\n              await next();\n            };\n            validators.push(mw);\n          }\n        }\n        if (isFormContentType(mediaType)) {\n          const validator = zValidator(\"form\", schema, hook);\n          if (route.request?.body?.required) {\n            validators.push(validator);\n          } else {\n            const mw = async (c, next) => {\n              if (c.req.header(\"content-type\")) {\n                if (isFormContentType(c.req.header(\"content-type\"))) {\n                  return await validator(c, next);\n                }\n              }\n              c.req.addValidatedData(\"form\", {});\n              await next();\n            };\n            validators.push(mw);\n          }\n        }\n      }\n    }\n    const middleware = routeMiddleware ? Array.isArray(routeMiddleware) ? routeMiddleware : [routeMiddleware] : [];\n    this.on(\n      [route.method],\n      route.path.replaceAll(/\\/{(.+?)}/g, \"/:$1\"),\n      ...middleware,\n      ...validators,\n      handler\n    );\n    return this;\n  };\n  getOpenAPIDocument = (config) => {\n    const generator = new OpenApiGeneratorV3(this.openAPIRegistry.definitions);\n    const document = generator.generateDocument(config);\n    return this._basePath ? addBasePathToDocument(document, this._basePath) : document;\n  };\n  getOpenAPI31Document = (config) => {\n    const generator = new OpenApiGeneratorV31(this.openAPIRegistry.definitions);\n    const document = generator.generateDocument(config);\n    return this._basePath ? addBasePathToDocument(document, this._basePath) : document;\n  };\n  doc = (path, configure) => {\n    return this.get(path, (c) => {\n      const config = typeof configure === \"function\" ? configure(c) : configure;\n      try {\n        const document = this.getOpenAPIDocument(config);\n        return c.json(document);\n      } catch (e) {\n        return c.json(e, 500);\n      }\n    });\n  };\n  doc31 = (path, configure) => {\n    return this.get(path, (c) => {\n      const config = typeof configure === \"function\" ? configure(c) : configure;\n      try {\n        const document = this.getOpenAPI31Document(config);\n        return c.json(document);\n      } catch (e) {\n        return c.json(e, 500);\n      }\n    });\n  };\n  route(path, app) {\n    const pathForOpenAPI = path.replaceAll(/:([^\\/]+)/g, \"{$1}\");\n    super.route(path, app);\n    if (!(app instanceof _OpenAPIHono)) {\n      return this;\n    }\n    app.openAPIRegistry.definitions.forEach((def) => {\n      switch (def.type) {\n        case \"component\":\n          return this.openAPIRegistry.registerComponent(def.componentType, def.name, def.component);\n        case \"route\":\n          return this.openAPIRegistry.registerPath({\n            ...def.route,\n            path: mergePath(pathForOpenAPI, def.route.path)\n          });\n        case \"webhook\":\n          return this.openAPIRegistry.registerWebhook({\n            ...def.webhook,\n            path: mergePath(pathForOpenAPI, def.webhook.path)\n          });\n        case \"schema\":\n          return this.openAPIRegistry.register(def.schema._def.openapi._internal.refId, def.schema);\n        case \"parameter\":\n          return this.openAPIRegistry.registerParameter(\n            def.schema._def.openapi._internal.refId,\n            def.schema\n          );\n        default: {\n          const errorIfNotExhaustive = def;\n          throw new Error(`Unknown registry type: ${errorIfNotExhaustive}`);\n        }\n      }\n    });\n    return this;\n  }\n  basePath(path) {\n    return new _OpenAPIHono({ ...super.basePath(path), defaultHook: this.defaultHook });\n  }\n};\nvar createRoute = (routeConfig) => {\n  const route = {\n    ...routeConfig,\n    getRoutingPath() {\n      return routeConfig.path.replaceAll(/\\/{(.+?)}/g, \"/:$1\");\n    }\n  };\n  return Object.defineProperty(route, \"getRoutingPath\", { enumerable: false });\n};\nextendZodWithOpenApi(z);\nfunction addBasePathToDocument(document, basePath) {\n  const updatedPaths = {};\n  Object.keys(document.paths).forEach((path) => {\n    updatedPaths[mergePath(basePath, path)] = document.paths[path];\n  });\n  return {\n    ...document,\n    paths: updatedPaths\n  };\n}\nfunction isJSONContentType(contentType) {\n  return /^application\\/([a-z-\\.]+\\+)?json/.test(contentType);\n}\nfunction isFormContentType(contentType) {\n  return contentType.startsWith(\"multipart/form-data\") || contentType.startsWith(\"application/x-www-form-urlencoded\");\n}\nexport {\n  OpenAPIHono,\n  createRoute,\n  extendZodWithOpenApi,\n  z\n};\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction isZodType(schema, typeName) {\n    var _a;\n    return ((_a = schema === null || schema === void 0 ? void 0 : schema._def) === null || _a === void 0 ? void 0 : _a.typeName) === typeName;\n}\nfunction isAnyZodType(schema) {\n    return '_def' in schema;\n}\n\nfunction preserveMetadataFromModifier(zod, modifier) {\n    const zodModifier = zod.ZodType.prototype[modifier];\n    zod.ZodType.prototype[modifier] = function (...args) {\n        const result = zodModifier.apply(this, args);\n        result._def.openapi = this._def.openapi;\n        return result;\n    };\n}\nfunction extendZodWithOpenApi(zod) {\n    if (typeof zod.ZodType.prototype.openapi !== 'undefined') {\n        // This zod instance is already extended with the required methods,\n        // doing it again will just result in multiple wrapper methods for\n        // `optional` and `nullable`\n        return;\n    }\n    zod.ZodType.prototype.openapi = function (refOrOpenapi, metadata) {\n        var _a, _b, _c, _d, _e, _f;\n        const openapi = typeof refOrOpenapi === 'string' ? metadata : refOrOpenapi;\n        const _g = openapi !== null && openapi !== void 0 ? openapi : {}, { param } = _g, restOfOpenApi = __rest(_g, [\"param\"]);\n        const _internal = Object.assign(Object.assign({}, (_a = this._def.openapi) === null || _a === void 0 ? void 0 : _a._internal), (typeof refOrOpenapi === 'string'\n            ? { refId: refOrOpenapi }\n            : undefined));\n        const resultMetadata = Object.assign(Object.assign(Object.assign({}, (_b = this._def.openapi) === null || _b === void 0 ? void 0 : _b.metadata), restOfOpenApi), (((_d = (_c = this._def.openapi) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.param) || param\n            ? {\n                param: Object.assign(Object.assign({}, (_f = (_e = this._def.openapi) === null || _e === void 0 ? void 0 : _e.metadata) === null || _f === void 0 ? void 0 : _f.param), param),\n            }\n            : undefined));\n        const result = new this.constructor(Object.assign(Object.assign({}, this._def), { openapi: Object.assign(Object.assign({}, (Object.keys(_internal).length > 0 ? { _internal } : undefined)), (Object.keys(resultMetadata).length > 0\n                ? { metadata: resultMetadata }\n                : undefined)) }));\n        if (isZodType(this, 'ZodObject')) {\n            const originalExtend = this.extend;\n            result.extend = function (...args) {\n                var _a, _b, _c, _d, _e, _f, _g;\n                const extendedResult = originalExtend.apply(this, args);\n                extendedResult._def.openapi = {\n                    _internal: {\n                        extendedFrom: ((_b = (_a = this._def.openapi) === null || _a === void 0 ? void 0 : _a._internal) === null || _b === void 0 ? void 0 : _b.refId)\n                            ? { refId: (_d = (_c = this._def.openapi) === null || _c === void 0 ? void 0 : _c._internal) === null || _d === void 0 ? void 0 : _d.refId, schema: this }\n                            : (_f = (_e = this._def.openapi) === null || _e === void 0 ? void 0 : _e._internal) === null || _f === void 0 ? void 0 : _f.extendedFrom,\n                    },\n                    metadata: (_g = extendedResult._def.openapi) === null || _g === void 0 ? void 0 : _g.metadata,\n                };\n                return extendedResult;\n            };\n        }\n        return result;\n    };\n    preserveMetadataFromModifier(zod, 'optional');\n    preserveMetadataFromModifier(zod, 'nullable');\n    preserveMetadataFromModifier(zod, 'default');\n    preserveMetadataFromModifier(zod, 'transform');\n    preserveMetadataFromModifier(zod, 'refine');\n    const zodDeepPartial = zod.ZodObject.prototype.deepPartial;\n    zod.ZodObject.prototype.deepPartial = function () {\n        const initialShape = this._def.shape();\n        const result = zodDeepPartial.apply(this);\n        const resultShape = result._def.shape();\n        Object.entries(resultShape).forEach(([key, value]) => {\n            var _a, _b;\n            value._def.openapi = (_b = (_a = initialShape[key]) === null || _a === void 0 ? void 0 : _a._def) === null || _b === void 0 ? void 0 : _b.openapi;\n        });\n        result._def.openapi = undefined;\n        return result;\n    };\n    const zodPick = zod.ZodObject.prototype.pick;\n    zod.ZodObject.prototype.pick = function (...args) {\n        const result = zodPick.apply(this, args);\n        result._def.openapi = undefined;\n        return result;\n    };\n    const zodOmit = zod.ZodObject.prototype.omit;\n    zod.ZodObject.prototype.omit = function (...args) {\n        const result = zodOmit.apply(this, args);\n        result._def.openapi = undefined;\n        return result;\n    };\n}\n\nfunction isEqual(x, y) {\n    if (x === null || x === undefined || y === null || y === undefined) {\n        return x === y;\n    }\n    if (x === y || x.valueOf() === y.valueOf()) {\n        return true;\n    }\n    if (Array.isArray(x)) {\n        if (!Array.isArray(y)) {\n            return false;\n        }\n        if (x.length !== y.length) {\n            return false;\n        }\n    }\n    // if they are strictly equal, they both need to be object at least\n    if (!(x instanceof Object) || !(y instanceof Object)) {\n        return false;\n    }\n    // recursive object equality check\n    const keysX = Object.keys(x);\n    return (Object.keys(y).every(keyY => keysX.indexOf(keyY) !== -1) &&\n        keysX.every(key => isEqual(x[key], y[key])));\n}\nclass ObjectSet {\n    constructor() {\n        this.buckets = new Map();\n    }\n    put(value) {\n        const hashCode = this.hashCodeOf(value);\n        const itemsByCode = this.buckets.get(hashCode);\n        if (!itemsByCode) {\n            this.buckets.set(hashCode, [value]);\n            return;\n        }\n        const alreadyHasItem = itemsByCode.some(_ => isEqual(_, value));\n        if (!alreadyHasItem) {\n            itemsByCode.push(value);\n        }\n    }\n    contains(value) {\n        const hashCode = this.hashCodeOf(value);\n        const itemsByCode = this.buckets.get(hashCode);\n        if (!itemsByCode) {\n            return false;\n        }\n        return itemsByCode.some(_ => isEqual(_, value));\n    }\n    values() {\n        return [...this.buckets.values()].flat();\n    }\n    stats() {\n        let totalBuckets = 0;\n        let totalValues = 0;\n        let collisions = 0;\n        for (const bucket of this.buckets.values()) {\n            totalBuckets += 1;\n            totalValues += bucket.length;\n            if (bucket.length > 1) {\n                collisions += 1;\n            }\n        }\n        const hashEffectiveness = totalBuckets / totalValues;\n        return { totalBuckets, collisions, totalValues, hashEffectiveness };\n    }\n    hashCodeOf(object) {\n        let hashCode = 0;\n        if (Array.isArray(object)) {\n            for (let i = 0; i < object.length; i++) {\n                hashCode ^= this.hashCodeOf(object[i]) * i;\n            }\n            return hashCode;\n        }\n        if (typeof object === 'string') {\n            for (let i = 0; i < object.length; i++) {\n                hashCode ^= object.charCodeAt(i) * i;\n            }\n            return hashCode;\n        }\n        if (typeof object === 'number') {\n            return object;\n        }\n        if (typeof object === 'object') {\n            for (const [key, value] of Object.entries(object)) {\n                hashCode ^= this.hashCodeOf(key) + this.hashCodeOf(value !== null && value !== void 0 ? value : '');\n            }\n        }\n        return hashCode;\n    }\n}\n\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction mapValues(object, mapper) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        result[key] = mapper(value);\n    });\n    return result;\n}\nfunction omit(object, keys) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        if (!keys.some(keyToOmit => keyToOmit === key)) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction omitBy(object, predicate) {\n    const result = {};\n    Object.entries(object).forEach(([key, value]) => {\n        if (!predicate(value, key)) {\n            result[key] = value;\n        }\n    });\n    return result;\n}\nfunction compact(arr) {\n    return arr.filter((elem) => !isUndefined(elem));\n}\nconst objectEquals = isEqual;\nfunction uniq(values) {\n    const set = new ObjectSet();\n    values.forEach(value => set.put(value));\n    return [...set.values()];\n}\nfunction isString(val) {\n    return typeof val === 'string';\n}\n\nfunction getOpenApiMetadata(zodSchema) {\n    var _a, _b;\n    return omitBy((_b = (_a = zodSchema._def.openapi) === null || _a === void 0 ? void 0 : _a.metadata) !== null && _b !== void 0 ? _b : {}, isUndefined);\n}\n\nclass OpenAPIRegistry {\n    constructor(parents) {\n        this.parents = parents;\n        this._definitions = [];\n    }\n    get definitions() {\n        var _a, _b;\n        const parentDefinitions = (_b = (_a = this.parents) === null || _a === void 0 ? void 0 : _a.flatMap(par => par.definitions)) !== null && _b !== void 0 ? _b : [];\n        return [...parentDefinitions, ...this._definitions];\n    }\n    /**\n     * Registers a new component schema under /components/schemas/${name}\n     */\n    register(refId, zodSchema) {\n        const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);\n        this._definitions.push({ type: 'schema', schema: schemaWithRefId });\n        return schemaWithRefId;\n    }\n    /**\n     * Registers a new parameter schema under /components/parameters/${name}\n     */\n    registerParameter(refId, zodSchema) {\n        var _a, _b, _c;\n        const schemaWithRefId = this.schemaWithRefId(refId, zodSchema);\n        const currentMetadata = (_a = schemaWithRefId._def.openapi) === null || _a === void 0 ? void 0 : _a.metadata;\n        const schemaWithMetadata = schemaWithRefId.openapi(Object.assign(Object.assign({}, currentMetadata), { param: Object.assign(Object.assign({}, currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param), { name: (_c = (_b = currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.param) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : refId }) }));\n        this._definitions.push({\n            type: 'parameter',\n            schema: schemaWithMetadata,\n        });\n        return schemaWithMetadata;\n    }\n    /**\n     * Registers a new path that would be generated under paths:\n     */\n    registerPath(route) {\n        this._definitions.push({\n            type: 'route',\n            route,\n        });\n    }\n    /**\n     * Registers a new webhook that would be generated under webhooks:\n     */\n    registerWebhook(webhook) {\n        this._definitions.push({\n            type: 'webhook',\n            webhook,\n        });\n    }\n    /**\n     * Registers a raw OpenAPI component. Use this if you have a simple object instead of a Zod schema.\n     *\n     * @param type The component type, e.g. `schemas`, `responses`, `securitySchemes`, etc.\n     * @param name The name of the object, it is the key under the component\n     *             type in the resulting OpenAPI document\n     * @param component The actual object to put there\n     */\n    registerComponent(type, name, component) {\n        this._definitions.push({\n            type: 'component',\n            componentType: type,\n            name,\n            component,\n        });\n        return {\n            name,\n            ref: { $ref: `#/components/${type}/${name}` },\n        };\n    }\n    schemaWithRefId(refId, zodSchema) {\n        return zodSchema.openapi(refId);\n    }\n}\n\nclass ZodToOpenAPIError {\n    constructor(message) {\n        this.message = message;\n    }\n}\nclass ConflictError extends ZodToOpenAPIError {\n    constructor(message, data) {\n        super(message);\n        this.data = data;\n    }\n}\nclass MissingParameterDataError extends ZodToOpenAPIError {\n    constructor(data) {\n        super(`Missing parameter data, please specify \\`${data.missingField}\\` and other OpenAPI parameter props using the \\`param\\` field of \\`ZodSchema.openapi\\``);\n        this.data = data;\n    }\n}\nfunction enhanceMissingParametersError(action, paramsToAdd) {\n    try {\n        return action();\n    }\n    catch (error) {\n        if (error instanceof MissingParameterDataError) {\n            throw new MissingParameterDataError(Object.assign(Object.assign({}, error.data), paramsToAdd));\n        }\n        throw error;\n    }\n}\nclass UnknownZodTypeError extends ZodToOpenAPIError {\n    constructor(data) {\n        super(`Unknown zod object type, please specify \\`type\\` and other OpenAPI props using \\`ZodSchema.openapi\\`.`);\n        this.data = data;\n    }\n}\n\nclass Metadata {\n    static getMetadata(zodSchema) {\n        var _a;\n        const innerSchema = this.unwrapChained(zodSchema);\n        const metadata = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        /**\n         * Every zod schema can receive a `description` by using the .describe method.\n         * That description should be used when generating an OpenApi schema.\n         * The `??` bellow makes sure we can handle both:\n         * - schema.describe('Test').optional()\n         * - schema.optional().describe('Test')\n         */\n        const zodDescription = (_a = zodSchema.description) !== null && _a !== void 0 ? _a : innerSchema.description;\n        // A description provided from .openapi() should be taken with higher precedence\n        return {\n            _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,\n            metadata: Object.assign({ description: zodDescription }, metadata === null || metadata === void 0 ? void 0 : metadata.metadata),\n        };\n    }\n    static getInternalMetadata(zodSchema) {\n        const innerSchema = this.unwrapChained(zodSchema);\n        const openapi = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        return openapi === null || openapi === void 0 ? void 0 : openapi._internal;\n    }\n    static getParamMetadata(zodSchema) {\n        var _a, _b;\n        const innerSchema = this.unwrapChained(zodSchema);\n        const metadata = zodSchema._def.openapi\n            ? zodSchema._def.openapi\n            : innerSchema._def.openapi;\n        /**\n         * Every zod schema can receive a `description` by using the .describe method.\n         * That description should be used when generating an OpenApi schema.\n         * The `??` bellow makes sure we can handle both:\n         * - schema.describe('Test').optional()\n         * - schema.optional().describe('Test')\n         */\n        const zodDescription = (_a = zodSchema.description) !== null && _a !== void 0 ? _a : innerSchema.description;\n        return {\n            _internal: metadata === null || metadata === void 0 ? void 0 : metadata._internal,\n            metadata: Object.assign(Object.assign({}, metadata === null || metadata === void 0 ? void 0 : metadata.metadata), { \n                // A description provided from .openapi() should be taken with higher precedence\n                param: Object.assign({ description: zodDescription }, (_b = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _b === void 0 ? void 0 : _b.param) }),\n        };\n    }\n    /**\n     * A method that omits all custom keys added to the regular OpenAPI\n     * metadata properties\n     */\n    static buildSchemaMetadata(metadata) {\n        return omitBy(omit(metadata, ['param']), isUndefined);\n    }\n    static buildParameterMetadata(metadata) {\n        return omitBy(metadata, isUndefined);\n    }\n    static applySchemaMetadata(initialData, metadata) {\n        return omitBy(Object.assign(Object.assign({}, initialData), this.buildSchemaMetadata(metadata)), isUndefined);\n    }\n    static getRefId(zodSchema) {\n        var _a;\n        return (_a = this.getInternalMetadata(zodSchema)) === null || _a === void 0 ? void 0 : _a.refId;\n    }\n    static unwrapChained(schema) {\n        return this.unwrapUntil(schema);\n    }\n    static getDefaultValue(zodSchema) {\n        const unwrapped = this.unwrapUntil(zodSchema, 'ZodDefault');\n        return unwrapped === null || unwrapped === void 0 ? void 0 : unwrapped._def.defaultValue();\n    }\n    static unwrapUntil(schema, typeName) {\n        if (typeName && isZodType(schema, typeName)) {\n            return schema;\n        }\n        if (isZodType(schema, 'ZodOptional') ||\n            isZodType(schema, 'ZodNullable') ||\n            isZodType(schema, 'ZodBranded')) {\n            return this.unwrapUntil(schema.unwrap(), typeName);\n        }\n        if (isZodType(schema, 'ZodDefault') || isZodType(schema, 'ZodReadonly')) {\n            return this.unwrapUntil(schema._def.innerType, typeName);\n        }\n        if (isZodType(schema, 'ZodEffects')) {\n            return this.unwrapUntil(schema._def.schema, typeName);\n        }\n        if (isZodType(schema, 'ZodPipeline')) {\n            return this.unwrapUntil(schema._def.in, typeName);\n        }\n        return typeName ? undefined : schema;\n    }\n    static isOptionalSchema(zodSchema) {\n        return zodSchema.isOptional();\n    }\n}\n\nclass ArrayTransformer {\n    transform(zodSchema, mapNullableType, mapItems) {\n        var _a, _b;\n        const itemType = zodSchema._def.type;\n        return Object.assign(Object.assign({}, mapNullableType('array')), { items: mapItems(itemType), minItems: (_a = zodSchema._def.minLength) === null || _a === void 0 ? void 0 : _a.value, maxItems: (_b = zodSchema._def.maxLength) === null || _b === void 0 ? void 0 : _b.value });\n    }\n}\n\nclass BigIntTransformer {\n    transform(mapNullableType) {\n        return Object.assign(Object.assign({}, mapNullableType('string')), { pattern: `^\\d+$` });\n    }\n}\n\nclass DiscriminatedUnionTransformer {\n    transform(zodSchema, isNullable, mapNullableOfArray, mapItem, generateSchemaRef) {\n        const options = [...zodSchema.options.values()];\n        const optionSchema = options.map(mapItem);\n        if (isNullable) {\n            return {\n                oneOf: mapNullableOfArray(optionSchema, isNullable),\n            };\n        }\n        return {\n            oneOf: optionSchema,\n            discriminator: this.mapDiscriminator(options, zodSchema.discriminator, generateSchemaRef),\n        };\n    }\n    mapDiscriminator(zodObjects, discriminator, generateSchemaRef) {\n        // All schemas must be registered to use a discriminator\n        if (zodObjects.some(obj => Metadata.getRefId(obj) === undefined)) {\n            return undefined;\n        }\n        const mapping = {};\n        zodObjects.forEach(obj => {\n            var _a;\n            const refId = Metadata.getRefId(obj); // type-checked earlier\n            const value = (_a = obj.shape) === null || _a === void 0 ? void 0 : _a[discriminator];\n            if (isZodType(value, 'ZodEnum') || isZodType(value, 'ZodNativeEnum')) {\n                // Native enums have their keys as both number and strings however the number is an\n                // internal representation and the string is the access point for a documentation\n                const keys = Object.values(value.enum).filter(isString);\n                keys.forEach((enumValue) => {\n                    mapping[enumValue] = generateSchemaRef(refId);\n                });\n                return;\n            }\n            const literalValue = value === null || value === void 0 ? void 0 : value._def.value;\n            // This should never happen because Zod checks the disciminator type but to keep the types happy\n            if (typeof literalValue !== 'string') {\n                throw new Error(`Discriminator ${discriminator} could not be found in one of the values of a discriminated union`);\n            }\n            mapping[literalValue] = generateSchemaRef(refId);\n        });\n        return {\n            propertyName: discriminator,\n            mapping,\n        };\n    }\n}\n\nclass EnumTransformer {\n    transform(zodSchema, mapNullableType) {\n        // ZodEnum only accepts strings\n        return Object.assign(Object.assign({}, mapNullableType('string')), { enum: zodSchema._def.values });\n    }\n}\n\nclass IntersectionTransformer {\n    transform(zodSchema, isNullable, mapNullableOfArray, mapItem) {\n        const subtypes = this.flattenIntersectionTypes(zodSchema);\n        const allOfSchema = {\n            allOf: subtypes.map(mapItem),\n        };\n        if (isNullable) {\n            return {\n                anyOf: mapNullableOfArray([allOfSchema], isNullable),\n            };\n        }\n        return allOfSchema;\n    }\n    flattenIntersectionTypes(schema) {\n        if (!isZodType(schema, 'ZodIntersection')) {\n            return [schema];\n        }\n        const leftSubTypes = this.flattenIntersectionTypes(schema._def.left);\n        const rightSubTypes = this.flattenIntersectionTypes(schema._def.right);\n        return [...leftSubTypes, ...rightSubTypes];\n    }\n}\n\nclass LiteralTransformer {\n    transform(zodSchema, mapNullableType) {\n        return Object.assign(Object.assign({}, mapNullableType(typeof zodSchema._def.value)), { enum: [zodSchema._def.value] });\n    }\n}\n\n/**\n * Numeric enums have a reverse mapping https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n * whereas string ones don't.\n *\n * This function checks if an enum is fully numeric - i.e all values are numbers or not.\n * And filters out only the actual enum values when a reverse mapping is apparent.\n */\nfunction enumInfo(enumObject) {\n    const keysExceptReverseMappings = Object.keys(enumObject).filter(key => typeof enumObject[enumObject[key]] !== 'number');\n    const values = keysExceptReverseMappings.map(key => enumObject[key]);\n    const numericCount = values.filter(_ => typeof _ === 'number').length;\n    const type = numericCount === 0\n        ? 'string'\n        : numericCount === values.length\n            ? 'numeric'\n            : 'mixed';\n    return { values, type };\n}\n\nclass NativeEnumTransformer {\n    transform(zodSchema, mapNullableType) {\n        const { type, values } = enumInfo(zodSchema._def.values);\n        if (type === 'mixed') {\n            // enum Test {\n            //   A = 42,\n            //   B = 'test',\n            // }\n            //\n            // const result = z.nativeEnum(Test).parse('42');\n            //\n            // This is an error, so we can't just say it's a 'string'\n            throw new ZodToOpenAPIError('Enum has mixed string and number values, please specify the OpenAPI type manually');\n        }\n        return Object.assign(Object.assign({}, mapNullableType(type === 'numeric' ? 'integer' : 'string')), { enum: values });\n    }\n}\n\nclass NumberTransformer {\n    transform(zodSchema, mapNullableType, getNumberChecks) {\n        return Object.assign(Object.assign({}, mapNullableType(zodSchema.isInt ? 'integer' : 'number')), getNumberChecks(zodSchema._def.checks));\n    }\n}\n\nclass ObjectTransformer {\n    transform(zodSchema, defaultValue, mapNullableType, mapItem) {\n        var _a;\n        const extendedFrom = (_a = Metadata.getInternalMetadata(zodSchema)) === null || _a === void 0 ? void 0 : _a.extendedFrom;\n        const required = this.requiredKeysOf(zodSchema);\n        const properties = mapValues(zodSchema._def.shape(), mapItem);\n        if (!extendedFrom) {\n            return Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType('object')), { properties, default: defaultValue }), (required.length > 0 ? { required } : {})), this.generateAdditionalProperties(zodSchema, mapItem));\n        }\n        const parent = extendedFrom.schema;\n        // We want to generate the parent schema so that it can be referenced down the line\n        mapItem(parent);\n        const keysRequiredByParent = this.requiredKeysOf(parent);\n        const propsOfParent = mapValues(parent === null || parent === void 0 ? void 0 : parent._def.shape(), mapItem);\n        const propertiesToAdd = Object.fromEntries(Object.entries(properties).filter(([key, type]) => {\n            return !objectEquals(propsOfParent[key], type);\n        }));\n        const additionallyRequired = required.filter(prop => !keysRequiredByParent.includes(prop));\n        const objectData = Object.assign(Object.assign(Object.assign(Object.assign({}, mapNullableType('object')), { default: defaultValue, properties: propertiesToAdd }), (additionallyRequired.length > 0\n            ? { required: additionallyRequired }\n            : {})), this.generateAdditionalProperties(zodSchema, mapItem));\n        return {\n            allOf: [\n                { $ref: `#/components/schemas/${extendedFrom.refId}` },\n                objectData,\n            ],\n        };\n    }\n    generateAdditionalProperties(zodSchema, mapItem) {\n        const unknownKeysOption = zodSchema._def.unknownKeys;\n        const catchallSchema = zodSchema._def.catchall;\n        if (isZodType(catchallSchema, 'ZodNever')) {\n            if (unknownKeysOption === 'strict') {\n                return { additionalProperties: false };\n            }\n            return {};\n        }\n        return { additionalProperties: mapItem(catchallSchema) };\n    }\n    requiredKeysOf(objectSchema) {\n        return Object.entries(objectSchema._def.shape())\n            .filter(([_key, type]) => !Metadata.isOptionalSchema(type))\n            .map(([key, _type]) => key);\n    }\n}\n\nclass RecordTransformer {\n    transform(zodSchema, mapNullableType, mapItem) {\n        const propertiesType = zodSchema._def.valueType;\n        const keyType = zodSchema._def.keyType;\n        const propertiesSchema = mapItem(propertiesType);\n        if (isZodType(keyType, 'ZodEnum') || isZodType(keyType, 'ZodNativeEnum')) {\n            // Native enums have their keys as both number and strings however the number is an\n            // internal representation and the string is the access point for a documentation\n            const keys = Object.values(keyType.enum).filter(isString);\n            const properties = keys.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: propertiesSchema })), {});\n            return Object.assign(Object.assign({}, mapNullableType('object')), { properties });\n        }\n        return Object.assign(Object.assign({}, mapNullableType('object')), { additionalProperties: propertiesSchema });\n    }\n}\n\nclass StringTransformer {\n    transform(zodSchema, mapNullableType) {\n        var _a, _b, _c;\n        const regexCheck = this.getZodStringCheck(zodSchema, 'regex');\n        const length = (_a = this.getZodStringCheck(zodSchema, 'length')) === null || _a === void 0 ? void 0 : _a.value;\n        const maxLength = Number.isFinite(zodSchema.minLength)\n            ? (_b = zodSchema.minLength) !== null && _b !== void 0 ? _b : undefined\n            : undefined;\n        const minLength = Number.isFinite(zodSchema.maxLength)\n            ? (_c = zodSchema.maxLength) !== null && _c !== void 0 ? _c : undefined\n            : undefined;\n        return Object.assign(Object.assign({}, mapNullableType('string')), { \n            // FIXME: https://github.com/colinhacks/zod/commit/d78047e9f44596a96d637abb0ce209cd2732d88c\n            minLength: length !== null && length !== void 0 ? length : maxLength, maxLength: length !== null && length !== void 0 ? length : minLength, format: this.mapStringFormat(zodSchema), pattern: regexCheck === null || regexCheck === void 0 ? void 0 : regexCheck.regex.source });\n    }\n    /**\n     * Attempts to map Zod strings to known formats\n     * https://json-schema.org/understanding-json-schema/reference/string.html#built-in-formats\n     */\n    mapStringFormat(zodString) {\n        if (zodString.isUUID)\n            return 'uuid';\n        if (zodString.isEmail)\n            return 'email';\n        if (zodString.isURL)\n            return 'uri';\n        if (zodString.isDate)\n            return 'date';\n        if (zodString.isDatetime)\n            return 'date-time';\n        if (zodString.isCUID)\n            return 'cuid';\n        if (zodString.isCUID2)\n            return 'cuid2';\n        if (zodString.isULID)\n            return 'ulid';\n        if (zodString.isIP)\n            return 'ip';\n        if (zodString.isEmoji)\n            return 'emoji';\n        return undefined;\n    }\n    getZodStringCheck(zodString, kind) {\n        return zodString._def.checks.find((check) => {\n            return check.kind === kind;\n        });\n    }\n}\n\nclass TupleTransformer {\n    constructor(versionSpecifics) {\n        this.versionSpecifics = versionSpecifics;\n    }\n    transform(zodSchema, mapNullableType, mapItem) {\n        const { items } = zodSchema._def;\n        const schemas = items.map(mapItem);\n        return Object.assign(Object.assign({}, mapNullableType('array')), this.versionSpecifics.mapTupleItems(schemas));\n    }\n}\n\nclass UnionTransformer {\n    transform(zodSchema, mapNullableOfArray, mapItem) {\n        const options = this.flattenUnionTypes(zodSchema);\n        const schemas = options.map(schema => {\n            // If any of the underlying schemas of a union is .nullable then the whole union\n            // would be nullable. `mapNullableOfArray` would place it where it belongs.\n            // Therefor we are stripping the additional nullables from the inner schemas\n            // See https://github.com/asteasolutions/zod-to-openapi/issues/149\n            const optionToGenerate = this.unwrapNullable(schema);\n            return mapItem(optionToGenerate);\n        });\n        return {\n            anyOf: mapNullableOfArray(schemas),\n        };\n    }\n    flattenUnionTypes(schema) {\n        if (!isZodType(schema, 'ZodUnion')) {\n            return [schema];\n        }\n        const options = schema._def.options;\n        return options.flatMap(option => this.flattenUnionTypes(option));\n    }\n    unwrapNullable(schema) {\n        if (isZodType(schema, 'ZodNullable')) {\n            return this.unwrapNullable(schema.unwrap());\n        }\n        return schema;\n    }\n}\n\nclass OpenApiTransformer {\n    constructor(versionSpecifics) {\n        this.versionSpecifics = versionSpecifics;\n        this.objectTransformer = new ObjectTransformer();\n        this.stringTransformer = new StringTransformer();\n        this.numberTransformer = new NumberTransformer();\n        this.bigIntTransformer = new BigIntTransformer();\n        this.literalTransformer = new LiteralTransformer();\n        this.enumTransformer = new EnumTransformer();\n        this.nativeEnumTransformer = new NativeEnumTransformer();\n        this.arrayTransformer = new ArrayTransformer();\n        this.unionTransformer = new UnionTransformer();\n        this.discriminatedUnionTransformer = new DiscriminatedUnionTransformer();\n        this.intersectionTransformer = new IntersectionTransformer();\n        this.recordTransformer = new RecordTransformer();\n        this.tupleTransformer = new TupleTransformer(versionSpecifics);\n    }\n    transform(zodSchema, isNullable, mapItem, generateSchemaRef, defaultValue) {\n        if (isZodType(zodSchema, 'ZodNull')) {\n            return this.versionSpecifics.nullType;\n        }\n        if (isZodType(zodSchema, 'ZodUnknown') || isZodType(zodSchema, 'ZodAny')) {\n            return this.versionSpecifics.mapNullableType(undefined, isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodObject')) {\n            return this.objectTransformer.transform(zodSchema, defaultValue, // verified on TS level from input\n            // verified on TS level from input\n            _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        const schema = this.transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef);\n        return Object.assign(Object.assign({}, schema), { default: defaultValue });\n    }\n    transformSchemaWithoutDefault(zodSchema, isNullable, mapItem, generateSchemaRef) {\n        if (isZodType(zodSchema, 'ZodUnknown') || isZodType(zodSchema, 'ZodAny')) {\n            return this.versionSpecifics.mapNullableType(undefined, isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodString')) {\n            return this.stringTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodNumber')) {\n            return this.numberTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable), _ => this.versionSpecifics.getNumberChecks(_));\n        }\n        if (isZodType(zodSchema, 'ZodBigInt')) {\n            return this.bigIntTransformer.transform(schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodBoolean')) {\n            return this.versionSpecifics.mapNullableType('boolean', isNullable);\n        }\n        if (isZodType(zodSchema, 'ZodLiteral')) {\n            return this.literalTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodEnum')) {\n            return this.enumTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodNativeEnum')) {\n            return this.nativeEnumTransformer.transform(zodSchema, schema => this.versionSpecifics.mapNullableType(schema, isNullable));\n        }\n        if (isZodType(zodSchema, 'ZodArray')) {\n            return this.arrayTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodTuple')) {\n            return this.tupleTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodUnion')) {\n            return this.unionTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodDiscriminatedUnion')) {\n            return this.discriminatedUnionTransformer.transform(zodSchema, isNullable, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem, generateSchemaRef);\n        }\n        if (isZodType(zodSchema, 'ZodIntersection')) {\n            return this.intersectionTransformer.transform(zodSchema, isNullable, _ => this.versionSpecifics.mapNullableOfArray(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodRecord')) {\n            return this.recordTransformer.transform(zodSchema, _ => this.versionSpecifics.mapNullableType(_, isNullable), mapItem);\n        }\n        if (isZodType(zodSchema, 'ZodDate')) {\n            return this.versionSpecifics.mapNullableType('string', isNullable);\n        }\n        const refId = Metadata.getRefId(zodSchema);\n        throw new UnknownZodTypeError({\n            currentSchema: zodSchema._def,\n            schemaName: refId,\n        });\n    }\n}\n\nclass OpenAPIGenerator {\n    constructor(definitions, versionSpecifics) {\n        this.definitions = definitions;\n        this.versionSpecifics = versionSpecifics;\n        this.schemaRefs = {};\n        this.paramRefs = {};\n        this.pathRefs = {};\n        this.rawComponents = [];\n        this.openApiTransformer = new OpenApiTransformer(versionSpecifics);\n        this.sortDefinitions();\n    }\n    generateDocumentData() {\n        this.definitions.forEach(definition => this.generateSingle(definition));\n        return {\n            components: this.buildComponents(),\n            paths: this.pathRefs,\n        };\n    }\n    generateComponents() {\n        this.definitions.forEach(definition => this.generateSingle(definition));\n        return {\n            components: this.buildComponents(),\n        };\n    }\n    buildComponents() {\n        var _a, _b;\n        const rawComponents = {};\n        this.rawComponents.forEach(({ componentType, name, component }) => {\n            var _a;\n            (_a = rawComponents[componentType]) !== null && _a !== void 0 ? _a : (rawComponents[componentType] = {});\n            rawComponents[componentType][name] = component;\n        });\n        return Object.assign(Object.assign({}, rawComponents), { schemas: Object.assign(Object.assign({}, ((_a = rawComponents.schemas) !== null && _a !== void 0 ? _a : {})), this.schemaRefs), parameters: Object.assign(Object.assign({}, ((_b = rawComponents.parameters) !== null && _b !== void 0 ? _b : {})), this.paramRefs) });\n    }\n    sortDefinitions() {\n        const generationOrder = [\n            'schema',\n            'parameter',\n            'component',\n            'route',\n        ];\n        this.definitions.sort((left, right) => {\n            // No type means \"plain zod schema\" => it comes as highest priority based on the array above\n            if (!('type' in left)) {\n                if (!('type' in right)) {\n                    return 0;\n                }\n                return -1;\n            }\n            if (!('type' in right)) {\n                return 1;\n            }\n            const leftIndex = generationOrder.findIndex(type => type === left.type);\n            const rightIndex = generationOrder.findIndex(type => type === right.type);\n            return leftIndex - rightIndex;\n        });\n    }\n    generateSingle(definition) {\n        if (!('type' in definition)) {\n            this.generateSchemaWithRef(definition);\n            return;\n        }\n        switch (definition.type) {\n            case 'parameter':\n                this.generateParameterDefinition(definition.schema);\n                return;\n            case 'schema':\n                this.generateSchemaWithRef(definition.schema);\n                return;\n            case 'route':\n                this.generateSingleRoute(definition.route);\n                return;\n            case 'component':\n                this.rawComponents.push(definition);\n                return;\n        }\n    }\n    generateParameterDefinition(zodSchema) {\n        const refId = Metadata.getRefId(zodSchema);\n        const result = this.generateParameter(zodSchema);\n        if (refId) {\n            this.paramRefs[refId] = result;\n        }\n        return result;\n    }\n    getParameterRef(schemaMetadata, external) {\n        var _a, _b, _c, _d, _e;\n        const parameterMetadata = (_a = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const existingRef = ((_b = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _b === void 0 ? void 0 : _b.refId)\n            ? this.paramRefs[(_c = schemaMetadata._internal) === null || _c === void 0 ? void 0 : _c.refId]\n            : undefined;\n        if (!((_d = schemaMetadata === null || schemaMetadata === void 0 ? void 0 : schemaMetadata._internal) === null || _d === void 0 ? void 0 : _d.refId) || !existingRef) {\n            return undefined;\n        }\n        if ((parameterMetadata && existingRef.in !== parameterMetadata.in) ||\n            ((external === null || external === void 0 ? void 0 : external.in) && existingRef.in !== external.in)) {\n            throw new ConflictError(`Conflicting location for parameter ${existingRef.name}`, {\n                key: 'in',\n                values: compact([\n                    existingRef.in,\n                    external === null || external === void 0 ? void 0 : external.in,\n                    parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in,\n                ]),\n            });\n        }\n        if ((parameterMetadata && existingRef.name !== parameterMetadata.name) ||\n            ((external === null || external === void 0 ? void 0 : external.name) && existingRef.name !== (external === null || external === void 0 ? void 0 : external.name))) {\n            throw new ConflictError(`Conflicting names for parameter`, {\n                key: 'name',\n                values: compact([\n                    existingRef.name,\n                    external === null || external === void 0 ? void 0 : external.name,\n                    parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.name,\n                ]),\n            });\n        }\n        return {\n            $ref: `#/components/parameters/${(_e = schemaMetadata._internal) === null || _e === void 0 ? void 0 : _e.refId}`,\n        };\n    }\n    generateInlineParameters(zodSchema, location) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const parameterMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const referencedSchema = this.getParameterRef(metadata, { in: location });\n        if (referencedSchema) {\n            return [referencedSchema];\n        }\n        if (isZodType(zodSchema, 'ZodObject')) {\n            const propTypes = zodSchema._def.shape();\n            const parameters = Object.entries(propTypes).map(([key, schema]) => {\n                var _a, _b;\n                const innerMetadata = Metadata.getMetadata(schema);\n                const referencedSchema = this.getParameterRef(innerMetadata, {\n                    in: location,\n                    name: key,\n                });\n                if (referencedSchema) {\n                    return referencedSchema;\n                }\n                const innerParameterMetadata = (_a = innerMetadata === null || innerMetadata === void 0 ? void 0 : innerMetadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n                if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.name) &&\n                    innerParameterMetadata.name !== key) {\n                    throw new ConflictError(`Conflicting names for parameter`, {\n                        key: 'name',\n                        values: [key, innerParameterMetadata.name],\n                    });\n                }\n                if ((innerParameterMetadata === null || innerParameterMetadata === void 0 ? void 0 : innerParameterMetadata.in) &&\n                    innerParameterMetadata.in !== location) {\n                    throw new ConflictError(`Conflicting location for parameter ${(_b = innerParameterMetadata.name) !== null && _b !== void 0 ? _b : key}`, {\n                        key: 'in',\n                        values: [location, innerParameterMetadata.in],\n                    });\n                }\n                return this.generateParameter(schema.openapi({ param: { name: key, in: location } }));\n            });\n            return parameters;\n        }\n        if ((parameterMetadata === null || parameterMetadata === void 0 ? void 0 : parameterMetadata.in) && parameterMetadata.in !== location) {\n            throw new ConflictError(`Conflicting location for parameter ${parameterMetadata.name}`, {\n                key: 'in',\n                values: [location, parameterMetadata.in],\n            });\n        }\n        return [\n            this.generateParameter(zodSchema.openapi({ param: { in: location } })),\n        ];\n    }\n    generateSimpleParameter(zodSchema) {\n        var _a;\n        const metadata = Metadata.getParamMetadata(zodSchema);\n        const paramMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        // TODO: Why are we not unwrapping here for isNullable as well?\n        const required = !Metadata.isOptionalSchema(zodSchema) && !zodSchema.isNullable();\n        const schema = this.generateSchemaWithRef(zodSchema);\n        return Object.assign({ schema,\n            required }, (paramMetadata ? Metadata.buildParameterMetadata(paramMetadata) : {}));\n    }\n    generateParameter(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const paramMetadata = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.param;\n        const paramName = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.name;\n        const paramLocation = paramMetadata === null || paramMetadata === void 0 ? void 0 : paramMetadata.in;\n        if (!paramName) {\n            throw new MissingParameterDataError({ missingField: 'name' });\n        }\n        if (!paramLocation) {\n            throw new MissingParameterDataError({\n                missingField: 'in',\n                paramName,\n            });\n        }\n        const baseParameter = this.generateSimpleParameter(zodSchema);\n        return Object.assign(Object.assign({}, baseParameter), { in: paramLocation, name: paramName });\n    }\n    generateSchemaWithMetadata(zodSchema) {\n        var _a;\n        const innerSchema = Metadata.unwrapChained(zodSchema);\n        const metadata = Metadata.getMetadata(zodSchema);\n        const defaultValue = Metadata.getDefaultValue(zodSchema);\n        const result = ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.type)\n            ? { type: metadata === null || metadata === void 0 ? void 0 : metadata.metadata.type }\n            : this.toOpenAPISchema(innerSchema, zodSchema.isNullable(), defaultValue);\n        return (metadata === null || metadata === void 0 ? void 0 : metadata.metadata)\n            ? Metadata.applySchemaMetadata(result, metadata.metadata)\n            : omitBy(result, isUndefined);\n    }\n    /**\n     * Same as above but applies nullable\n     */\n    constructReferencedOpenAPISchema(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const innerSchema = Metadata.unwrapChained(zodSchema);\n        const defaultValue = Metadata.getDefaultValue(zodSchema);\n        const isNullableSchema = zodSchema.isNullable();\n        if ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) === null || _a === void 0 ? void 0 : _a.type) {\n            return this.versionSpecifics.mapNullableType(metadata.metadata.type, isNullableSchema);\n        }\n        return this.toOpenAPISchema(innerSchema, isNullableSchema, defaultValue);\n    }\n    /**\n     * Generates an OpenAPI SchemaObject or a ReferenceObject with all the provided metadata applied\n     */\n    generateSimpleSchema(zodSchema) {\n        var _a;\n        const metadata = Metadata.getMetadata(zodSchema);\n        const refId = Metadata.getRefId(zodSchema);\n        if (!refId || !this.schemaRefs[refId]) {\n            return this.generateSchemaWithMetadata(zodSchema);\n        }\n        const schemaRef = this.schemaRefs[refId];\n        const referenceObject = {\n            $ref: this.generateSchemaRef(refId),\n        };\n        // Metadata provided from .openapi() that is new to what we had already registered\n        const newMetadata = omitBy(Metadata.buildSchemaMetadata((_a = metadata === null || metadata === void 0 ? void 0 : metadata.metadata) !== null && _a !== void 0 ? _a : {}), (value, key) => value === undefined || objectEquals(value, schemaRef[key]));\n        // Do not calculate schema metadata overrides if type is provided in .openapi\n        // https://github.com/asteasolutions/zod-to-openapi/pull/52/files/8ff707fe06e222bc573ed46cf654af8ee0b0786d#r996430801\n        if (newMetadata.type) {\n            return {\n                allOf: [referenceObject, newMetadata],\n            };\n        }\n        // New metadata from ZodSchema properties.\n        const newSchemaMetadata = omitBy(this.constructReferencedOpenAPISchema(zodSchema), (value, key) => value === undefined || objectEquals(value, schemaRef[key]));\n        const appliedMetadata = Metadata.applySchemaMetadata(newSchemaMetadata, newMetadata);\n        if (Object.keys(appliedMetadata).length > 0) {\n            return {\n                allOf: [referenceObject, appliedMetadata],\n            };\n        }\n        return referenceObject;\n    }\n    /**\n     * Same as `generateSchema` but if the new schema is added into the\n     * referenced schemas, it would return a ReferenceObject and not the\n     * whole result.\n     *\n     * Should be used for nested objects, arrays, etc.\n     */\n    generateSchemaWithRef(zodSchema) {\n        const refId = Metadata.getRefId(zodSchema);\n        const result = this.generateSimpleSchema(zodSchema);\n        if (refId && this.schemaRefs[refId] === undefined) {\n            this.schemaRefs[refId] = result;\n            return { $ref: this.generateSchemaRef(refId) };\n        }\n        return result;\n    }\n    generateSchemaRef(refId) {\n        return `#/components/schemas/${refId}`;\n    }\n    getRequestBody(requestBody) {\n        if (!requestBody) {\n            return;\n        }\n        const { content } = requestBody, rest = __rest(requestBody, [\"content\"]);\n        const requestBodyContent = this.getBodyContent(content);\n        return Object.assign(Object.assign({}, rest), { content: requestBodyContent });\n    }\n    getParameters(request) {\n        if (!request) {\n            return [];\n        }\n        const { headers } = request;\n        const query = this.cleanParameter(request.query);\n        const params = this.cleanParameter(request.params);\n        const cookies = this.cleanParameter(request.cookies);\n        const queryParameters = enhanceMissingParametersError(() => (query ? this.generateInlineParameters(query, 'query') : []), { location: 'query' });\n        const pathParameters = enhanceMissingParametersError(() => (params ? this.generateInlineParameters(params, 'path') : []), { location: 'path' });\n        const cookieParameters = enhanceMissingParametersError(() => (cookies ? this.generateInlineParameters(cookies, 'cookie') : []), { location: 'cookie' });\n        const headerParameters = enhanceMissingParametersError(() => {\n            if (Array.isArray(headers)) {\n                return headers.flatMap(header => this.generateInlineParameters(header, 'header'));\n            }\n            const cleanHeaders = this.cleanParameter(headers);\n            return cleanHeaders\n                ? this.generateInlineParameters(cleanHeaders, 'header')\n                : [];\n        }, { location: 'header' });\n        return [\n            ...pathParameters,\n            ...queryParameters,\n            ...headerParameters,\n            ...cookieParameters,\n        ];\n    }\n    cleanParameter(schema) {\n        if (!schema) {\n            return undefined;\n        }\n        return isZodType(schema, 'ZodEffects')\n            ? this.cleanParameter(schema._def.schema)\n            : schema;\n    }\n    generatePath(route) {\n        const { method, path, request, responses } = route, pathItemConfig = __rest(route, [\"method\", \"path\", \"request\", \"responses\"]);\n        const generatedResponses = mapValues(responses, response => {\n            return this.getResponse(response);\n        });\n        const parameters = enhanceMissingParametersError(() => this.getParameters(request), { route: `${method} ${path}` });\n        const requestBody = this.getRequestBody(request === null || request === void 0 ? void 0 : request.body);\n        const routeDoc = {\n            [method]: Object.assign(Object.assign(Object.assign(Object.assign({}, pathItemConfig), (parameters.length > 0\n                ? {\n                    parameters: [...(pathItemConfig.parameters || []), ...parameters],\n                }\n                : {})), (requestBody ? { requestBody } : {})), { responses: generatedResponses }),\n        };\n        return routeDoc;\n    }\n    generateSingleRoute(route) {\n        const routeDoc = this.generatePath(route);\n        this.pathRefs[route.path] = Object.assign(Object.assign({}, this.pathRefs[route.path]), routeDoc);\n        return routeDoc;\n    }\n    getResponse(response) {\n        if (this.isReferenceObject(response)) {\n            return response;\n        }\n        const { content, headers } = response, rest = __rest(response, [\"content\", \"headers\"]);\n        const responseContent = content\n            ? { content: this.getBodyContent(content) }\n            : {};\n        if (!headers) {\n            return Object.assign(Object.assign({}, rest), responseContent);\n        }\n        const responseHeaders = isZodType(headers, 'ZodObject')\n            ? this.getResponseHeaders(headers)\n            : // This is input data so it is okay to cast in the common generator\n                // since this is the user's responsibility to keep it correct\n                headers;\n        return Object.assign(Object.assign(Object.assign({}, rest), { headers: responseHeaders }), responseContent);\n    }\n    isReferenceObject(schema) {\n        return '$ref' in schema;\n    }\n    getResponseHeaders(headers) {\n        const schemaShape = headers._def.shape();\n        const responseHeaders = mapValues(schemaShape, _ => this.generateSimpleParameter(_));\n        return responseHeaders;\n    }\n    getBodyContent(content) {\n        return mapValues(content, config => {\n            if (!config || !isAnyZodType(config.schema)) {\n                return config;\n            }\n            const { schema: configSchema } = config, rest = __rest(config, [\"schema\"]);\n            const schema = this.generateSchemaWithRef(configSchema);\n            return Object.assign({ schema }, rest);\n        });\n    }\n    toOpenAPISchema(zodSchema, isNullable, defaultValue) {\n        return this.openApiTransformer.transform(zodSchema, isNullable, _ => this.generateSchemaWithRef(_), _ => this.generateSchemaRef(_), defaultValue);\n    }\n}\n\nclass OpenApiGeneratorV30Specifics {\n    get nullType() {\n        return { nullable: true };\n    }\n    mapNullableOfArray(objects, isNullable) {\n        if (isNullable) {\n            return [...objects, this.nullType];\n        }\n        return objects;\n    }\n    mapNullableType(type, isNullable) {\n        return Object.assign(Object.assign({}, (type ? { type } : undefined)), (isNullable ? this.nullType : undefined));\n    }\n    mapTupleItems(schemas) {\n        const uniqueSchemas = uniq(schemas);\n        return {\n            items: uniqueSchemas.length === 1\n                ? uniqueSchemas[0]\n                : { anyOf: uniqueSchemas },\n            minItems: schemas.length,\n            maxItems: schemas.length,\n        };\n    }\n    getNumberChecks(checks) {\n        return Object.assign({}, ...checks.map(check => {\n            switch (check.kind) {\n                case 'min':\n                    return check.inclusive\n                        ? { minimum: Number(check.value) }\n                        : { minimum: Number(check.value), exclusiveMinimum: true };\n                case 'max':\n                    return check.inclusive\n                        ? { maximum: Number(check.value) }\n                        : { maximum: Number(check.value), exclusiveMaximum: true };\n                default:\n                    return {};\n            }\n        }));\n    }\n}\n\nclass OpenApiGeneratorV3 {\n    constructor(definitions) {\n        const specifics = new OpenApiGeneratorV30Specifics();\n        this.generator = new OpenAPIGenerator(definitions, specifics);\n    }\n    generateDocument(config) {\n        const baseData = this.generator.generateDocumentData();\n        return Object.assign(Object.assign({}, config), baseData);\n    }\n    generateComponents() {\n        return this.generator.generateComponents();\n    }\n}\n\nclass OpenApiGeneratorV31Specifics {\n    get nullType() {\n        return { type: 'null' };\n    }\n    mapNullableOfArray(objects, isNullable) {\n        if (isNullable) {\n            return [...objects, this.nullType];\n        }\n        return objects;\n    }\n    mapNullableType(type, isNullable) {\n        if (!type) {\n            // 'null' is considered a type in Open API 3.1.0 => not providing a type includes null\n            return {};\n        }\n        // Open API 3.1.0 made the `nullable` key invalid and instead you use type arrays\n        if (isNullable) {\n            return {\n                type: Array.isArray(type) ? [...type, 'null'] : [type, 'null'],\n            };\n        }\n        return {\n            type,\n        };\n    }\n    mapTupleItems(schemas) {\n        return {\n            prefixItems: schemas,\n        };\n    }\n    getNumberChecks(checks) {\n        return Object.assign({}, ...checks.map(check => {\n            switch (check.kind) {\n                case 'min':\n                    return check.inclusive\n                        ? { minimum: Number(check.value) }\n                        : { exclusiveMinimum: Number(check.value) };\n                case 'max':\n                    return check.inclusive\n                        ? { maximum: Number(check.value) }\n                        : { exclusiveMaximum: Number(check.value) };\n                default:\n                    return {};\n            }\n        }));\n    }\n}\n\nfunction isWebhookDefinition(definition) {\n    return 'type' in definition && definition.type === 'webhook';\n}\nclass OpenApiGeneratorV31 {\n    constructor(definitions) {\n        this.definitions = definitions;\n        this.webhookRefs = {};\n        const specifics = new OpenApiGeneratorV31Specifics();\n        this.generator = new OpenAPIGenerator(this.definitions, specifics);\n    }\n    generateDocument(config) {\n        const baseDocument = this.generator.generateDocumentData();\n        this.definitions\n            .filter(isWebhookDefinition)\n            .forEach(definition => this.generateSingleWebhook(definition.webhook));\n        return Object.assign(Object.assign(Object.assign({}, config), baseDocument), { webhooks: this.webhookRefs });\n    }\n    generateComponents() {\n        return this.generator.generateComponents();\n    }\n    generateSingleWebhook(route) {\n        const routeDoc = this.generator.generatePath(route);\n        this.webhookRefs[route.path] = Object.assign(Object.assign({}, this.webhookRefs[route.path]), routeDoc);\n        return routeDoc;\n    }\n}\n\nexport { OpenAPIRegistry, OpenApiGeneratorV3, OpenApiGeneratorV31, extendZodWithOpenApi, getOpenApiMetadata };\n", "import { validator } from 'hono/validator';\nexport const zValidator = (target, schema, hook) => \n// @ts-expect-error not typed well\nvalidator(target, async (value, c) => {\n    const result = await schema.safeParseAsync(value);\n    if (hook) {\n        const hookResult = await hook({ data: value, ...result, target }, c);\n        if (hookResult) {\n            if (hookResult instanceof Response) {\n                return hookResult;\n            }\n            if ('response' in hookResult) {\n                return hookResult.response;\n            }\n        }\n    }\n    if (!result.success) {\n        return c.json(result, 400);\n    }\n    return result.data;\n});\n", "// src/validator/index.ts\nimport { validator } from \"./validator.js\";\nexport {\n  validator\n};\n", "// src/validator/validator.ts\nimport { getCookie } from \"../helper/cookie/index.js\";\nimport { HTTPException } from \"../http-exception.js\";\nimport { bufferToFormData } from \"../utils/buffer.js\";\nvar jsonRegex = /^application\\/([a-z-\\.]+\\+)?json(;\\s*[a-zA-Z0-9\\-]+\\=([^;]+))*$/;\nvar multipartRegex = /^multipart\\/form-data(;\\s?boundary=[a-zA-Z0-9'\"()+_,\\-./:=?]+)?$/;\nvar urlencodedRegex = /^application\\/x-www-form-urlencoded(;\\s*[a-zA-Z0-9\\-]+\\=([^;]+))*$/;\nvar validator = (target, validationFunc) => {\n  return async (c, next) => {\n    let value = {};\n    const contentType = c.req.header(\"Content-Type\");\n    switch (target) {\n      case \"json\":\n        if (!contentType || !jsonRegex.test(contentType)) {\n          break;\n        }\n        try {\n          value = await c.req.json();\n        } catch {\n          const message = \"Malformed JSON in request body\";\n          throw new HTTPException(400, { message });\n        }\n        break;\n      case \"form\": {\n        if (!contentType || !(multipartRegex.test(contentType) || urlencodedRegex.test(contentType))) {\n          break;\n        }\n        let formData;\n        if (c.req.bodyCache.formData) {\n          formData = await c.req.bodyCache.formData;\n        } else {\n          try {\n            const arrayBuffer = await c.req.arrayBuffer();\n            formData = await bufferToFormData(arrayBuffer, contentType);\n            c.req.bodyCache.formData = formData;\n          } catch (e) {\n            let message = \"Malformed FormData request.\";\n            message += e instanceof Error ? ` ${e.message}` : ` ${String(e)}`;\n            throw new HTTPException(400, { message });\n          }\n        }\n        const form = {};\n        formData.forEach((value2, key) => {\n          if (key.endsWith(\"[]\")) {\n            ;\n            (form[key] ??= []).push(value2);\n          } else if (Array.isArray(form[key])) {\n            ;\n            form[key].push(value2);\n          } else if (key in form) {\n            form[key] = [form[key], value2];\n          } else {\n            form[key] = value2;\n          }\n        });\n        value = form;\n        break;\n      }\n      case \"query\":\n        value = Object.fromEntries(\n          Object.entries(c.req.queries()).map(([k, v]) => {\n            return v.length === 1 ? [k, v[0]] : [k, v];\n          })\n        );\n        break;\n      case \"param\":\n        value = c.req.param();\n        break;\n      case \"header\":\n        value = c.req.header();\n        break;\n      case \"cookie\":\n        value = getCookie(c);\n        break;\n    }\n    const res = await validationFunc(value, c);\n    if (res instanceof Response) {\n      return res;\n    }\n    c.req.addValidatedData(target, res);\n    await next();\n  };\n};\nexport {\n  validator\n};\n", "// src/helper/cookie/index.ts\nimport { parse, parseSigned, serialize, serializeSigned } from \"../../utils/cookie.js\";\nvar getCookie = (c, key, prefix) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    let finalKey = key;\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n    const obj2 = parse(cookie, finalKey);\n    return obj2[finalKey];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = parse(cookie);\n  return obj;\n};\nvar getSignedCookie = async (c, secret, key, prefix) => {\n  const cookie = c.req.raw.headers.get(\"Cookie\");\n  if (typeof key === \"string\") {\n    if (!cookie) {\n      return void 0;\n    }\n    let finalKey = key;\n    if (prefix === \"secure\") {\n      finalKey = \"__Secure-\" + key;\n    } else if (prefix === \"host\") {\n      finalKey = \"__Host-\" + key;\n    }\n    const obj2 = await parseSigned(cookie, secret, finalKey);\n    return obj2[finalKey];\n  }\n  if (!cookie) {\n    return {};\n  }\n  const obj = await parseSigned(cookie, secret);\n  return obj;\n};\nvar generateCookie = (name, value, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = serialize(\"__Secure-\" + name, value, { path: \"/\", ...opt, secure: true });\n  } else if (opt?.prefix === \"host\") {\n    cookie = serialize(\"__Host-\" + name, value, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = serialize(name, value, { path: \"/\", ...opt });\n  }\n  return cookie;\n};\nvar setCookie = (c, name, value, opt) => {\n  const cookie = generateCookie(name, value, opt);\n  c.header(\"Set-Cookie\", cookie, { append: true });\n};\nvar generateSignedCookie = async (name, value, secret, opt) => {\n  let cookie;\n  if (opt?.prefix === \"secure\") {\n    cookie = await serializeSigned(\"__Secure-\" + name, value, secret, {\n      path: \"/\",\n      ...opt,\n      secure: true\n    });\n  } else if (opt?.prefix === \"host\") {\n    cookie = await serializeSigned(\"__Host-\" + name, value, secret, {\n      ...opt,\n      path: \"/\",\n      secure: true,\n      domain: void 0\n    });\n  } else {\n    cookie = await serializeSigned(name, value, secret, { path: \"/\", ...opt });\n  }\n  return cookie;\n};\nvar setSignedCookie = async (c, name, value, secret, opt) => {\n  const cookie = await generateSignedCookie(name, value, secret, opt);\n  c.header(\"set-cookie\", cookie, { append: true });\n};\nvar deleteCookie = (c, name, opt) => {\n  const deletedCookie = getCookie(c, name, opt?.prefix);\n  setCookie(c, name, \"\", { ...opt, maxAge: 0 });\n  return deletedCookie;\n};\nexport {\n  deleteCookie,\n  generateCookie,\n  generateSignedCookie,\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie\n};\n", "// src/utils/cookie.ts\nimport { decodeURIComponent_, tryDecode } from \"./url.js\";\nvar algorithm = { name: \"HMAC\", hash: \"SHA-256\" };\nvar getCryptoKey = async (secret) => {\n  const secretBuf = typeof secret === \"string\" ? new TextEncoder().encode(secret) : secret;\n  return await crypto.subtle.importKey(\"raw\", secretBuf, algorithm, false, [\"sign\", \"verify\"]);\n};\nvar makeSignature = async (value, secret) => {\n  const key = await getCryptoKey(secret);\n  const signature = await crypto.subtle.sign(algorithm.name, key, new TextEncoder().encode(value));\n  return btoa(String.fromCharCode(...new Uint8Array(signature)));\n};\nvar verifySignature = async (base64Signature, value, secret) => {\n  try {\n    const signatureBinStr = atob(base64Signature);\n    const signature = new Uint8Array(signatureBinStr.length);\n    for (let i = 0, len = signatureBinStr.length; i < len; i++) {\n      signature[i] = signatureBinStr.charCodeAt(i);\n    }\n    return await crypto.subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));\n  } catch {\n    return false;\n  }\n};\nvar validCookieNameRegEx = /^[\\w!#$%&'*.^`|~+-]+$/;\nvar validCookieValueRegEx = /^[ !#-:<-[\\]-~]*$/;\nvar parse = (cookie, name) => {\n  if (name && cookie.indexOf(name) === -1) {\n    return {};\n  }\n  const pairs = cookie.trim().split(\";\");\n  const parsedCookie = {};\n  for (let pairStr of pairs) {\n    pairStr = pairStr.trim();\n    const valueStartPos = pairStr.indexOf(\"=\");\n    if (valueStartPos === -1) {\n      continue;\n    }\n    const cookieName = pairStr.substring(0, valueStartPos).trim();\n    if (name && name !== cookieName || !validCookieNameRegEx.test(cookieName)) {\n      continue;\n    }\n    let cookieValue = pairStr.substring(valueStartPos + 1).trim();\n    if (cookieValue.startsWith('\"') && cookieValue.endsWith('\"')) {\n      cookieValue = cookieValue.slice(1, -1);\n    }\n    if (validCookieValueRegEx.test(cookieValue)) {\n      parsedCookie[cookieName] = cookieValue.indexOf(\"%\") !== -1 ? tryDecode(cookieValue, decodeURIComponent_) : cookieValue;\n      if (name) {\n        break;\n      }\n    }\n  }\n  return parsedCookie;\n};\nvar parseSigned = async (cookie, secret, name) => {\n  const parsedCookie = {};\n  const secretKey = await getCryptoKey(secret);\n  for (const [key, value] of Object.entries(parse(cookie, name))) {\n    const signatureStartPos = value.lastIndexOf(\".\");\n    if (signatureStartPos < 1) {\n      continue;\n    }\n    const signedValue = value.substring(0, signatureStartPos);\n    const signature = value.substring(signatureStartPos + 1);\n    if (signature.length !== 44 || !signature.endsWith(\"=\")) {\n      continue;\n    }\n    const isVerified = await verifySignature(signature, signedValue, secretKey);\n    parsedCookie[key] = isVerified ? signedValue : false;\n  }\n  return parsedCookie;\n};\nvar _serialize = (name, value, opt = {}) => {\n  let cookie = `${name}=${value}`;\n  if (name.startsWith(\"__Secure-\") && !opt.secure) {\n    throw new Error(\"__Secure- Cookie must have Secure attributes\");\n  }\n  if (name.startsWith(\"__Host-\")) {\n    if (!opt.secure) {\n      throw new Error(\"__Host- Cookie must have Secure attributes\");\n    }\n    if (opt.path !== \"/\") {\n      throw new Error('__Host- Cookie must have Path attributes with \"/\"');\n    }\n    if (opt.domain) {\n      throw new Error(\"__Host- Cookie must not have Domain attributes\");\n    }\n  }\n  if (opt && typeof opt.maxAge === \"number\" && opt.maxAge >= 0) {\n    if (opt.maxAge > 3456e4) {\n      throw new Error(\n        \"Cookies Max-Age SHOULD NOT be greater than 400 days (34560000 seconds) in duration.\"\n      );\n    }\n    cookie += `; Max-Age=${opt.maxAge | 0}`;\n  }\n  if (opt.domain && opt.prefix !== \"host\") {\n    cookie += `; Domain=${opt.domain}`;\n  }\n  if (opt.path) {\n    cookie += `; Path=${opt.path}`;\n  }\n  if (opt.expires) {\n    if (opt.expires.getTime() - Date.now() > 3456e7) {\n      throw new Error(\n        \"Cookies Expires SHOULD NOT be greater than 400 days (34560000 seconds) in the future.\"\n      );\n    }\n    cookie += `; Expires=${opt.expires.toUTCString()}`;\n  }\n  if (opt.httpOnly) {\n    cookie += \"; HttpOnly\";\n  }\n  if (opt.secure) {\n    cookie += \"; Secure\";\n  }\n  if (opt.sameSite) {\n    cookie += `; SameSite=${opt.sameSite.charAt(0).toUpperCase() + opt.sameSite.slice(1)}`;\n  }\n  if (opt.priority) {\n    cookie += `; Priority=${opt.priority.charAt(0).toUpperCase() + opt.priority.slice(1)}`;\n  }\n  if (opt.partitioned) {\n    if (!opt.secure) {\n      throw new Error(\"Partitioned Cookie must have Secure attributes\");\n    }\n    cookie += \"; Partitioned\";\n  }\n  return cookie;\n};\nvar serialize = (name, value, opt) => {\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nvar serializeSigned = async (name, value, secret, opt = {}) => {\n  const signature = await makeSignature(value, secret);\n  value = `${value}.${signature}`;\n  value = encodeURIComponent(value);\n  return _serialize(name, value, opt);\n};\nexport {\n  parse,\n  parseSigned,\n  serialize,\n  serializeSigned\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\n    \"/\",\n    url.charCodeAt(9) === 58 ? 13 : 8\n  );\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n", "// src/utils/buffer.ts\nimport { sha256 } from \"./crypto.js\";\nvar equal = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  const va = new DataView(a);\n  const vb = new DataView(b);\n  let i = va.byteLength;\n  while (i--) {\n    if (va.getUint8(i) !== vb.getUint8(i)) {\n      return false;\n    }\n  }\n  return true;\n};\nvar timingSafeEqual = async (a, b, hashFunction) => {\n  if (!hashFunction) {\n    hashFunction = sha256;\n  }\n  const [sa, sb] = await Promise.all([hashFunction(a), hashFunction(b)]);\n  if (!sa || !sb) {\n    return false;\n  }\n  return sa === sb && a === b;\n};\nvar bufferToString = (buffer) => {\n  if (buffer instanceof ArrayBuffer) {\n    const enc = new TextDecoder(\"utf-8\");\n    return enc.decode(buffer);\n  }\n  return buffer;\n};\nvar bufferToFormData = (arrayBuffer, contentType) => {\n  const response = new Response(arrayBuffer, {\n    headers: {\n      \"Content-Type\": contentType\n    }\n  });\n  return response.formData();\n};\nexport {\n  bufferToFormData,\n  bufferToString,\n  equal,\n  timingSafeEqual\n};\n", "// src/utils/crypto.ts\nvar sha256 = async (data) => {\n  const algorithm = { name: \"SHA-256\", alias: \"sha256\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar sha1 = async (data) => {\n  const algorithm = { name: \"SHA-1\", alias: \"sha1\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar md5 = async (data) => {\n  const algorithm = { name: \"MD5\", alias: \"md5\" };\n  const hash = await createHash(data, algorithm);\n  return hash;\n};\nvar createHash = async (data, algorithm) => {\n  let sourceBuffer;\n  if (ArrayBuffer.isView(data) || data instanceof ArrayBuffer) {\n    sourceBuffer = data;\n  } else {\n    if (typeof data === \"object\") {\n      data = JSON.stringify(data);\n    }\n    sourceBuffer = new TextEncoder().encode(String(data));\n  }\n  if (crypto && crypto.subtle) {\n    const buffer = await crypto.subtle.digest(\n      {\n        name: algorithm.name\n      },\n      sourceBuffer\n    );\n    const hash = Array.prototype.map.call(new Uint8Array(buffer), (x) => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n    return hash;\n  }\n  return null;\n};\nexport {\n  createHash,\n  md5,\n  sha1,\n  sha256\n};\n", "// src/index.ts\nimport { Hono } from \"./hono.js\";\nexport {\n  Hono\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n", "// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n", "// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n", "// src/router/reg-exp-router/index.ts\nimport { RegExpRouter } from \"./router.js\";\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/smart-router/index.ts\nimport { SmartRouter } from \"./router.js\";\nexport {\n  SmartRouter\n};\n", "// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/index.ts\nimport { TrieRouter } from \"./router.js\";\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "// src/index.ts\nimport { html } from \"hono/html\";\n\n// src/swagger/renderer.ts\nvar RENDER_TYPE = {\n  STRING_ARRAY: \"string_array\",\n  STRING: \"string\",\n  JSON_STRING: \"json_string\",\n  RAW: \"raw\"\n};\nvar RENDER_TYPE_MAP = {\n  configUrl: RENDER_TYPE.STRING,\n  deepLinking: RENDER_TYPE.RAW,\n  presets: RENDER_TYPE.STRING_ARRAY,\n  plugins: RENDER_TYPE.STRING_ARRAY,\n  spec: RENDER_TYPE.JSON_STRING,\n  url: RENDER_TYPE.STRING,\n  urls: RENDER_TYPE.JSON_STRING,\n  layout: RENDER_TYPE.STRING,\n  docExpansion: RENDER_TYPE.STRING,\n  maxDisplayedTags: RENDER_TYPE.RAW,\n  operationsSorter: RENDER_TYPE.RAW,\n  requestInterceptor: RENDER_TYPE.RAW,\n  responseInterceptor: RENDER_TYPE.RAW,\n  persistAuthorization: RENDER_TYPE.RAW,\n  defaultModelsExpandDepth: RENDER_TYPE.RAW,\n  defaultModelExpandDepth: RENDER_TYPE.RAW,\n  defaultModelRendering: RENDER_TYPE.STRING,\n  displayRequestDuration: RENDER_TYPE.RAW,\n  filter: RENDER_TYPE.RAW,\n  showExtensions: RENDER_TYPE.RAW,\n  showCommonExtensions: RENDER_TYPE.RAW,\n  queryConfigEnabled: RENDER_TYPE.RAW,\n  displayOperationId: RENDER_TYPE.RAW,\n  tagsSorter: RENDER_TYPE.RAW,\n  onComplete: RENDER_TYPE.RAW,\n  syntaxHighlight: RENDER_TYPE.JSON_STRING,\n  tryItOutEnabled: RENDER_TYPE.RAW,\n  requestSnippetsEnabled: RENDER_TYPE.RAW,\n  requestSnippets: RENDER_TYPE.JSON_STRING,\n  oauth2RedirectUrl: RENDER_TYPE.STRING,\n  showMutabledRequest: RENDER_TYPE.RAW,\n  request: RENDER_TYPE.JSON_STRING,\n  supportedSubmitMethods: RENDER_TYPE.JSON_STRING,\n  validatorUrl: RENDER_TYPE.STRING,\n  withCredentials: RENDER_TYPE.RAW,\n  modelPropertyMacro: RENDER_TYPE.RAW,\n  parameterMacro: RENDER_TYPE.RAW\n};\nvar renderSwaggerUIOptions = (options) => {\n  const optionsStrings = Object.entries(options).map(([k, v]) => {\n    const key = k;\n    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.STRING) {\n      return `${key}: '${v}'`;\n    }\n    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.STRING_ARRAY) {\n      if (!Array.isArray(v)) {\n        return \"\";\n      }\n      return `${key}: [${v.map((ve) => `${ve}`).join(\",\")}]`;\n    }\n    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.JSON_STRING) {\n      return `${key}: ${JSON.stringify(v)}`;\n    }\n    if (RENDER_TYPE_MAP[key] === RENDER_TYPE.RAW) {\n      return `${key}: ${v}`;\n    }\n    return \"\";\n  }).join(\",\");\n  return optionsStrings;\n};\n\n// src/swagger/resource.ts\nvar remoteAssets = ({ version }) => {\n  const url = `https://cdn.jsdelivr.net/npm/swagger-ui-dist${version !== void 0 ? `@${version}` : \"\"}`;\n  return {\n    css: [`${url}/swagger-ui.css`],\n    js: [`${url}/swagger-ui-bundle.js`]\n  };\n};\n\n// src/index.ts\nvar SwaggerUI = (options) => {\n  const asset = remoteAssets({ version: options?.version });\n  delete options.version;\n  if (options.manuallySwaggerUIHtml) {\n    return options.manuallySwaggerUIHtml(asset);\n  }\n  const optionsStrings = renderSwaggerUIOptions(options);\n  return `\n    <div>\n      <div id=\"swagger-ui\"></div>\n      ${asset.css.map((url) => html`<link rel=\"stylesheet\" href=\"${url}\" />`)}\n      ${asset.js.map((url) => html`<script src=\"${url}\" crossorigin=\"anonymous\"></script>`)}\n      <script>\n        window.onload = () => {\n          window.ui = SwaggerUIBundle({\n            dom_id: '#swagger-ui',${optionsStrings},\n          })\n        }\n      </script>\n    </div>\n  `;\n};\nvar middleware = (options) => async (c) => {\n  return c.html(\n    /* html */\n    `\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta name=\"description\" content=\"SwaggerUI\" />\n          <title>SwaggerUI</title>\n        </head>\n        <body>\n          ${SwaggerUI(options)}\n        </body>\n      </html>\n    `\n  );\n};\nexport {\n  SwaggerUI,\n  middleware as swaggerUI\n};\n", "// src/helper/html/index.ts\nimport { escapeToBuffer, raw, resolveCallbackSync, stringBufferToString } from \"../../utils/html.js\";\nvar html = (strings, ...values) => {\n  const buffer = [\"\"];\n  for (let i = 0, len = strings.length - 1; i < len; i++) {\n    buffer[0] += strings[i];\n    const children = Array.isArray(values[i]) ? values[i].flat(Infinity) : [values[i]];\n    for (let i2 = 0, len2 = children.length; i2 < len2; i2++) {\n      const child = children[i2];\n      if (typeof child === \"string\") {\n        escapeToBuffer(child, buffer);\n      } else if (typeof child === \"number\") {\n        ;\n        buffer[0] += child;\n      } else if (typeof child === \"boolean\" || child === null || child === void 0) {\n        continue;\n      } else if (typeof child === \"object\" && child.isEscaped) {\n        if (child.callbacks) {\n          buffer.unshift(\"\", child);\n        } else {\n          const tmp = child.toString();\n          if (tmp instanceof Promise) {\n            buffer.unshift(\"\", tmp);\n          } else {\n            buffer[0] += tmp;\n          }\n        }\n      } else if (child instanceof Promise) {\n        buffer.unshift(\"\", child);\n      } else {\n        escapeToBuffer(child.toString(), buffer);\n      }\n    }\n  }\n  buffer[0] += strings.at(-1);\n  return buffer.length === 1 ? \"callbacks\" in buffer ? raw(resolveCallbackSync(raw(buffer[0], buffer.callbacks))) : raw(buffer[0]) : stringBufferToString(buffer, buffer.callbacks);\n};\nexport {\n  html,\n  raw\n};\n", "// src/middleware/cors/index.ts\nvar cors = (options) => {\n  const defaults = {\n    origin: \"*\",\n    allowMethods: [\"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\", \"PATCH\"],\n    allowHeaders: [],\n    exposeHeaders: []\n  };\n  const opts = {\n    ...defaults,\n    ...options\n  };\n  const findAllowOrigin = ((optsOrigin) => {\n    if (typeof optsOrigin === \"string\") {\n      if (optsOrigin === \"*\") {\n        return () => optsOrigin;\n      } else {\n        return (origin) => optsOrigin === origin ? origin : null;\n      }\n    } else if (typeof optsOrigin === \"function\") {\n      return optsOrigin;\n    } else {\n      return (origin) => optsOrigin.includes(origin) ? origin : null;\n    }\n  })(opts.origin);\n  const findAllowMethods = ((optsAllowMethods) => {\n    if (typeof optsAllowMethods === \"function\") {\n      return optsAllowMethods;\n    } else if (Array.isArray(optsAllowMethods)) {\n      return () => optsAllowMethods;\n    } else {\n      return () => [];\n    }\n  })(opts.allowMethods);\n  return async function cors2(c, next) {\n    function set(key, value) {\n      c.res.headers.set(key, value);\n    }\n    const allowOrigin = await findAllowOrigin(c.req.header(\"origin\") || \"\", c);\n    if (allowOrigin) {\n      set(\"Access-Control-Allow-Origin\", allowOrigin);\n    }\n    if (opts.origin !== \"*\") {\n      const existingVary = c.req.header(\"Vary\");\n      if (existingVary) {\n        set(\"Vary\", existingVary);\n      } else {\n        set(\"Vary\", \"Origin\");\n      }\n    }\n    if (opts.credentials) {\n      set(\"Access-Control-Allow-Credentials\", \"true\");\n    }\n    if (opts.exposeHeaders?.length) {\n      set(\"Access-Control-Expose-Headers\", opts.exposeHeaders.join(\",\"));\n    }\n    if (c.req.method === \"OPTIONS\") {\n      if (opts.maxAge != null) {\n        set(\"Access-Control-Max-Age\", opts.maxAge.toString());\n      }\n      const allowMethods = await findAllowMethods(c.req.header(\"origin\") || \"\", c);\n      if (allowMethods.length) {\n        set(\"Access-Control-Allow-Methods\", allowMethods.join(\",\"));\n      }\n      let headers = opts.allowHeaders;\n      if (!headers?.length) {\n        const requestHeaders = c.req.header(\"Access-Control-Request-Headers\");\n        if (requestHeaders) {\n          headers = requestHeaders.split(/\\s*,\\s*/);\n        }\n      }\n      if (headers?.length) {\n        set(\"Access-Control-Allow-Headers\", headers.join(\",\"));\n        c.res.headers.append(\"Vary\", \"Access-Control-Request-Headers\");\n      }\n      c.res.headers.delete(\"Content-Length\");\n      c.res.headers.delete(\"Content-Type\");\n      return new Response(null, {\n        headers: c.res.headers,\n        status: 204,\n        statusText: \"No Content\"\n      });\n    }\n    await next();\n  };\n};\nexport {\n  cors\n};\n", "// src/middleware/logger/index.ts\nimport { getColorEnabledAsync } from \"../../utils/color.js\";\nvar humanize = (times) => {\n  const [delimiter, separator] = [\",\", \".\"];\n  const orderTimes = times.map((v) => v.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1\" + delimiter));\n  return orderTimes.join(separator);\n};\nvar time = (start) => {\n  const delta = Date.now() - start;\n  return humanize([delta < 1e3 ? delta + \"ms\" : Math.round(delta / 1e3) + \"s\"]);\n};\nvar colorStatus = async (status) => {\n  const colorEnabled = await getColorEnabledAsync();\n  if (colorEnabled) {\n    switch (status / 100 | 0) {\n      case 5:\n        return `\\x1B[31m${status}\\x1B[0m`;\n      case 4:\n        return `\\x1B[33m${status}\\x1B[0m`;\n      case 3:\n        return `\\x1B[36m${status}\\x1B[0m`;\n      case 2:\n        return `\\x1B[32m${status}\\x1B[0m`;\n    }\n  }\n  return `${status}`;\n};\nasync function log(fn, prefix, method, path, status = 0, elapsed) {\n  const out = prefix === \"<--\" /* Incoming */ ? `${prefix} ${method} ${path}` : `${prefix} ${method} ${path} ${await colorStatus(status)} ${elapsed}`;\n  fn(out);\n}\nvar logger = (fn = console.log) => {\n  return async function logger2(c, next) {\n    const { method, url } = c.req;\n    const path = url.slice(url.indexOf(\"/\", 8));\n    await log(fn, \"<--\" /* Incoming */, method, path);\n    const start = Date.now();\n    await next();\n    await log(fn, \"-->\" /* Outgoing */, method, path, c.res.status, time(start));\n  };\n};\nexport {\n  logger\n};\n", "// src/utils/color.ts\nfunction getColorEnabled() {\n  const { process, Deno } = globalThis;\n  const isNoColor = typeof Deno?.noColor === \"boolean\" ? Deno.noColor : process !== void 0 ? \"NO_COLOR\" in process?.env : false;\n  return !isNoColor;\n}\nasync function getColorEnabledAsync() {\n  const { navigator } = globalThis;\n  const cfWorkers = \"cloudflare:workers\";\n  const isNoColor = navigator !== void 0 && navigator.userAgent === \"Cloudflare-Workers\" ? await (async () => {\n    try {\n      return \"NO_COLOR\" in ((await import(cfWorkers)).env ?? {});\n    } catch {\n      return false;\n    }\n  })() : !getColorEnabled();\n  return !isNoColor;\n}\nexport {\n  getColorEnabled,\n  getColorEnabledAsync\n};\n", "import { createMiddleware } from \"hono/factory\";\nimport { decode, verify } from \"hono/jwt\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { JWTPayload } from \"./types\";\n\n// JWKS cache to avoid fetching keys on every request\nlet jwksCache: { keys: any[]; expires: number } | null = null;\nconst JWKS_URL = \"https://token.sesamy.dev/.well-known/jwks.json\";\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\nasync function getJWKS(): Promise<any[]> {\n  // Return cached keys if still valid\n  if (jwksCache && Date.now() < jwksCache.expires) {\n    return jwksCache.keys;\n  }\n\n  try {\n    const response = await fetch(JWKS_URL);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch JWKS: ${response.status}`);\n    }\n\n    const jwks = (await response.json()) as { keys?: any[] };\n    const keys = jwks.keys || [];\n\n    // Cache the keys\n    jwksCache = {\n      keys,\n      expires: Date.now() + CACHE_DURATION,\n    };\n\n    return keys;\n  } catch (error) {\n    console.error(\"Error fetching JWKS:\", error);\n    throw new Error(\"Unable to fetch JWT verification keys\");\n  }\n}\n\nasync function getPublicKey(kid: string): Promise<string> {\n  const keys = await getJWKS();\n  const key = keys.find((k) => k.kid === kid);\n\n  if (!key) {\n    throw new Error(`Key with kid ${kid} not found in JWKS`);\n  }\n\n  // Convert JWK to PEM format for verification\n  // For RSA keys (most common)\n  if (key.kty === \"RSA\") {\n    // For simplicity, we'll construct a basic PEM\n    // In production, you might want to use a proper JWK to PEM converter\n    return await jwkToPem(key);\n  }\n\n  throw new Error(`Unsupported key type: ${key.kty}`);\n}\n\nasync function jwkToPem(jwk: any): Promise<string> {\n  // For Cloudflare Workers, we'll use the Web Crypto API\n  try {\n    const keyData = {\n      kty: jwk.kty,\n      n: jwk.n,\n      e: jwk.e,\n      alg: jwk.alg,\n      use: jwk.use,\n    };\n\n    // Import the key using Web Crypto API\n    const cryptoKey = await crypto.subtle.importKey(\n      \"jwk\",\n      keyData,\n      {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: \"SHA-256\",\n      },\n      true,\n      [\"verify\"]\n    );\n\n    // Export as SPKI format and convert to PEM\n    const exported = (await crypto.subtle.exportKey(\n      \"spki\",\n      cryptoKey\n    )) as ArrayBuffer;\n    const b64 = btoa(String.fromCharCode(...new Uint8Array(exported)));\n    const pem = `-----BEGIN PUBLIC KEY-----\\n${b64\n      .match(/.{1,64}/g)\n      ?.join(\"\\n\")}\\n-----END PUBLIC KEY-----`;\n\n    return pem;\n  } catch (error) {\n    console.error(\"Error converting JWK to PEM:\", error);\n    throw new Error(\"Failed to convert JWK to PEM format\");\n  }\n}\n\n/**\n * Basic JWT verification middleware - only validates JWT token\n * Used for endpoints that only need a valid user token (like organizations)\n */\nexport const jwtMiddleware = createMiddleware(async (c, next) => {\n  console.log(\"jwtMiddleware: Starting authentication for path:\", c.req.path);\n  const authHeader = c.req.header(\"Authorization\");\n  console.log(\n    \"jwtMiddleware: Authorization header:\",\n    authHeader ? \"Present\" : \"Missing\"\n  );\n\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    console.log(\"jwtMiddleware: Missing or invalid authorization header\");\n    const problem = {\n      type: \"unauthorized\",\n      title: \"Unauthorized\",\n      status: 401,\n      detail: \"Missing or invalid authorization header\",\n      instance: c.req.path,\n    };\n    throw new HTTPException(401, { message: JSON.stringify(problem) });\n  }\n\n  const token = authHeader.substring(7); // Remove \"Bearer \" prefix\n  console.log(\"jwtMiddleware: Token extracted, length:\", token.length);\n\n  try {\n    // First, decode the token to get the header (including kid)\n    const { header } = decode(token);\n    console.log(\"jwtMiddleware: Token decoded, kid:\", header.kid);\n\n    if (!header.kid) {\n      throw new Error(\"Token missing key ID (kid)\");\n    }\n\n    // Get the public key for verification\n    const publicKey = await getPublicKey(header.kid);\n    console.log(\"jwtMiddleware: Public key retrieved\");\n\n    // Verify the token\n    const payload = await verify(token, publicKey, header.alg || \"RS256\");\n    console.log(\n      \"jwtMiddleware: Token verified successfully, sub:\",\n      payload.sub\n    );\n\n    // Set the payload in context for use by route handlers\n    c.set(\"jwtPayload\", payload);\n\n    await next();\n  } catch (error: any) {\n    console.error(\"jwtMiddleware: JWT verification failed:\", error);\n    const problem = {\n      type: \"unauthorized\",\n      title: \"Unauthorized\",\n      status: 401,\n      detail: \"Invalid or expired token\",\n      instance: c.req.path,\n    };\n    throw new HTTPException(401, { message: JSON.stringify(problem) });\n  }\n});\n\n/**\n * Full authentication middleware - validates JWT + requires organization context\n * Used for endpoints that need organization-scoped access\n */\nexport const authMiddleware = createMiddleware(async (c, next) => {\n  // First verify the JWT\n  await jwtMiddleware(c, async () => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    // Check for organization context\n    if (!payload.org_id) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Organization context required. Please select an organization.\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    await next();\n  });\n});\n\nexport const requireScopes = (requiredScopes: string[]) => {\n  return createMiddleware(async (c, next) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    if (!payload) {\n      const problem = {\n        type: \"unauthorized\",\n        title: \"Unauthorized\",\n        status: 401,\n        detail: \"Missing or invalid authentication token\",\n        instance: c.req.path,\n      };\n\n      throw new HTTPException(401, {\n        message: JSON.stringify(problem),\n      });\n    }\n\n    // Extract scopes from either 'scope' (string) or 'scopes' (array) field\n    let userScopes: string[] = [];\n    if (payload.scope && typeof payload.scope === \"string\") {\n      // OAuth2 standard: space-separated string\n      userScopes = payload.scope.split(\" \").filter((s) => s.length > 0);\n    } else if (payload.scopes && Array.isArray(payload.scopes)) {\n      // Legacy format: array of strings\n      userScopes = payload.scopes;\n    }\n\n    const hasRequiredScope = requiredScopes.some((scope) =>\n      userScopes.includes(scope)\n    );\n\n    if (!hasRequiredScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: `Required scopes: ${requiredScopes.join(\n          \", \"\n        )}. User scopes: ${userScopes.join(\", \")}`,\n        instance: c.req.path,\n      };\n\n      throw new HTTPException(403, {\n        message: JSON.stringify(problem),\n      });\n    }\n\n    await next();\n  });\n};\n\n/**\n * Middleware to require specific permissions from the JWT token\n */\nexport const requirePermissions = (requiredPermissions: string[]) => {\n  return createMiddleware(async (c, next) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    if (!payload) {\n      const problem = {\n        type: \"unauthorized\",\n        title: \"Unauthorized\",\n        status: 401,\n        detail: \"Missing or invalid authentication token\",\n        instance: c.req.path,\n      };\n\n      throw new HTTPException(401, {\n        message: JSON.stringify(problem),\n      });\n    }\n\n    const userPermissions = payload.permissions || [];\n    const hasRequiredPermission = requiredPermissions.some((permission) =>\n      userPermissions.includes(permission)\n    );\n\n    if (!hasRequiredPermission) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: `Required permissions: ${requiredPermissions.join(\n          \", \"\n        )}. User permissions: ${userPermissions.join(\", \")}`,\n        instance: c.req.path,\n      };\n\n      throw new HTTPException(403, {\n        message: JSON.stringify(problem),\n      });\n    }\n\n    await next();\n  });\n};\n\n/**\n * Helper function to check if user has required permissions (for inline use)\n */\nexport const hasPermissions = (\n  payload: JWTPayload,\n  requiredPermissions: string[]\n): boolean => {\n  const userPermissions = payload.permissions || [];\n  return requiredPermissions.some((permission) =>\n    userPermissions.includes(permission)\n  );\n};\n\n/**\n * Middleware to require a specific organization context\n */\nexport const requireOrganization = () => {\n  return createMiddleware(async (c, next) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    if (!payload) {\n      const problem = {\n        type: \"unauthorized\",\n        title: \"Unauthorized\",\n        status: 401,\n        detail: \"Missing or invalid authentication token\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(401, { message: JSON.stringify(problem) });\n    }\n\n    if (!payload.org_id) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Organization context required. Please select an organization.\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    await next();\n  });\n};\n\n/**\n * Helper function to check if user has required scopes (for inline use)\n */\nexport const hasScopes = (\n  payload: JWTPayload,\n  requiredScopes: string[]\n): boolean => {\n  let userScopes: string[] = [];\n  if (payload.scope && typeof payload.scope === \"string\") {\n    userScopes = payload.scope.split(\" \").filter((s) => s.length > 0);\n  } else if (payload.scopes && Array.isArray(payload.scopes)) {\n    userScopes = payload.scopes;\n  }\n\n  return requiredScopes.some((scope) => userScopes.includes(scope));\n};\n\n/**\n * Helper function to get organization ID from JWT payload\n */\nexport const getOrganizationId = (payload: JWTPayload): string | null => {\n  return payload.org_id || null;\n};\n", "// src/helper/factory/index.ts\nimport { Hono } from \"../../hono.js\";\nvar Factory = class {\n  initApp;\n  #defaultAppOptions;\n  constructor(init) {\n    this.initApp = init?.initApp;\n    this.#defaultAppOptions = init?.defaultAppOptions;\n  }\n  createApp = (options) => {\n    const app = new Hono(\n      options && this.#defaultAppOptions ? { ...this.#defaultAppOptions, ...options } : options ?? this.#defaultAppOptions\n    );\n    if (this.initApp) {\n      this.initApp(app);\n    }\n    return app;\n  };\n  createMiddleware = (middleware) => middleware;\n  createHandlers = (...handlers) => {\n    return handlers.filter((handler) => handler !== void 0);\n  };\n};\nvar createFactory = (init) => new Factory(init);\nvar createMiddleware = (middleware) => middleware;\nexport {\n  Factory,\n  createFactory,\n  createMiddleware\n};\n", "// src/middleware/jwt/index.ts\nimport { jwt, verifyWithJwks, verify, decode, sign } from \"./jwt.js\";\nexport {\n  decode,\n  jwt,\n  sign,\n  verify,\n  verifyWithJwks\n};\n", "// src/middleware/jwt/jwt.ts\nimport { getCookie, getSignedCookie } from \"../../helper/cookie/index.js\";\nimport { HTTPException } from \"../../http-exception.js\";\nimport { Jwt } from \"../../utils/jwt/index.js\";\nimport \"../../context.js\";\nvar jwt = (options) => {\n  const verifyOpts = options.verification || {};\n  if (!options || !options.secret) {\n    throw new Error('JWT auth middleware requires options for \"secret\"');\n  }\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  return async function jwt2(ctx, next) {\n    const headerName = options.headerName || \"Authorization\";\n    const credentials = ctx.req.raw.headers.get(headerName);\n    let token;\n    if (credentials) {\n      const parts = credentials.split(/\\s+/);\n      if (parts.length !== 2) {\n        const errDescription = \"invalid credentials structure\";\n        throw new HTTPException(401, {\n          message: errDescription,\n          res: unauthorizedResponse({\n            ctx,\n            error: \"invalid_request\",\n            errDescription\n          })\n        });\n      } else {\n        token = parts[1];\n      }\n    } else if (options.cookie) {\n      if (typeof options.cookie == \"string\") {\n        token = getCookie(ctx, options.cookie);\n      } else if (options.cookie.secret) {\n        if (options.cookie.prefixOptions) {\n          token = await getSignedCookie(\n            ctx,\n            options.cookie.secret,\n            options.cookie.key,\n            options.cookie.prefixOptions\n          );\n        } else {\n          token = await getSignedCookie(ctx, options.cookie.secret, options.cookie.key);\n        }\n      } else {\n        if (options.cookie.prefixOptions) {\n          token = getCookie(ctx, options.cookie.key, options.cookie.prefixOptions);\n        } else {\n          token = getCookie(ctx, options.cookie.key);\n        }\n      }\n    }\n    if (!token) {\n      const errDescription = \"no authorization included in request\";\n      throw new HTTPException(401, {\n        message: errDescription,\n        res: unauthorizedResponse({\n          ctx,\n          error: \"invalid_request\",\n          errDescription\n        })\n      });\n    }\n    let payload;\n    let cause;\n    try {\n      payload = await Jwt.verify(token, options.secret, {\n        alg: options.alg,\n        ...verifyOpts\n      });\n    } catch (e) {\n      cause = e;\n    }\n    if (!payload) {\n      throw new HTTPException(401, {\n        message: \"Unauthorized\",\n        res: unauthorizedResponse({\n          ctx,\n          error: \"invalid_token\",\n          statusText: \"Unauthorized\",\n          errDescription: \"token verification failure\"\n        }),\n        cause\n      });\n    }\n    ctx.set(\"jwtPayload\", payload);\n    await next();\n  };\n};\nfunction unauthorizedResponse(opts) {\n  return new Response(\"Unauthorized\", {\n    status: 401,\n    statusText: opts.statusText,\n    headers: {\n      \"WWW-Authenticate\": `Bearer realm=\"${opts.ctx.req.url}\",error=\"${opts.error}\",error_description=\"${opts.errDescription}\"`\n    }\n  });\n}\nvar verifyWithJwks = Jwt.verifyWithJwks;\nvar verify = Jwt.verify;\nvar decode = Jwt.decode;\nvar sign = Jwt.sign;\nexport {\n  decode,\n  jwt,\n  sign,\n  verify,\n  verifyWithJwks\n};\n", "// src/utils/jwt/index.ts\nimport { decode, sign, verify, verifyWithJwks } from \"./jwt.js\";\nvar Jwt = { sign, verify, decode, verifyWithJwks };\nexport {\n  Jwt\n};\n", "// src/utils/jwt/jwt.ts\nimport { decodeBase64Url, encodeBase64Url } from \"../../utils/encode.js\";\nimport { AlgorithmTypes } from \"./jwa.js\";\nimport { signing, verifying } from \"./jws.js\";\nimport {\n  JwtHeaderInvalid,\n  JwtHeaderRequiresKid,\n  JwtTokenExpired,\n  JwtTokenInvalid,\n  JwtTokenIssuedAt,\n  JwtTokenIssuer,\n  JwtTokenNotBefore,\n  JwtTokenSignatureMismatched\n} from \"./types.js\";\nimport { utf8Decoder, utf8Encoder } from \"./utf8.js\";\nvar encodeJwtPart = (part) => encodeBase64Url(utf8Encoder.encode(JSON.stringify(part)).buffer).replace(/=/g, \"\");\nvar encodeSignaturePart = (buf) => encodeBase64Url(buf).replace(/=/g, \"\");\nvar decodeJwtPart = (part) => JSON.parse(utf8Decoder.decode(decodeBase64Url(part)));\nfunction isTokenHeader(obj) {\n  if (typeof obj === \"object\" && obj !== null) {\n    const objWithAlg = obj;\n    return \"alg\" in objWithAlg && Object.values(AlgorithmTypes).includes(objWithAlg.alg) && (!(\"typ\" in objWithAlg) || objWithAlg.typ === \"JWT\");\n  }\n  return false;\n}\nvar sign = async (payload, privateKey, alg = \"HS256\") => {\n  const encodedPayload = encodeJwtPart(payload);\n  let encodedHeader;\n  if (typeof privateKey === \"object\" && \"alg\" in privateKey) {\n    alg = privateKey.alg;\n    encodedHeader = encodeJwtPart({ alg, typ: \"JWT\", kid: privateKey.kid });\n  } else {\n    encodedHeader = encodeJwtPart({ alg, typ: \"JWT\" });\n  }\n  const partialToken = `${encodedHeader}.${encodedPayload}`;\n  const signaturePart = await signing(privateKey, alg, utf8Encoder.encode(partialToken));\n  const signature = encodeSignaturePart(signaturePart);\n  return `${partialToken}.${signature}`;\n};\nvar verify = async (token, publicKey, algOrOptions) => {\n  const optsIn = typeof algOrOptions === \"string\" ? { alg: algOrOptions } : algOrOptions || {};\n  const opts = {\n    alg: optsIn.alg ?? \"HS256\",\n    iss: optsIn.iss,\n    nbf: optsIn.nbf ?? true,\n    exp: optsIn.exp ?? true,\n    iat: optsIn.iat ?? true\n  };\n  const tokenParts = token.split(\".\");\n  if (tokenParts.length !== 3) {\n    throw new JwtTokenInvalid(token);\n  }\n  const { header, payload } = decode(token);\n  if (!isTokenHeader(header)) {\n    throw new JwtHeaderInvalid(header);\n  }\n  const now = Date.now() / 1e3 | 0;\n  if (opts.nbf && payload.nbf && payload.nbf > now) {\n    throw new JwtTokenNotBefore(token);\n  }\n  if (opts.exp && payload.exp && payload.exp <= now) {\n    throw new JwtTokenExpired(token);\n  }\n  if (opts.iat && payload.iat && now < payload.iat) {\n    throw new JwtTokenIssuedAt(now, payload.iat);\n  }\n  if (opts.iss) {\n    if (!payload.iss) {\n      throw new JwtTokenIssuer(opts.iss, null);\n    }\n    if (typeof opts.iss === \"string\" && payload.iss !== opts.iss) {\n      throw new JwtTokenIssuer(opts.iss, payload.iss);\n    }\n    if (opts.iss instanceof RegExp && !opts.iss.test(payload.iss)) {\n      throw new JwtTokenIssuer(opts.iss, payload.iss);\n    }\n  }\n  const headerPayload = token.substring(0, token.lastIndexOf(\".\"));\n  const verified = await verifying(\n    publicKey,\n    opts.alg,\n    decodeBase64Url(tokenParts[2]),\n    utf8Encoder.encode(headerPayload)\n  );\n  if (!verified) {\n    throw new JwtTokenSignatureMismatched(token);\n  }\n  return payload;\n};\nvar verifyWithJwks = async (token, options, init) => {\n  const verifyOpts = options.verification || {};\n  const header = decodeHeader(token);\n  if (!isTokenHeader(header)) {\n    throw new JwtHeaderInvalid(header);\n  }\n  if (!header.kid) {\n    throw new JwtHeaderRequiresKid(header);\n  }\n  if (options.jwks_uri) {\n    const response = await fetch(options.jwks_uri, init);\n    if (!response.ok) {\n      throw new Error(`failed to fetch JWKS from ${options.jwks_uri}`);\n    }\n    const data = await response.json();\n    if (!data.keys) {\n      throw new Error('invalid JWKS response. \"keys\" field is missing');\n    }\n    if (!Array.isArray(data.keys)) {\n      throw new Error('invalid JWKS response. \"keys\" field is not an array');\n    }\n    if (options.keys) {\n      options.keys.push(...data.keys);\n    } else {\n      options.keys = data.keys;\n    }\n  } else if (!options.keys) {\n    throw new Error('verifyWithJwks requires options for either \"keys\" or \"jwks_uri\" or both');\n  }\n  const matchingKey = options.keys.find((key) => key.kid === header.kid);\n  if (!matchingKey) {\n    throw new JwtTokenInvalid(token);\n  }\n  return await verify(token, matchingKey, {\n    alg: matchingKey.alg || header.alg,\n    ...verifyOpts\n  });\n};\nvar decode = (token) => {\n  try {\n    const [h, p] = token.split(\".\");\n    const header = decodeJwtPart(h);\n    const payload = decodeJwtPart(p);\n    return {\n      header,\n      payload\n    };\n  } catch {\n    throw new JwtTokenInvalid(token);\n  }\n};\nvar decodeHeader = (token) => {\n  try {\n    const [h] = token.split(\".\");\n    return decodeJwtPart(h);\n  } catch {\n    throw new JwtTokenInvalid(token);\n  }\n};\nexport {\n  decode,\n  decodeHeader,\n  isTokenHeader,\n  sign,\n  verify,\n  verifyWithJwks\n};\n", "// src/utils/encode.ts\nvar decodeBase64Url = (str) => {\n  return decodeBase64(str.replace(/_|-/g, (m) => ({ _: \"/\", \"-\": \"+\" })[m] ?? m));\n};\nvar encodeBase64Url = (buf) => encodeBase64(buf).replace(/\\/|\\+/g, (m) => ({ \"/\": \"_\", \"+\": \"-\" })[m] ?? m);\nvar encodeBase64 = (buf) => {\n  let binary = \"\";\n  const bytes = new Uint8Array(buf);\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n};\nvar decodeBase64 = (str) => {\n  const binary = atob(str);\n  const bytes = new Uint8Array(new ArrayBuffer(binary.length));\n  const half = binary.length / 2;\n  for (let i = 0, j = binary.length - 1; i <= half; i++, j--) {\n    bytes[i] = binary.charCodeAt(i);\n    bytes[j] = binary.charCodeAt(j);\n  }\n  return bytes;\n};\nexport {\n  decodeBase64,\n  decodeBase64Url,\n  encodeBase64,\n  encodeBase64Url\n};\n", "// src/utils/jwt/jwa.ts\nvar AlgorithmTypes = /* @__PURE__ */ ((AlgorithmTypes2) => {\n  AlgorithmTypes2[\"HS256\"] = \"HS256\";\n  AlgorithmTypes2[\"HS384\"] = \"HS384\";\n  AlgorithmTypes2[\"HS512\"] = \"HS512\";\n  AlgorithmTypes2[\"RS256\"] = \"RS256\";\n  AlgorithmTypes2[\"RS384\"] = \"RS384\";\n  AlgorithmTypes2[\"RS512\"] = \"RS512\";\n  AlgorithmTypes2[\"PS256\"] = \"PS256\";\n  AlgorithmTypes2[\"PS384\"] = \"PS384\";\n  AlgorithmTypes2[\"PS512\"] = \"PS512\";\n  AlgorithmTypes2[\"ES256\"] = \"ES256\";\n  AlgorithmTypes2[\"ES384\"] = \"ES384\";\n  AlgorithmTypes2[\"ES512\"] = \"ES512\";\n  AlgorithmTypes2[\"EdDSA\"] = \"EdDSA\";\n  return AlgorithmTypes2;\n})(AlgorithmTypes || {});\nexport {\n  AlgorithmTypes\n};\n", "// src/utils/jwt/jws.ts\nimport { getRuntimeKey } from \"../../helper/adapter/index.js\";\nimport { decodeBase64 } from \"../encode.js\";\nimport { CryptoKeyUsage, JwtAlgorithmNotImplemented } from \"./types.js\";\nimport { utf8Encoder } from \"./utf8.js\";\nasync function signing(privateKey, alg, data) {\n  const algorithm = getKeyAlgorithm(alg);\n  const cryptoKey = await importPrivateKey(privateKey, algorithm);\n  return await crypto.subtle.sign(algorithm, cryptoKey, data);\n}\nasync function verifying(publicKey, alg, signature, data) {\n  const algorithm = getKeyAlgorithm(alg);\n  const cryptoKey = await importPublicKey(publicKey, algorithm);\n  return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n}\nfunction pemToBinary(pem) {\n  return decodeBase64(pem.replace(/-+(BEGIN|END).*/g, \"\").replace(/\\s/g, \"\"));\n}\nasync function importPrivateKey(key, alg) {\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  if (isCryptoKey(key)) {\n    if (key.type !== \"private\" && key.type !== \"secret\") {\n      throw new Error(\n        `unexpected key type: CryptoKey.type is ${key.type}, expected private or secret`\n      );\n    }\n    return key;\n  }\n  const usages = [CryptoKeyUsage.Sign];\n  if (typeof key === \"object\") {\n    return await crypto.subtle.importKey(\"jwk\", key, alg, false, usages);\n  }\n  if (key.includes(\"PRIVATE\")) {\n    return await crypto.subtle.importKey(\"pkcs8\", pemToBinary(key), alg, false, usages);\n  }\n  return await crypto.subtle.importKey(\"raw\", utf8Encoder.encode(key), alg, false, usages);\n}\nasync function importPublicKey(key, alg) {\n  if (!crypto.subtle || !crypto.subtle.importKey) {\n    throw new Error(\"`crypto.subtle.importKey` is undefined. JWT auth middleware requires it.\");\n  }\n  if (isCryptoKey(key)) {\n    if (key.type === \"public\" || key.type === \"secret\") {\n      return key;\n    }\n    key = await exportPublicJwkFrom(key);\n  }\n  if (typeof key === \"string\" && key.includes(\"PRIVATE\")) {\n    const privateKey = await crypto.subtle.importKey(\"pkcs8\", pemToBinary(key), alg, true, [\n      CryptoKeyUsage.Sign\n    ]);\n    key = await exportPublicJwkFrom(privateKey);\n  }\n  const usages = [CryptoKeyUsage.Verify];\n  if (typeof key === \"object\") {\n    return await crypto.subtle.importKey(\"jwk\", key, alg, false, usages);\n  }\n  if (key.includes(\"PUBLIC\")) {\n    return await crypto.subtle.importKey(\"spki\", pemToBinary(key), alg, false, usages);\n  }\n  return await crypto.subtle.importKey(\"raw\", utf8Encoder.encode(key), alg, false, usages);\n}\nasync function exportPublicJwkFrom(privateKey) {\n  if (privateKey.type !== \"private\") {\n    throw new Error(`unexpected key type: ${privateKey.type}`);\n  }\n  if (!privateKey.extractable) {\n    throw new Error(\"unexpected private key is unextractable\");\n  }\n  const jwk = await crypto.subtle.exportKey(\"jwk\", privateKey);\n  const { kty } = jwk;\n  const { alg, e, n } = jwk;\n  const { crv, x, y } = jwk;\n  return { kty, alg, e, n, crv, x, y, key_ops: [CryptoKeyUsage.Verify] };\n}\nfunction getKeyAlgorithm(name) {\n  switch (name) {\n    case \"HS256\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-256\"\n        }\n      };\n    case \"HS384\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-384\"\n        }\n      };\n    case \"HS512\":\n      return {\n        name: \"HMAC\",\n        hash: {\n          name: \"SHA-512\"\n        }\n      };\n    case \"RS256\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-256\"\n        }\n      };\n    case \"RS384\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-384\"\n        }\n      };\n    case \"RS512\":\n      return {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-512\"\n        }\n      };\n    case \"PS256\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-256\"\n        },\n        saltLength: 32\n      };\n    case \"PS384\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-384\"\n        },\n        saltLength: 48\n      };\n    case \"PS512\":\n      return {\n        name: \"RSA-PSS\",\n        hash: {\n          name: \"SHA-512\"\n        },\n        saltLength: 64\n      };\n    case \"ES256\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-256\"\n        },\n        namedCurve: \"P-256\"\n      };\n    case \"ES384\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-384\"\n        },\n        namedCurve: \"P-384\"\n      };\n    case \"ES512\":\n      return {\n        name: \"ECDSA\",\n        hash: {\n          name: \"SHA-512\"\n        },\n        namedCurve: \"P-521\"\n      };\n    case \"EdDSA\":\n      return {\n        name: \"Ed25519\",\n        namedCurve: \"Ed25519\"\n      };\n    default:\n      throw new JwtAlgorithmNotImplemented(name);\n  }\n}\nfunction isCryptoKey(key) {\n  const runtime = getRuntimeKey();\n  if (runtime === \"node\" && !!crypto.webcrypto) {\n    return key instanceof crypto.webcrypto.CryptoKey;\n  }\n  return key instanceof CryptoKey;\n}\nexport {\n  signing,\n  verifying\n};\n", "// src/helper/adapter/index.ts\nvar env = (c, runtime) => {\n  const global = globalThis;\n  const globalEnv = global?.process?.env;\n  runtime ??= getRuntimeKey();\n  const runtimeEnvHandlers = {\n    bun: () => globalEnv,\n    node: () => globalEnv,\n    \"edge-light\": () => globalEnv,\n    deno: () => {\n      return Deno.env.toObject();\n    },\n    workerd: () => c.env,\n    fastly: () => ({}),\n    other: () => ({})\n  };\n  return runtimeEnvHandlers[runtime]();\n};\nvar knownUserAgents = {\n  deno: \"Deno\",\n  bun: \"Bun\",\n  workerd: \"Cloudflare-Workers\",\n  node: \"Node.js\"\n};\nvar getRuntimeKey = () => {\n  const global = globalThis;\n  const userAgentSupported = typeof navigator !== \"undefined\" && typeof navigator.userAgent === \"string\";\n  if (userAgentSupported) {\n    for (const [runtimeKey, userAgent] of Object.entries(knownUserAgents)) {\n      if (checkUserAgentEquals(userAgent)) {\n        return runtimeKey;\n      }\n    }\n  }\n  if (typeof global?.EdgeRuntime === \"string\") {\n    return \"edge-light\";\n  }\n  if (global?.fastly !== void 0) {\n    return \"fastly\";\n  }\n  if (global?.process?.release?.name === \"node\") {\n    return \"node\";\n  }\n  return \"other\";\n};\nvar checkUserAgentEquals = (platform) => {\n  const userAgent = navigator.userAgent;\n  return userAgent.startsWith(platform);\n};\nexport {\n  checkUserAgentEquals,\n  env,\n  getRuntimeKey,\n  knownUserAgents\n};\n", "// src/utils/jwt/types.ts\nvar JwtAlgorithmNotImplemented = class extends Error {\n  constructor(alg) {\n    super(`${alg} is not an implemented algorithm`);\n    this.name = \"JwtAlgorithmNotImplemented\";\n  }\n};\nvar JwtTokenInvalid = class extends Error {\n  constructor(token) {\n    super(`invalid JWT token: ${token}`);\n    this.name = \"JwtTokenInvalid\";\n  }\n};\nvar JwtTokenNotBefore = class extends Error {\n  constructor(token) {\n    super(`token (${token}) is being used before it's valid`);\n    this.name = \"JwtTokenNotBefore\";\n  }\n};\nvar JwtTokenExpired = class extends Error {\n  constructor(token) {\n    super(`token (${token}) expired`);\n    this.name = \"JwtTokenExpired\";\n  }\n};\nvar JwtTokenIssuedAt = class extends Error {\n  constructor(currentTimestamp, iat) {\n    super(\n      `Invalid \"iat\" claim, must be a valid number lower than \"${currentTimestamp}\" (iat: \"${iat}\")`\n    );\n    this.name = \"JwtTokenIssuedAt\";\n  }\n};\nvar JwtTokenIssuer = class extends Error {\n  constructor(expected, iss) {\n    super(`expected issuer \"${expected}\", got ${iss ? `\"${iss}\"` : \"none\"} `);\n    this.name = \"JwtTokenIssuer\";\n  }\n};\nvar JwtHeaderInvalid = class extends Error {\n  constructor(header) {\n    super(`jwt header is invalid: ${JSON.stringify(header)}`);\n    this.name = \"JwtHeaderInvalid\";\n  }\n};\nvar JwtHeaderRequiresKid = class extends Error {\n  constructor(header) {\n    super(`required \"kid\" in jwt header: ${JSON.stringify(header)}`);\n    this.name = \"JwtHeaderRequiresKid\";\n  }\n};\nvar JwtTokenSignatureMismatched = class extends Error {\n  constructor(token) {\n    super(`token(${token}) signature mismatched`);\n    this.name = \"JwtTokenSignatureMismatched\";\n  }\n};\nvar CryptoKeyUsage = /* @__PURE__ */ ((CryptoKeyUsage2) => {\n  CryptoKeyUsage2[\"Encrypt\"] = \"encrypt\";\n  CryptoKeyUsage2[\"Decrypt\"] = \"decrypt\";\n  CryptoKeyUsage2[\"Sign\"] = \"sign\";\n  CryptoKeyUsage2[\"Verify\"] = \"verify\";\n  CryptoKeyUsage2[\"DeriveKey\"] = \"deriveKey\";\n  CryptoKeyUsage2[\"DeriveBits\"] = \"deriveBits\";\n  CryptoKeyUsage2[\"WrapKey\"] = \"wrapKey\";\n  CryptoKeyUsage2[\"UnwrapKey\"] = \"unwrapKey\";\n  return CryptoKeyUsage2;\n})(CryptoKeyUsage || {});\nexport {\n  CryptoKeyUsage,\n  JwtAlgorithmNotImplemented,\n  JwtHeaderInvalid,\n  JwtHeaderRequiresKid,\n  JwtTokenExpired,\n  JwtTokenInvalid,\n  JwtTokenIssuedAt,\n  JwtTokenIssuer,\n  JwtTokenNotBefore,\n  JwtTokenSignatureMismatched\n};\n", "// src/utils/jwt/utf8.ts\nvar utf8Encoder = new TextEncoder();\nvar utf8Decoder = new TextDecoder();\nexport {\n  utf8Decoder,\n  utf8Encoder\n};\n", "import { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";\nimport { getDatabase, type Database } from \"../database/client\";\nimport { sql } from \"drizzle-orm\";\nimport type { D1Database } from \"@cloudflare/workers-types\";\n\nconst healthSchema = z.object({\n  status: z.enum([\"healthy\", \"unhealthy\"]),\n  timestamp: z.string().datetime(),\n  service: z.string(),\n  version: z.string(),\n});\n\n// Liveness probe\nconst livenessRoute = createRoute({\n  method: \"get\",\n  path: \"/healthz\",\n  tags: [\"health\"],\n  summary: \"Liveness probe\",\n  description: \"Check if the service is alive\",\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: healthSchema,\n        },\n      },\n      description: \"Service is alive\",\n    },\n  },\n});\n\n// Readiness probe\nconst readinessRoute = createRoute({\n  method: \"get\",\n  path: \"/readyz\",\n  tags: [\"health\"],\n  summary: \"Readiness probe\",\n  description: \"Check if the service is ready to serve requests\",\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: healthSchema,\n        },\n      },\n      description: \"Service is ready\",\n    },\n    503: {\n      content: {\n        \"application/json\": {\n          schema: healthSchema,\n        },\n      },\n      description: \"Service is not ready\",\n    },\n  },\n});\n\nexport function registerHealthRoutes(app: OpenAPIHono, database?: D1Database) {\n  const db = getDatabase(database);\n\n  // Liveness - always returns healthy if the process is running\n  app.openapi(livenessRoute, async (c) => {\n    return c.json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      service: \"podcast-service\",\n      version: \"1.0.0\",\n    });\n  });\n\n  // Readiness - checks database connection and other dependencies\n  app.openapi(readinessRoute, async (c) => {\n    try {\n      // Check database connection\n      await db.run(sql`SELECT 1`);\n\n      return c.json({\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        service: \"podcast-service\",\n        version: \"1.0.0\",\n      });\n    } catch (error) {\n      return c.json(\n        {\n          status: \"unhealthy\",\n          timestamp: new Date().toISOString(),\n          service: \"podcast-service\",\n          version: \"1.0.0\",\n        },\n        503\n      );\n    }\n  });\n}\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport {\n  CreateShowSchema,\n  UpdateShowSchema,\n  ShowSchema,\n  PaginationSchema,\n  ShowParamsSchema,\n  ImageUploadSchema,\n  ImportShowFromRSSSchema,\n  ImportShowResponseSchema,\n  RSSPreviewRequestSchema,\n  RSSPreviewResponseSchema,\n} from \"./schemas\";\nimport { ShowService } from \"./service\";\nimport { AudioService } from \"../audio/service\";\nimport { ImageService } from \"../images/service\";\nimport {\n  requireScopes,\n  hasPermissions,\n  hasScopes,\n  getOrganizationId,\n} from \"../auth/middleware\";\nimport { NotFoundError } from \"../common/errors\";\nimport { JWTPayload } from \"../auth/types\";\nimport { TaskService } from \"../tasks/service\";\nimport {\n  fetchAndParseRSS,\n  RSSParseError,\n  RSSValidationError,\n} from \"../workflows/import-show/rss-parser\";\n\n// Utility function to sign imageUrl in show data\nasync function signImageUrlInShow(show: any, audioService?: AudioService) {\n  if (!show.imageUrl || !show.imageUrl.startsWith(\"r2://\") || !audioService) {\n    return show;\n  }\n\n  try {\n    // Extract the R2 key from the r2:// URL\n    const r2Key = show.imageUrl.replace(\"r2://\", \"\");\n\n    // Generate a fresh pre-signed URL\n    const signedUrl = await audioService.generateSignedUrlFromKey(r2Key);\n\n    if (signedUrl) {\n      return {\n        ...show,\n        imageUrl: signedUrl,\n      };\n    }\n  } catch (error) {\n    console.warn(\"Failed to sign imageUrl for show:\", show.id, error);\n  }\n\n  return show;\n}\n\n// Get shows route\nconst getShowsRoute = createRoute({\n  method: \"get\",\n  path: \"/shows\",\n  tags: [\"shows\"],\n  summary: \"Get all shows\",\n  description: \"Get a paginated list of podcast shows\",\n  request: {\n    query: PaginationSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: ShowSchema.array(),\n        },\n      },\n      description: \"List of shows\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Get show by ID route\nconst getShowRoute = createRoute({\n  method: \"get\",\n  path: \"/shows/{show_id}\",\n  tags: [\"shows\"],\n  summary: \"Get show by ID\",\n  description: \"Get a specific podcast show by its ID\",\n  request: {\n    params: ShowParamsSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: ShowSchema,\n        },\n      },\n      description: \"Show details\",\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Create show route\nconst createShowRoute = createRoute({\n  method: \"post\",\n  path: \"/shows\",\n  tags: [\"shows\"],\n  summary: \"Create a new show\",\n  description: \"Create a new podcast show\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateShowSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: ShowSchema,\n        },\n      },\n      description: \"Created show\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Import show from RSS route\nconst importShowFromRSSRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/import\",\n  tags: [\"shows\"],\n  summary: \"Import show from RSS\",\n  description: \"Import a podcast show and its episodes from an RSS feed URL\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: ImportShowFromRSSSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    202: {\n      content: {\n        \"application/json\": {\n          schema: ImportShowResponseSchema,\n        },\n      },\n      description: \"Import task created successfully\",\n    },\n    400: {\n      description: \"Invalid RSS URL or parsing error\",\n    },\n    500: {\n      description: \"Internal server error\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// RSS preview route\nconst rssPreviewRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/preview-rss\",\n  tags: [\"shows\"],\n  summary: \"Preview RSS feed\",\n  description:\n    \"Parse and preview an RSS feed without importing it. Returns the parsed show and episode data in JSON format with any validation errors.\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: RSSPreviewRequestSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: RSSPreviewResponseSchema,\n        },\n      },\n      description:\n        \"RSS feed parsed successfully (may include validation errors)\",\n    },\n    400: {\n      description: \"Invalid request or RSS URL format\",\n    },\n    500: {\n      description: \"Internal server error\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Update show route\nconst updateShowRoute = createRoute({\n  method: \"patch\",\n  path: \"/shows/{show_id}\",\n  tags: [\"shows\"],\n  summary: \"Update a show\",\n  description: \"Update an existing podcast show\",\n  request: {\n    params: ShowParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateShowSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: ShowSchema,\n        },\n      },\n      description: \"Updated show\",\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Delete show route\nconst deleteShowRoute = createRoute({\n  method: \"delete\",\n  path: \"/shows/{show_id}\",\n  tags: [\"shows\"],\n  summary: \"Delete a show\",\n  description: \"Delete an existing podcast show\",\n  request: {\n    params: ShowParamsSchema,\n  },\n  responses: {\n    204: {\n      description: \"Show deleted successfully\",\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Upload show image route\nconst uploadShowImageRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/{show_id}/image\",\n  tags: [\"shows\"],\n  summary: \"Upload show image\",\n  description: \"Upload an image file for a show\",\n  request: {\n    params: ShowParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: z.object({\n            image: z.any().openapi({\n              type: \"string\",\n              format: \"binary\",\n              description: \"Image file to upload\",\n            }),\n          }),\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: ImageUploadSchema,\n        },\n      },\n      description: \"Image uploaded successfully\",\n    },\n    400: {\n      description: \"Invalid file or request\",\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nexport function registerShowRoutes(\n  app: OpenAPIHono,\n  showService: ShowService,\n  audioService?: AudioService,\n  imageService?: ImageService,\n  database?: D1Database,\n  importShowWorkflow?: Workflow\n) {\n  // Get all shows\n  app.openapi(getShowsRoute, async (c) => {\n    // Check auth - look for permissions first, then fall back to scopes\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read OR scopes: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const pagination = c.req.valid(\"query\");\n    const shows = await showService.getAllShows(pagination);\n\n    // Sign imageUrl in shows if they have r2:// URLs\n    const signedShows = await Promise.all(\n      shows.map((show) => signImageUrlInShow(show, audioService))\n    );\n\n    return c.json(signedShows);\n  });\n\n  // Get show by ID\n  app.openapi(getShowRoute, async (c) => {\n    // Check auth - look for permissions first, then fall back to scopes\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read OR scopes: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n    const show = await showService.getShowById(show_id);\n\n    if (!show) {\n      const problem = {\n        type: \"not_found\",\n        title: \"Not Found\",\n        status: 404,\n        detail: \"Show not found\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(404, { message: JSON.stringify(problem) });\n    }\n\n    // Sign imageUrl if it has r2:// URL\n    const signedShow = await signImageUrlInShow(show, audioService);\n\n    return c.json(signedShow);\n  });\n\n  // Create show\n  app.openapi(createShowRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    // Get organization ID from JWT\n    const organizationId = getOrganizationId(payload);\n    if (!organizationId) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Organization context required. Please select an organization.\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const showData = c.req.valid(\"json\");\n    const show = await showService.createShow(showData, organizationId);\n\n    // Sign imageUrl if it has r2:// URL\n    const signedShow = await signImageUrlInShow(show, audioService);\n\n    return c.json(signedShow, 201);\n  });\n\n  // Import show from RSS\n  app.openapi(importShowFromRSSRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const importData = c.req.valid(\"json\");\n\n    try {\n      // First validate the RSS feed by attempting to parse it\n      console.log(`Validating RSS feed: ${importData.rssUrl}`);\n\n      // Test fetch and parse the RSS to validate it immediately\n      await fetchAndParseRSS(importData.rssUrl);\n\n      // If validation succeeds, create the task and workflow\n      if (!database) {\n        const problem = {\n          type: \"internal_error\",\n          title: \"Internal Server Error\",\n          status: 500,\n          detail: \"Database not available\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(500, { message: JSON.stringify(problem) });\n      }\n\n      if (!importShowWorkflow) {\n        const problem = {\n          type: \"internal_error\",\n          title: \"Internal Server Error\",\n          status: 500,\n          detail: \"Import workflow not available\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(500, { message: JSON.stringify(problem) });\n      }\n\n      const taskService = new TaskService(\n        database,\n        undefined,\n        importShowWorkflow\n      );\n\n      // Create import task\n      const task = await taskService.createTask(\"import_show\" as any, {\n        rssUrl: importData.rssUrl,\n        maxEpisodes: importData.maxEpisodes || 100,\n        skipExistingEpisodes: importData.skipExistingEpisodes || false,\n      });\n\n      console.log(\n        `Created import task ${task.id} for RSS: ${importData.rssUrl}`\n      );\n\n      return c.json(\n        {\n          taskId: task.id.toString(),\n          workflowId: task.workflowId || \"pending\",\n          message: `RSS import task created successfully. Task ID: ${task.id}`,\n        },\n        202\n      );\n    } catch (error) {\n      console.error(\"Import show from RSS failed:\", error);\n\n      if (error instanceof RSSParseError) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"RSS Validation Error\",\n          status: 400,\n          detail: `RSS parsing failed: ${error.message}`,\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      if (error instanceof RSSValidationError) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"RSS Validation Error\",\n          status: 400,\n          detail: `RSS validation failed: ${\n            error.message\n          }. Errors: ${error.validationErrors\n            .map((e) => e.message)\n            .join(\", \")}`,\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n\n      const problem = {\n        type: \"internal_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: `Failed to create import task: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`,\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n  });\n\n  // RSS preview\n  app.openapi(rssPreviewRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read or scope: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { rssUrl } = c.req.valid(\"json\");\n\n    try {\n      console.log(`Previewing RSS feed: ${rssUrl}`);\n\n      // Parse the RSS feed\n      const parsedRSS = await fetchAndParseRSS(rssUrl);\n\n      // Return successful response with parsed data\n      return c.json({\n        success: true,\n        data: {\n          title: parsedRSS.title,\n          description: parsedRSS.description,\n          imageUrl: parsedRSS.imageUrl || null,\n          language: parsedRSS.language,\n          categories: parsedRSS.categories,\n          author: parsedRSS.author,\n          totalEpisodes: parsedRSS.episodes.length,\n          episodes: parsedRSS.episodes,\n        },\n      });\n    } catch (error) {\n      console.error(\"RSS preview failed:\", error);\n\n      // For RSS parsing errors, return a structured error response\n      if (error instanceof RSSParseError) {\n        return c.json({\n          success: false,\n          errors: [\n            {\n              type: \"rss_parse_error\",\n              message: error.message,\n              details: error.cause ? { cause: error.cause.message } : undefined,\n            },\n          ],\n        });\n      }\n\n      if (error instanceof RSSValidationError) {\n        return c.json({\n          success: false,\n          errors: [\n            {\n              type: \"rss_validation_error\",\n              message: error.message,\n              details: { validationErrors: error.validationErrors },\n            },\n          ],\n        });\n      }\n\n      // For other errors, return a generic error response\n      return c.json({\n        success: false,\n        errors: [\n          {\n            type: \"unknown_error\",\n            message:\n              error instanceof Error ? error.message : \"Unknown error occurred\",\n          },\n        ],\n      });\n    }\n  });\n\n  // Update show\n  app.openapi(updateShowRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n    const updateData = c.req.valid(\"json\");\n\n    try {\n      const show = await showService.updateShow(show_id, updateData);\n\n      // Sign imageUrl if it has r2:// URL\n      const signedShow = await signImageUrlInShow(show, audioService);\n\n      return c.json(signedShow);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Show not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Delete show\n  app.openapi(deleteShowRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n\n    try {\n      await showService.deleteShow(show_id);\n      return c.body(null, 204);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Show not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Upload show image\n  app.openapi(uploadShowImageRoute, async (c) => {\n    // Check authorization\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    if (!imageService) {\n      const problem = {\n        type: \"internal_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: \"Image service not available\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n\n    try {\n      const formData = await c.req.formData();\n      const imageFile = formData.get(\"image\") as File | null;\n\n      if (!imageFile) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"Bad Request\",\n          status: 400,\n          detail: \"Image file is required\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      const imageUpload = await imageService.uploadShowImage(\n        show_id,\n        imageFile\n      );\n      return c.json(imageUpload);\n    } catch (error: any) {\n      console.error(\"[ShowRoutes] Image upload error:\", {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        cause: error.cause,\n        errorString: String(error),\n        errorType: typeof error,\n      });\n\n      if (error.message?.includes(\"not found\")) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Show not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      if (error.message?.includes(\"File must be an image\")) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"Bad Request\",\n          status: 400,\n          detail: \"File must be an image\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      if (\n        error.message?.includes(\"R2 bucket\") ||\n        error.message?.includes(\"storage service\")\n      ) {\n        const problem = {\n          type: \"internal_error\",\n          title: \"Internal Server Error\",\n          status: 500,\n          detail: \"Image storage service is temporarily unavailable\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(500, { message: JSON.stringify(problem) });\n      }\n\n      if (error.message?.includes(\"Database error\")) {\n        const problem = {\n          type: \"internal_error\",\n          title: \"Internal Server Error\",\n          status: 500,\n          detail: \"Database error occurred\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(500, { message: JSON.stringify(problem) });\n      }\n\n      // For any other unexpected errors, log details and return generic error with more context\n      const problem = {\n        type: \"internal_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: `An unexpected error occurred while uploading the image: ${\n          error.message || \"Unknown error\"\n        }`,\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n  });\n}\n", "import { z } from \"zod\";\n\n// Request schemas\nexport const CreateShowSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(255, \"Title too long\"),\n  description: z\n    .string()\n    .min(1, \"Description is required\")\n    .max(2000, \"Description too long\"),\n  imageUrl: z.nullable(z.string().url()).optional(),\n  language: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n  author: z.string().optional(),\n});\n\nexport const UpdateShowSchema = z.object({\n  title: z.string().min(1).max(255).optional(),\n  description: z.string().min(1).max(2000).optional(),\n  imageUrl: z.nullable(z.string().url()).optional(),\n  language: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n  author: z.string().optional(),\n});\n\n// Response schemas\nexport const ShowSchema = z.object({\n  id: z.string().uuid(),\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().nullable(),\n  language: z.string().nullable(),\n  categories: z.array(z.string()).nullable(),\n  author: z.string().nullable(),\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\n// Pagination\nexport const PaginationSchema = z.object({\n  limit: z\n    .string()\n    .optional()\n    .transform((val) => Math.min(parseInt(val || \"10\"), 100))\n    .pipe(z.number().min(1).max(100)),\n  offset: z\n    .string()\n    .optional()\n    .transform((val) => parseInt(val || \"0\"))\n    .pipe(z.number().min(0)),\n});\n\n// Path parameters\nexport const ShowParamsSchema = z.object({\n  show_id: z.string().uuid(),\n});\n\n// Import show from RSS schema\nexport const ImportShowFromRSSSchema = z.object({\n  rssUrl: z.string().url(\"Invalid RSS URL\"),\n  maxEpisodes: z.number().int().positive().optional().default(100),\n  skipExistingEpisodes: z.boolean().optional().default(false),\n});\n\n// Import show response schema\nexport const ImportShowResponseSchema = z.object({\n  taskId: z.string(),\n  message: z.string(),\n  workflowId: z.string(),\n});\n\n// RSS preview request schema\nexport const RSSPreviewRequestSchema = z.object({\n  rssUrl: z.string().url(\"Invalid RSS URL\"),\n});\n\n// RSS preview response schema\nexport const RSSPreviewResponseSchema = z.object({\n  success: z.boolean(),\n  data: z\n    .object({\n      title: z.string(),\n      description: z.string(),\n      imageUrl: z.string().nullable().optional(),\n      language: z.string().optional(),\n      categories: z.array(z.string()).optional(),\n      author: z.string().optional(),\n      totalEpisodes: z.number().int().nonnegative(),\n      episodes: z.array(\n        z.object({\n          title: z.string(),\n          description: z.string(),\n          audioUrl: z.string().url(),\n          imageUrl: z.string().url().nullable().optional(),\n          publishedAt: z.string().datetime().nullable().optional(),\n          duration: z.number().positive().nullable().optional(),\n          episodeNumber: z.number().int().positive().nullable().optional(),\n          seasonNumber: z.number().int().positive().nullable().optional(),\n        })\n      ),\n    })\n    .optional(),\n  errors: z\n    .array(\n      z.object({\n        type: z.string(),\n        message: z.string(),\n        details: z.any().optional(),\n      })\n    )\n    .optional(),\n});\n\n// Image upload response schema\nexport const ImageUploadSchema = z.object({\n  id: z.string().uuid(),\n  showId: z.string().uuid().nullable(),\n  episodeId: z.string().uuid().nullable(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  mimeType: z.string(),\n  url: z.string(),\n  uploadedAt: z.string().datetime(),\n});\n\n// Types\nexport type CreateShow = z.infer<typeof CreateShowSchema>;\nexport type UpdateShow = z.infer<typeof UpdateShowSchema>;\nexport type ImageUpload = z.infer<typeof ImageUploadSchema>;\nexport type Show = z.infer<typeof ShowSchema>;\nexport type ShowParams = z.infer<typeof ShowParamsSchema>;\nexport type Pagination = z.infer<typeof PaginationSchema>;\n", "import { z } from \"zod\";\nimport type { RSSShow, RSSEpisode } from \"./types\";\n\n// Basic RSS parsing error types\nexport class RSSParseError extends Error {\n  constructor(message: string, public cause?: Error) {\n    super(message);\n    this.name = \"RSSParseError\";\n  }\n}\n\nexport class RSSValidationError extends Error {\n  constructor(message: string, public validationErrors: z.ZodIssue[]) {\n    super(message);\n    this.name = \"RSSValidationError\";\n  }\n}\n\n// Helper functions for XML parsing using regex\nfunction extractTextContent(xml: string, tagName: string, flags = \"i\"): string {\n  const regex = new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)</${tagName}>`, flags);\n  const match = xml.match(regex);\n  return match ? match[1].trim().replace(/<!\\[CDATA\\[(.*?)\\]\\]>/g, \"$1\") : \"\";\n}\n\nfunction extractAttribute(\n  xml: string,\n  tagName: string,\n  attributeName: string\n): string {\n  const regex = new RegExp(\n    `<${tagName}[^>]*${attributeName}=[\"']([^\"']*?)[\"'][^>]*>`,\n    \"i\"\n  );\n  const match = xml.match(regex);\n  return match ? match[1] : \"\";\n}\n\nfunction extractMultipleTextContent(xml: string, tagName: string): string[] {\n  const regex = new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)</${tagName}>`, \"gi\");\n  const matches = xml.match(regex) || [];\n  return matches\n    .map((match) => {\n      const textMatch = match.match(\n        new RegExp(`<${tagName}[^>]*>([\\\\s\\\\S]*?)</${tagName}>`, \"i\")\n      );\n      return textMatch\n        ? textMatch[1].trim().replace(/<!\\[CDATA\\[(.*?)\\]\\]>/g, \"$1\")\n        : \"\";\n    })\n    .filter(Boolean);\n}\n\nfunction extractItems(xml: string): string[] {\n  const regex = /<item[^>]*>([\\s\\S]*?)<\\/item>/gi;\n  const matches = xml.match(regex) || [];\n  return matches;\n}\n\n// Parse duration from various formats (HH:MM:SS, MM:SS, seconds)\nfunction parseDuration(durationStr: string): number | null {\n  if (!durationStr) return null;\n\n  // If it's just a number (seconds)\n  const secondsOnly = parseInt(durationStr);\n  if (!isNaN(secondsOnly) && secondsOnly.toString() === durationStr) {\n    return secondsOnly;\n  }\n\n  // Parse HH:MM:SS or MM:SS format\n  const parts = durationStr\n    .split(\":\")\n    .map((p) => parseInt(p))\n    .reverse();\n  if (parts.length === 0 || parts.some((p) => isNaN(p))) return null;\n\n  let totalSeconds = 0;\n  if (parts[0] !== undefined) totalSeconds += parts[0]; // seconds\n  if (parts[1] !== undefined) totalSeconds += parts[1] * 60; // minutes\n  if (parts[2] !== undefined) totalSeconds += parts[2] * 3600; // hours\n\n  return totalSeconds;\n}\n\n// Parse RFC 2822 date format commonly used in RSS\nfunction parseRSSDate(dateStr: string): string | null {\n  if (!dateStr) return null;\n\n  try {\n    const date = new Date(dateStr);\n    if (isNaN(date.getTime())) return null;\n    return date.toISOString();\n  } catch {\n    return null;\n  }\n}\n\n// Extract episode number from title or other elements\nfunction extractEpisodeNumber(title: string, guid: string): number | null {\n  // Try to extract from title patterns like \"Episode 123\", \"#123\", \"Ep. 123\"\n  const patterns = [\n    /episode\\s*(\\d+)/i,\n    /#(\\d+)/,\n    /ep\\.?\\s*(\\d+)/i,\n    /^(\\d+)[\\.\\-\\s]/,\n  ];\n\n  for (const pattern of patterns) {\n    const match = title.match(pattern);\n    if (match && match[1]) {\n      const num = parseInt(match[1]);\n      if (!isNaN(num) && num >= 0) return num;\n    }\n  }\n\n  // Try to extract from GUID if it contains a number\n  const guidMatch = guid.match(/(\\d+)/);\n  if (guidMatch && guidMatch[1]) {\n    const num = parseInt(guidMatch[1]);\n    if (!isNaN(num) && num >= 0) return num;\n  }\n\n  return null;\n}\n\nexport async function fetchAndParseRSS(rssUrl: string): Promise<RSSShow> {\n  try {\n    // Fetch the RSS feed\n    const response = await fetch(rssUrl, {\n      headers: {\n        \"User-Agent\": \"Sesamy Podcast Importer/1.0\",\n        Accept: \"application/rss+xml, application/xml, text/xml, */*\",\n      },\n      // Add timeout\n      signal: AbortSignal.timeout(30000), // 30 second timeout\n    });\n\n    if (!response.ok) {\n      throw new RSSParseError(\n        `HTTP ${response.status}: ${response.statusText}`\n      );\n    }\n\n    const contentType = response.headers.get(\"content-type\") || \"\";\n    if (!contentType.includes(\"xml\") && !contentType.includes(\"rss\")) {\n      console.warn(\n        `Unexpected content-type: ${contentType}, attempting to parse anyway`\n      );\n    }\n\n    const xmlText = await response.text();\n\n    // Extract channel content\n    const channelMatch = xmlText.match(/<channel[^>]*>([\\s\\S]*?)<\\/channel>/i);\n    if (!channelMatch) {\n      throw new RSSParseError(\"No channel element found in RSS feed\");\n    }\n\n    const channelContent = channelMatch[1];\n\n    // Extract show information\n    const title = extractTextContent(channelContent, \"title\");\n    const description =\n      extractTextContent(channelContent, \"description\") ||\n      extractTextContent(channelContent, \"itunes:summary\") ||\n      extractTextContent(channelContent, \"summary\");\n\n    if (!title) {\n      throw new RSSParseError(\"RSS feed missing required title\");\n    }\n\n    if (!description) {\n      throw new RSSParseError(\"RSS feed missing required description\");\n    }\n\n    // Extract show image\n    let imageUrl: string | null = null;\n\n    // Try iTunes image first\n    imageUrl = extractAttribute(channelContent, \"itunes:image\", \"href\");\n\n    // Try standard image if iTunes not found\n    if (!imageUrl) {\n      const imageContent = extractTextContent(channelContent, \"image\");\n      if (imageContent) {\n        imageUrl = extractTextContent(imageContent, \"url\");\n      }\n    }\n\n    // Extract additional metadata\n    const language = extractTextContent(channelContent, \"language\");\n    const author =\n      extractTextContent(channelContent, \"itunes:author\") ||\n      extractTextContent(channelContent, \"managingEditor\") ||\n      extractTextContent(channelContent, \"author\");\n\n    // Extract categories\n    const categories = extractMultipleTextContent(channelContent, \"category\");\n    const itunesCategories = extractMultipleTextContent(\n      channelContent,\n      \"itunes:category\"\n    );\n    const allCategories = [...categories, ...itunesCategories].filter(Boolean);\n\n    // Extract episodes\n    const episodes: RSSEpisode[] = [];\n    const itemContents = extractItems(xmlText);\n\n    for (const itemContent of itemContents) {\n      const episodeTitle = extractTextContent(itemContent, \"title\");\n      const episodeDescription =\n        extractTextContent(itemContent, \"description\") ||\n        extractTextContent(itemContent, \"itunes:summary\") ||\n        extractTextContent(itemContent, \"content:encoded\") ||\n        extractTextContent(itemContent, \"summary\");\n\n      if (!episodeTitle || !episodeDescription) {\n        console.warn(\"Skipping episode with missing title or description\");\n        continue;\n      }\n\n      // Find audio enclosure\n      const enclosureMatch = itemContent.match(\n        /<enclosure[^>]*type=[\"'][^\"']*audio[^\"']*[\"'][^>]*>/i\n      );\n      if (!enclosureMatch) {\n        console.warn(\n          `Skipping episode \"${episodeTitle}\" - no audio enclosure found`\n        );\n        continue;\n      }\n\n      const audioUrl = extractAttribute(enclosureMatch[0], \"enclosure\", \"url\");\n      if (!audioUrl) {\n        console.warn(`Skipping episode \"${episodeTitle}\" - no audio URL found`);\n        continue;\n      }\n\n      // Extract episode metadata\n      const episodeImageUrl =\n        extractAttribute(itemContent, \"itunes:image\", \"href\") || null;\n\n      // Parse published date\n      const pubDate = extractTextContent(itemContent, \"pubDate\");\n      const publishedAt = parseRSSDate(pubDate);\n\n      // Parse duration\n      const durationStr = extractTextContent(itemContent, \"itunes:duration\");\n      let duration = parseDuration(durationStr);\n      // Ensure duration is positive or null (0 duration would fail validation)\n      if (duration !== null && duration <= 0) {\n        duration = null;\n      }\n\n      // Extract episode number - try iTunes episode first, then fallback to extraction from title/guid\n      const itunesEpisodeStr = extractTextContent(\n        itemContent,\n        \"itunes:episode\"\n      );\n      let episodeNumber: number | null = null;\n      if (itunesEpisodeStr) {\n        const parsed = parseInt(itunesEpisodeStr);\n        episodeNumber = !isNaN(parsed) && parsed >= 0 ? parsed : null;\n      } else {\n        // Fallback to extracting from title/guid\n        const guid = extractTextContent(itemContent, \"guid\");\n        episodeNumber = extractEpisodeNumber(episodeTitle, guid);\n      }\n\n      // Extract season number (if available)\n      const seasonStr = extractTextContent(itemContent, \"itunes:season\");\n      let seasonNumber: number | null = null;\n      if (seasonStr) {\n        const parsed = parseInt(seasonStr);\n        seasonNumber = !isNaN(parsed) && parsed >= 0 ? parsed : null;\n      }\n\n      // Extract additional metadata\n      const episodeType =\n        extractTextContent(itemContent, \"itunes:episodeType\") || null;\n      const author = extractTextContent(itemContent, \"itunes:author\") || null;\n      const subtitle =\n        extractTextContent(itemContent, \"itunes:subtitle\") || null;\n\n      // Extract explicit flag\n      const explicitStr = extractTextContent(itemContent, \"itunes:explicit\");\n      let explicit: boolean | null = null;\n      if (explicitStr) {\n        explicit =\n          explicitStr.toLowerCase() === \"true\" ||\n          explicitStr.toLowerCase() === \"yes\";\n      }\n\n      // Extract keywords from iTunes categories and keywords\n      const itunesCategories = extractMultipleTextContent(\n        itemContent,\n        \"itunes:category\"\n      );\n      const itunesKeywords = extractTextContent(itemContent, \"itunes:keywords\");\n      const keywords: string[] = [];\n\n      // Add categories as keywords\n      keywords.push(...itunesCategories);\n\n      // Add comma-separated keywords\n      if (itunesKeywords) {\n        keywords.push(\n          ...itunesKeywords\n            .split(\",\")\n            .map((k) => k.trim())\n            .filter(Boolean)\n        );\n      }\n\n      episodes.push({\n        title: episodeTitle,\n        description: episodeDescription,\n        audioUrl,\n        imageUrl: episodeImageUrl,\n        publishedAt,\n        duration,\n        episodeNumber,\n        seasonNumber,\n        episodeType,\n        author,\n        subtitle,\n        explicit,\n        keywords: keywords.length > 0 ? keywords : null,\n      });\n    }\n\n    if (episodes.length === 0) {\n      throw new RSSParseError(\"No valid episodes found in RSS feed\");\n    }\n\n    // Create the show object\n    const show: RSSShow = {\n      title,\n      description,\n      imageUrl,\n      language: language || undefined,\n      categories: allCategories.length > 0 ? allCategories : undefined,\n      author: author || undefined,\n      episodes: episodes.reverse(), // Reverse to get chronological order (oldest first)\n    };\n\n    // Validate the parsed data\n    try {\n      const { RSSShowSchema } = await import(\"./types\");\n      return RSSShowSchema.parse(show);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new RSSValidationError(\n          \"RSS feed validation failed\",\n          error.issues\n        );\n      }\n      throw error;\n    }\n  } catch (error) {\n    if (error instanceof RSSParseError || error instanceof RSSValidationError) {\n      throw error;\n    }\n\n    if (error instanceof Error) {\n      if (error.name === \"AbortError\") {\n        throw new RSSParseError(\"RSS feed fetch timeout\");\n      }\n      if (error.message.includes(\"fetch\")) {\n        throw new RSSParseError(`Failed to fetch RSS feed: ${error.message}`);\n      }\n    }\n\n    throw new RSSParseError(\n      `Unexpected error parsing RSS feed: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n}\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport {\n  EpisodeSchema,\n  CreateEpisodeSchema,\n  UpdateEpisodeSchema,\n  EpisodeParamsSchema,\n  ShowParamsSchema,\n  PaginationSchema,\n  ImageUploadSchema,\n} from \"./schemas\";\nimport { EpisodeService } from \"./service\";\nimport { AudioService } from \"../audio/service\";\nimport { ImageService } from \"../images/service\";\nimport { hasPermissions, hasScopes } from \"../auth/middleware\";\nimport { NotFoundError } from \"../common/errors\";\nimport { JWTPayload } from \"../auth/types\";\n\n// Utility function to sign imageUrl in episode data\nasync function signImageUrlInEpisode(\n  episode: any,\n  imageService?: ImageService\n) {\n  if (\n    !episode.imageUrl ||\n    !episode.imageUrl.startsWith(\"r2://\") ||\n    !imageService\n  ) {\n    return episode;\n  }\n\n  try {\n    // Extract the R2 key from the r2:// URL\n    const r2Key = episode.imageUrl.replace(\"r2://\", \"\");\n\n    // Generate a fresh pre-signed URL\n    const signedUrl = await imageService.signImageUrl(episode.imageUrl);\n\n    if (signedUrl) {\n      return {\n        ...episode,\n        imageUrl: signedUrl,\n      };\n    }\n  } catch (error) {\n    console.warn(\"Failed to sign imageUrl for episode:\", episode.id, error);\n  }\n\n  return episode;\n}\n\n// Utility function to sign audioUrl in episode data\nasync function signAudioUrlInEpisode(\n  episode: any,\n  audioService?: AudioService\n) {\n  if (\n    !episode.audioUrl ||\n    !episode.audioUrl.startsWith(\"r2://\") ||\n    !audioService\n  ) {\n    return episode;\n  }\n\n  try {\n    // Extract the R2 key from the r2:// URL\n    const r2Key = episode.audioUrl.replace(\"r2://\", \"\");\n\n    // Generate a fresh pre-signed URL\n    const signedUrl = await audioService.generateSignedUrlFromKey(r2Key);\n\n    if (signedUrl) {\n      return {\n        ...episode,\n        audioUrl: signedUrl,\n      };\n    }\n  } catch (error) {\n    console.warn(\"Failed to sign audioUrl for episode:\", episode.id, error);\n  }\n\n  return episode;\n}\n\n// Get episodes for a show\nconst getEpisodesRoute = createRoute({\n  method: \"get\",\n  path: \"/shows/{show_id}/episodes\",\n  tags: [\"episodes\"],\n  summary: \"Get episodes\",\n  description: \"Get all episodes for a show\",\n  request: {\n    params: ShowParamsSchema,\n    query: PaginationSchema,\n  },\n  responses: {\n    200: {\n      description: \"Episodes retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                id: { type: \"string\" },\n                showId: { type: \"string\" },\n                title: { type: \"string\" },\n                description: { type: \"string\" },\n                audioUrl: { type: \"string\", nullable: true },\n                transcriptUrl: { type: \"string\", nullable: true },\n                published: { type: \"boolean\", nullable: true },\n                publishedAt: { type: \"string\", nullable: true },\n                createdAt: { type: \"string\" },\n                updatedAt: { type: \"string\" },\n              },\n            },\n          },\n        },\n      },\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Get single episode\nconst getEpisodeRoute = createRoute({\n  method: \"get\",\n  path: \"/shows/{show_id}/episodes/{episode_id}\",\n  tags: [\"episodes\"],\n  summary: \"Get episode\",\n  description: \"Get a single episode by ID\",\n  request: {\n    params: EpisodeParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Episode retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: EpisodeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Create episode\nconst createEpisodeRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/{show_id}/episodes\",\n  tags: [\"episodes\"],\n  summary: \"Create episode\",\n  description: \"Create a new episode for a show\",\n  request: {\n    params: ShowParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateEpisodeSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      description: \"Episode created successfully\",\n      content: {\n        \"application/json\": {\n          schema: EpisodeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Update episode\nconst updateEpisodeRoute = createRoute({\n  method: \"patch\",\n  path: \"/shows/{show_id}/episodes/{episode_id}\",\n  tags: [\"episodes\"],\n  summary: \"Update episode\",\n  description: \"Update an existing episode\",\n  request: {\n    params: EpisodeParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateEpisodeSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      description: \"Episode updated successfully\",\n      content: {\n        \"application/json\": {\n          schema: EpisodeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Publish episode\nconst publishEpisodeRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/{show_id}/episodes/{episode_id}/publish\",\n  tags: [\"episodes\"],\n  summary: \"Publish episode\",\n  description: \"Publish an episode to make it publicly available\",\n  request: {\n    params: EpisodeParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Episode published successfully\",\n      content: {\n        \"application/json\": {\n          schema: EpisodeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Delete episode\nconst deleteEpisodeRoute = createRoute({\n  method: \"delete\",\n  path: \"/shows/{show_id}/episodes/{episode_id}\",\n  tags: [\"episodes\"],\n  summary: \"Delete episode\",\n  description: \"Delete an episode\",\n  request: {\n    params: EpisodeParamsSchema,\n  },\n  responses: {\n    204: {\n      description: \"Episode deleted successfully\",\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Upload episode image route\nconst uploadEpisodeImageRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/{show_id}/episodes/{episode_id}/image\",\n  tags: [\"episodes\"],\n  summary: \"Upload episode image\",\n  description: \"Upload an image file for an episode\",\n  request: {\n    params: EpisodeParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: z.object({\n            image: z.any().openapi({\n              type: \"string\",\n              format: \"binary\",\n              description: \"Image file to upload\",\n            }),\n          }),\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: ImageUploadSchema,\n        },\n      },\n      description: \"Image uploaded successfully\",\n    },\n    400: {\n      description: \"Invalid file or request\",\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Get episode transcript\nconst getEpisodeTranscriptRoute = createRoute({\n  method: \"get\",\n  path: \"/shows/{show_id}/episodes/{episode_id}/transcript\",\n  tags: [\"episodes\"],\n  summary: \"Get episode transcript\",\n  description: \"Get the transcript of an episode in markdown format\",\n  request: {\n    params: EpisodeParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Transcript retrieved successfully\",\n      content: {\n        \"text/markdown\": {\n          schema: {\n            type: \"string\",\n          },\n        },\n        \"application/json\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              transcript: { type: \"string\" },\n              episodeId: { type: \"string\" },\n              title: { type: \"string\" },\n              createdAt: { type: \"string\" },\n            },\n          },\n        },\n      },\n    },\n    404: {\n      description: \"Episode or transcript not found\",\n    },\n    503: {\n      description: \"Transcript not available\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nexport function registerEpisodeRoutes(\n  app: OpenAPIHono,\n  episodeService: EpisodeService,\n  audioService?: AudioService,\n  imageService?: ImageService,\n  bucket?: R2Bucket\n) {\n  // Get episodes for a show\n  app.openapi(getEpisodesRoute, async (c) => {\n    // Check auth - look for permissions first, then fall back to scopes\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read OR scopes: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n    const pagination = c.req.valid(\"query\");\n    const episodes = await episodeService.getEpisodesByShowId(\n      show_id,\n      pagination\n    );\n\n    // Sign audioUrl and imageUrl in episodes if they have r2:// URLs\n    const signedEpisodes = await Promise.all(\n      episodes.map(async (episode) => {\n        let signedEpisode = await signAudioUrlInEpisode(episode, audioService);\n        signedEpisode = await signImageUrlInEpisode(\n          signedEpisode,\n          imageService\n        );\n        return signedEpisode;\n      })\n    );\n\n    return c.json(signedEpisodes);\n  });\n\n  // Get episode by ID\n  app.openapi(getEpisodeRoute, async (c) => {\n    // Check auth - look for permissions first, then fall back to scopes\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read OR scopes: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n    const episode = await episodeService.getEpisodeById(show_id, episode_id);\n\n    if (!episode) {\n      const problem = {\n        type: \"not_found\",\n        title: \"Not Found\",\n        status: 404,\n        detail: \"Episode not found\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(404, { message: JSON.stringify(problem) });\n    }\n\n    // Sign audioUrl and imageUrl if they have r2:// URLs\n    let signedEpisode = await signAudioUrlInEpisode(episode, audioService);\n    signedEpisode = await signImageUrlInEpisode(signedEpisode, imageService);\n\n    return c.json(signedEpisode);\n  });\n\n  // Create episode\n  app.openapi(createEpisodeRoute, async (c) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id } = c.req.valid(\"param\");\n    const episodeData = c.req.valid(\"json\");\n\n    // Get organization ID from JWT (payload already declared above)\n    const organizationId = payload.org_id;\n    if (!organizationId) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Organization context required. Please select an organization.\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    try {\n      const episode = await episodeService.createEpisode(\n        show_id,\n        episodeData,\n        organizationId\n      );\n\n      // Sign URLs if they have r2:// URLs\n      let signedEpisode = await signAudioUrlInEpisode(episode, audioService);\n      signedEpisode = await signImageUrlInEpisode(signedEpisode, imageService);\n\n      return c.json(signedEpisode, 201);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Show not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Update episode\n  app.openapi(updateEpisodeRoute, async (c) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n    const updateData = c.req.valid(\"json\");\n\n    try {\n      const episode = await episodeService.updateEpisode(\n        show_id,\n        episode_id,\n        updateData\n      );\n\n      // Sign URLs if they have r2:// URLs\n      let signedEpisode = await signAudioUrlInEpisode(episode, audioService);\n      signedEpisode = await signImageUrlInEpisode(signedEpisode, imageService);\n\n      return c.json(signedEpisode);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Publish episode\n  app.openapi(publishEpisodeRoute, async (c) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasPublishPermission = hasPermissions(payload, [\"podcast:publish\"]);\n    const hasPublishScope = hasScopes(payload, [\"podcast.publish\"]);\n    if (!hasPublishPermission && !hasPublishScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail:\n          \"Required permissions: podcast:publish or scope: podcast.publish\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n\n    try {\n      const episode = await episodeService.publishEpisode(show_id, episode_id);\n\n      // Sign URLs if they have r2:// URLs\n      let signedEpisode = await signAudioUrlInEpisode(episode, audioService);\n      signedEpisode = await signImageUrlInEpisode(signedEpisode, imageService);\n\n      return c.json(signedEpisode);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Delete episode\n  app.openapi(deleteEpisodeRoute, async (c) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n\n    try {\n      await episodeService.deleteEpisode(show_id, episode_id);\n      return c.body(null, 204);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n      throw error;\n    }\n  });\n\n  // Upload episode image\n  app.openapi(uploadEpisodeImageRoute, async (c) => {\n    // Check authorization\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    if (!imageService) {\n      const problem = {\n        type: \"internal_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: \"Image service not available\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n\n    try {\n      const formData = await c.req.formData();\n      const imageFile = formData.get(\"image\") as File | null;\n\n      if (!imageFile) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"Bad Request\",\n          status: 400,\n          detail: \"Image file is required\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      const imageUpload = await imageService.uploadEpisodeImage(\n        show_id,\n        episode_id,\n        imageFile\n      );\n      return c.json(imageUpload);\n    } catch (error: any) {\n      if (error.message?.includes(\"not found\")) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: error.message,\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      if (error.message?.includes(\"File must be an image\")) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"Bad Request\",\n          status: 400,\n          detail: \"File must be an image\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      throw error;\n    }\n  });\n\n  // Get episode transcript\n  app.openapi(getEpisodeTranscriptRoute, async (c) => {\n    // Check auth - look for permissions first, then fall back to scopes\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read OR scopes: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    if (!bucket) {\n      const problem = {\n        type: \"service_unavailable\",\n        title: \"Service Unavailable\",\n        status: 503,\n        detail: \"Transcript storage service is not available\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(503, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n\n    try {\n      // First, get the episode to check if transcript exists\n      const episode = await episodeService.getEpisodeById(show_id, episode_id);\n\n      if (!episode || episode.showId !== show_id) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      if (!episode.transcriptUrl) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Transcript not available for this episode\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      // Extract R2 key from transcript URL\n      // Format: https://podcast-media.sesamy.dev/transcripts/episode-id/transcript-id.txt\n      // or r2://transcripts/episode-id/transcript-id.txt\n      let transcriptKey: string;\n      if (episode.transcriptUrl.startsWith(\"r2://\")) {\n        transcriptKey = episode.transcriptUrl.replace(\"r2://\", \"\");\n      } else {\n        // Extract key from full URL\n        const url = new URL(episode.transcriptUrl);\n        const pathSegments = url.pathname.split(\"/\");\n        // Find transcripts segment and get everything after it\n        const transcriptsIndex = pathSegments.indexOf(\"transcripts\");\n        if (transcriptsIndex === -1) {\n          throw new Error(\"Invalid transcript URL format\");\n        }\n        transcriptKey = pathSegments.slice(transcriptsIndex).join(\"/\");\n      }\n\n      // Fetch transcript from R2\n      const transcriptObject = await bucket.get(transcriptKey);\n\n      if (!transcriptObject) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Transcript file not found in storage\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      const transcriptText = await transcriptObject.text();\n\n      // Check Accept header to determine response format\n      const acceptHeader = c.req.header(\"Accept\");\n      const preferMarkdown =\n        acceptHeader?.includes(\"text/markdown\") ||\n        acceptHeader?.includes(\"text/plain\");\n\n      if (preferMarkdown) {\n        // Return as markdown\n        const markdownContent = `# ${episode.title}\\n\\n**Episode ID:** ${\n          episode.id\n        }\\n**Show:** ${episode.showId}\\n**Created:** ${new Date(\n          episode.createdAt\n        ).toLocaleDateString()}\\n\\n---\\n\\n## Transcript\\n\\n${transcriptText}`;\n\n        return new Response(markdownContent, {\n          headers: {\n            \"Content-Type\": \"text/markdown; charset=utf-8\",\n            \"Cache-Control\": \"public, max-age=3600\", // Cache for 1 hour\n          },\n        });\n      } else {\n        // Return as JSON\n        return c.json({\n          transcript: transcriptText,\n          episodeId: episode.id,\n          title: episode.title,\n          createdAt: episode.createdAt,\n          transcriptUrl: episode.transcriptUrl,\n        });\n      }\n    } catch (error: any) {\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n\n      console.error(\"Failed to fetch transcript:\", error);\n\n      if (error.message?.includes(\"not found\")) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode or transcript not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      const problem = {\n        type: \"internal_server_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: \"Failed to retrieve transcript\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n  });\n}\n", "import { z } from \"zod\";\n\n// Request schemas\nexport const CreateEpisodeSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(255, \"Title too long\"),\n  description: z\n    .string()\n    .min(1, \"Description is required\")\n    .max(2000, \"Description too long\"),\n  imageUrl: z.nullable(z.string().url()).optional(),\n  audioUrl: z.nullable(z.string().url()).optional(),\n  transcriptUrl: z.nullable(z.string().url()).optional(),\n  duration: z.number().int().positive().nullable().optional(),\n  episodeNumber: z.number().int().nonnegative().nullable().optional(),\n  seasonNumber: z.number().int().nonnegative().nullable().optional(),\n  episodeType: z.string().nullable().optional(),\n  author: z.string().nullable().optional(),\n  subtitle: z.string().nullable().optional(),\n  explicit: z.boolean().nullable().optional(),\n  keywords: z.string().nullable().optional(), // JSON string containing array of keywords\n});\n\nexport const UpdateEpisodeSchema = z.object({\n  title: z.string().min(1).max(255).optional(),\n  description: z.string().min(1).max(2000).optional(),\n  imageUrl: z.nullable(z.string().url()).optional(),\n  audioUrl: z.nullable(z.string().url()).optional(),\n  transcriptUrl: z.nullable(z.string().url()).optional(),\n  encodedAudioUrls: z.nullable(z.string()).optional(),\n  duration: z.number().int().positive().nullable().optional(),\n  episodeNumber: z.number().int().nonnegative().nullable().optional(),\n  seasonNumber: z.number().int().nonnegative().nullable().optional(),\n  episodeType: z.string().nullable().optional(),\n  author: z.string().nullable().optional(),\n  subtitle: z.string().nullable().optional(),\n  explicit: z.boolean().nullable().optional(),\n  keywords: z.string().nullable().optional(), // JSON string containing array of keywords\n});\n\n// Response schemas\nexport const EpisodeSchema = z.object({\n  id: z.string().uuid(),\n  showId: z.string().uuid(),\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().nullable(),\n  audioUrl: z.string().nullable(),\n  transcriptUrl: z.string().nullable(),\n  encodedAudioUrls: z.string().nullable(),\n  published: z.boolean().nullable(),\n  publishedAt: z.string().datetime().nullable(),\n  duration: z.number().int().positive().nullable(),\n  episodeNumber: z.number().int().nonnegative().nullable(),\n  seasonNumber: z.number().int().nonnegative().nullable(),\n  episodeType: z.string().nullable(),\n  author: z.string().nullable(),\n  subtitle: z.string().nullable(),\n  explicit: z.boolean().nullable(),\n  keywords: z.string().nullable(), // JSON string containing array of keywords\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\n\n// Path parameters\nexport const EpisodeParamsSchema = z.object({\n  show_id: z.string().uuid(),\n  episode_id: z.string().uuid(),\n});\n\nexport const ShowParamsSchema = z.object({\n  show_id: z.string().uuid(),\n});\n\n// Pagination\nexport const PaginationSchema = z.object({\n  limit: z\n    .string()\n    .optional()\n    .transform((val) => Math.min(parseInt(val || \"10\"), 100))\n    .pipe(z.number().min(1).max(100)),\n  offset: z\n    .string()\n    .optional()\n    .transform((val) => parseInt(val || \"0\"))\n    .pipe(z.number().min(0)),\n});\n\n// Types\nexport type CreateEpisode = z.infer<typeof CreateEpisodeSchema>;\nexport type UpdateEpisode = z.infer<typeof UpdateEpisodeSchema>;\nexport type Episode = z.infer<typeof EpisodeSchema>;\nexport type EpisodeParams = z.infer<typeof EpisodeParamsSchema>;\nexport type ShowParams = z.infer<typeof ShowParamsSchema>;\nexport type Pagination = z.infer<typeof PaginationSchema>;\n\n// Image upload response schema\nexport const ImageUploadSchema = z.object({\n  id: z.string().uuid(),\n  showId: z.string().uuid().nullable(),\n  episodeId: z.string().uuid().nullable(),\n  fileName: z.string(),\n  fileSize: z.number(),\n  mimeType: z.string(),\n  url: z.string(),\n  uploadedAt: z.string().datetime(),\n});\n\nexport type ImageUpload = z.infer<typeof ImageUploadSchema>;\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { AudioUploadSchema, AudioParamsSchema } from \"./schemas\";\nimport { AudioService } from \"./service\";\nimport { hasPermissions, hasScopes } from \"../auth/middleware\";\nimport { JWTPayload } from \"../auth/types\";\nimport { NotFoundError } from \"../common/errors\";\n\n// Upload audio route\nconst uploadAudioRoute = createRoute({\n  method: \"post\",\n  path: \"/shows/{show_id}/episodes/{episode_id}/audio\",\n  tags: [\"audio\"],\n  summary: \"Upload audio file\",\n  description: \"Upload an audio file for an episode\",\n  request: {\n    params: AudioParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              audio: {\n                type: \"string\",\n                format: \"binary\",\n                description: \"Audio file to upload\",\n              },\n            },\n            required: [\"audio\"],\n          },\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: AudioUploadSchema,\n        },\n      },\n      description: \"Audio uploaded successfully\",\n    },\n    404: {\n      description: \"Episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Get audio metadata route\nconst getAudioRoute = createRoute({\n  method: \"get\",\n  path: \"/shows/{show_id}/episodes/{episode_id}/audio\",\n  tags: [\"audio\"],\n  summary: \"Get audio metadata\",\n  description: \"Get metadata for an episode's audio file\",\n  request: {\n    params: AudioParamsSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/json\": {\n          schema: AudioUploadSchema,\n        },\n      },\n      description: \"Audio metadata\",\n    },\n    404: {\n      description: \"Audio or episode not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nexport function registerAudioRoutes(\n  app: OpenAPIHono,\n  audioService: AudioService\n) {\n  // Upload audio file\n  app.openapi(uploadAudioRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasWritePermission = hasPermissions(payload, [\"podcast:write\"]);\n    const hasWriteScope = hasScopes(payload, [\"podcast.write\"]);\n    if (!hasWritePermission && !hasWriteScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:write or scope: podcast.write\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n\n    try {\n      // Parse multipart form data\n      const formData = await c.req.formData();\n      const audioFile = formData.get(\"audio\") as File | null;\n\n      if (!audioFile) {\n        const problem = {\n          type: \"validation_error\",\n          title: \"Validation Error\",\n          status: 400,\n          detail: \"Audio file is required\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      // Convert File to Buffer\n      const buffer = Buffer.from(await audioFile.arrayBuffer());\n\n      const fileData = {\n        fileName: audioFile.name,\n        fileSize: audioFile.size,\n        mimeType: audioFile.type,\n        buffer,\n      };\n\n      const upload = await audioService.uploadAudio(\n        show_id,\n        episode_id,\n        fileData\n      );\n      return c.json(upload, 201);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        const problem = {\n          type: \"not_found\",\n          title: \"Not Found\",\n          status: 404,\n          detail: \"Episode not found\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(404, { message: JSON.stringify(problem) });\n      }\n\n      // Log the actual error for debugging\n      console.error(\"Audio upload error:\", error);\n\n      // Re-throw to let the global error handler deal with it\n      throw error;\n    }\n  });\n\n  // Get audio metadata\n  app.openapi(getAudioRoute, async (c) => {\n    // Check auth\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n    const hasReadPermission = hasPermissions(payload, [\"podcast:read\"]);\n    const hasReadScope = hasScopes(payload, [\"podcast.read\"]);\n    if (!hasReadPermission && !hasReadScope) {\n      const problem = {\n        type: \"forbidden\",\n        title: \"Forbidden\",\n        status: 403,\n        detail: \"Required permissions: podcast:read or scope: podcast.read\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(403, { message: JSON.stringify(problem) });\n    }\n\n    const { show_id, episode_id } = c.req.valid(\"param\");\n    const audio = await audioService.getAudioMetadata(show_id, episode_id);\n\n    if (!audio) {\n      const problem = {\n        type: \"not_found\",\n        title: \"Not Found\",\n        status: 404,\n        detail: \"Audio not found\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(404, { message: JSON.stringify(problem) });\n    }\n\n    return c.json(audio);\n  });\n\n  // TODO: Implement signed audio file serving once R2Object API is clarified\n  // For now, signed URLs will point to placeholder URLs until R2Object streaming is resolved\n  /*\n  // Serve signed audio files - no OpenAPI spec needed as this is internal\n  app.get(\"/audio/signed/:token\", async (c) => {\n    const token = c.req.param(\"token\");\n    \n    if (!token) {\n      throw new HTTPException(400, { message: \"Missing token\" });\n    }\n\n    try {\n      const secret = process.env.JWT_SECRET || 'your-secret-key';\n      const decoded = jwt.verify(decodeURIComponent(token), secret) as any;\n      \n      if (decoded.purpose !== 'audio_access') {\n        throw new HTTPException(403, { message: \"Invalid token purpose\" });\n      }\n\n      const r2Key = decoded.r2_key;\n      \n      // Get the file from R2 bucket\n      const r2Object = await audioService.getR2Object(r2Key);\n      \n      if (!r2Object) {\n        throw new HTTPException(404, { message: \"Audio file not found\" });\n      }\n\n      // Stream the file back to the client\n      const headers = new Headers();\n      headers.set('Content-Type', r2Object.httpMetadata?.contentType || 'audio/mpeg');\n      headers.set('Content-Length', r2Object.size.toString());\n      headers.set('Cache-Control', 'private, max-age=3600'); // Cache for 1 hour\n      \n      // Get the file content as ArrayBuffer and create a Response\n      const arrayBuffer = await r2Object.arrayBuffer();\n      \n      return new Response(arrayBuffer, {\n        headers,\n        status: 200\n      });\n      \n    } catch (error: any) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new HTTPException(410, { message: \"Signed URL has expired\" });\n      }\n      if (error?.name === 'JsonWebTokenError') {\n        throw new HTTPException(403, { message: \"Invalid token\" });\n      }\n      console.error('Error serving signed audio:', error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n  */\n}\n", "import { z } from \"zod\";\n\n// Response schemas\nexport const AudioUploadSchema = z.object({\n  id: z.string().uuid(),\n  episodeId: z.string().uuid(),\n  fileName: z.string(),\n  fileSize: z.number().int().positive(),\n  mimeType: z.string(),\n  url: z.string().url(),\n  uploadedAt: z.string().datetime(),\n});\n\n// Path parameters\nexport const AudioParamsSchema = z.object({\n  show_id: z.string().uuid(),\n  episode_id: z.string().uuid(),\n});\n\n// Types\nexport type AudioUpload = z.infer<typeof AudioUploadSchema>;\nexport type AudioParams = z.infer<typeof AudioParamsSchema>;\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport { ShowService } from \"../shows/service\";\nimport { EpisodeRepository } from \"../episodes/repository\";\nimport { AudioService } from \"../audio/service\";\n\n// Show ID parameter schema\nconst FeedParamsSchema = z.object({\n  show_id: z.string().uuid(),\n});\n\n// RSS feed route\nconst getShowFeedRoute = createRoute({\n  method: \"get\",\n  path: \"/feeds/{show_id}\",\n  tags: [\"feeds\"],\n  summary: \"Get RSS feed for show\",\n  description:\n    \"Generate RSS feed for the podcast show (no authentication required)\",\n  request: {\n    params: FeedParamsSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        \"application/rss+xml\": {\n          schema: z.string(),\n        },\n      },\n      description: \"RSS feed\",\n    },\n    404: {\n      description: \"Show not found\",\n    },\n  },\n});\n\n// Generate RSS feed for a show\nfunction generateRSSFeed(\n  show: any,\n  episodes: any[],\n  audioService?: AudioService\n): string {\n  const now = new Date().toUTCString();\n\n  // Sign image URL if it's an R2 URL\n  let imageUrl = show.imageUrl;\n  if (audioService && show.imageUrl && show.imageUrl.startsWith(\"r2://\")) {\n    // For RSS feed, we'll use the R2 URL as is since we can't await here\n    // In a real implementation, you might want to pre-sign these URLs\n    imageUrl = show.imageUrl.replace(\n      \"r2://\",\n      \"https://podcast-service-assets.sesamy.dev/\"\n    );\n  }\n\n  const episodeItems = episodes\n    .filter((episode) => episode.published)\n    .map((episode) => {\n      let audioUrl = episode.audioUrl;\n      if (\n        audioService &&\n        episode.audioUrl &&\n        episode.audioUrl.startsWith(\"r2://\")\n      ) {\n        audioUrl = episode.audioUrl.replace(\n          \"r2://\",\n          \"https://podcast-service-assets.sesamy.dev/\"\n        );\n      }\n\n      return `\n    <item>\n      <title><![CDATA[${episode.title || \"Untitled Episode\"}]]></title>\n      <description><![CDATA[${episode.description || \"\"}]]></description>\n      <pubDate>${new Date(episode.createdAt).toUTCString()}</pubDate>\n      <guid isPermaLink=\"false\">${episode.id}</guid>\n      ${\n        audioUrl\n          ? `<enclosure url=\"${audioUrl}\" type=\"audio/mpeg\" length=\"0\"/>`\n          : \"\"\n      }\n    </item>`;\n    })\n    .join(\"\");\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\">\n  <channel>\n    <title><![CDATA[${show.title || \"Untitled Show\"}]]></title>\n    <description><![CDATA[${show.description || \"\"}]]></description>\n    <link>https://podcast-service.sesamy.dev/shows/${show.id}</link>\n    <language>en-us</language>\n    <pubDate>${now}</pubDate>\n    <lastBuildDate>${now}</lastBuildDate>\n    <generator>Sesamy Podcast Service</generator>\n    ${\n      imageUrl\n        ? `<image><url>${imageUrl}</url><title><![CDATA[${\n            show.title || \"Untitled Show\"\n          }]]></title><link>https://podcast-service.sesamy.dev/shows/${\n            show.id\n          }</link></image>`\n        : \"\"\n    }\n    ${imageUrl ? `<itunes:image href=\"${imageUrl}\"/>` : \"\"}\n    <itunes:category text=\"Technology\"/>\n    <itunes:explicit>false</itunes:explicit>\n    ${episodeItems}\n  </channel>\n</rss>`;\n}\n\nexport function registerFeedRoutes(\n  app: OpenAPIHono,\n  showService: ShowService,\n  episodeRepository: EpisodeRepository,\n  audioService?: AudioService\n) {\n  // Get RSS feed for show\n  app.openapi(getShowFeedRoute, async (c) => {\n    const { show_id } = c.req.valid(\"param\");\n    const show = await showService.getShowById(show_id);\n\n    if (!show) {\n      const problem = {\n        type: \"not_found\",\n        title: \"Not Found\",\n        status: 404,\n        detail: \"Show not found\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(404, { message: JSON.stringify(problem) });\n    }\n\n    // Get episodes for the show\n    const episodes = await episodeRepository.findByShowId(show_id, {\n      limit: 100,\n      offset: 0,\n    });\n\n    // Generate RSS feed\n    const rssFeed = generateRSSFeed(show, episodes, audioService);\n\n    c.header(\"Content-Type\", \"application/rss+xml\");\n    return c.text(rssFeed);\n  });\n}\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport { TaskService } from \"./service.js\";\nimport { requireScopes } from \"../auth/middleware.js\";\nimport { NotFoundError } from \"../common/errors.js\";\n\n// Task status enum\nconst TaskStatusSchema = z.enum([\"pending\", \"processing\", \"done\", \"failed\"]);\n\n// Task type enum\nconst TaskTypeSchema = z.enum([\"audio_processing\"]);\n\n// Base task schema\nconst TaskSchema = z.object({\n  id: z.number(),\n  type: TaskTypeSchema,\n  status: TaskStatusSchema,\n  payload: z.any().optional().nullable(),\n  result: z.any().optional().nullable(),\n  error: z.string().optional().nullable(),\n  attempts: z.number(),\n  started_at: z.string().optional().nullable(),\n  progress: z.number().optional().nullable(),\n  created_at: z.string(),\n  updated_at: z.string(),\n});\n\n// Create task request schema\nconst CreateTaskSchema = z.object({\n  type: TaskTypeSchema,\n  payload: z.any().optional(),\n});\n\n// Query parameters for listing tasks\nconst TaskQuerySchema = z.object({\n  status: TaskStatusSchema.optional(),\n  limit: z.coerce.number().min(1).max(100).optional().default(10),\n  offset: z.coerce.number().min(0).optional().default(0),\n  sortBy: z\n    .enum([\"created_at\", \"updated_at\", \"type\", \"status\"])\n    .optional()\n    .default(\"created_at\"),\n  sortOrder: z.enum([\"asc\", \"desc\"]).optional().default(\"desc\"),\n});\n\n// Task ID parameter schema\nconst TaskParamsSchema = z.object({\n  task_id: z.coerce.number(),\n});\n\n// Test encoding request schema\nconst TestEncodeSchema = z.object({\n  audioUrl: z.string().url().optional(),\n  outputFormat: z.enum([\"mp3\", \"aac\"]).optional().default(\"mp3\"),\n  bitrate: z.coerce.number().min(64).max(320).optional().default(128),\n});\n\n// Test audio preprocessing request schema\nconst TestAudioPreprocessSchema = z.object({\n  audioUrl: z.string().url().optional(),\n  episodeId: z.string().optional(),\n});\n\n// Create task route\nconst createTaskRoute = createRoute({\n  method: \"post\",\n  path: \"/tasks\",\n  tags: [\"tasks\"],\n  summary: \"Create a new task\",\n  description: \"Create a new background processing task\",\n  security: [{ Bearer: [] }],\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateTaskSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      description: \"Task created successfully\",\n      content: {\n        \"application/json\": {\n          schema: TaskSchema,\n        },\n      },\n    },\n    400: {\n      description: \"Invalid request\",\n    },\n    401: {\n      description: \"Unauthorized\",\n    },\n  },\n});\n\n// Get tasks route\nconst getTasksRoute = createRoute({\n  method: \"get\",\n  path: \"/tasks\",\n  tags: [\"tasks\"],\n  summary: \"List tasks\",\n  description:\n    \"Get a list of tasks with optional status filtering and sorting. Default sort is by created_at in descending order (newest first).\",\n  security: [{ Bearer: [] }],\n  request: {\n    query: TaskQuerySchema,\n  },\n  responses: {\n    200: {\n      description: \"List of tasks\",\n      content: {\n        \"application/json\": {\n          schema: z.array(TaskSchema),\n        },\n      },\n    },\n    401: {\n      description: \"Unauthorized\",\n    },\n  },\n});\n\n// Get specific task route\nconst getTaskRoute = createRoute({\n  method: \"get\",\n  path: \"/tasks/{task_id}\",\n  tags: [\"tasks\"],\n  summary: \"Get a specific task\",\n  description: \"Get details of a specific task by ID\",\n  security: [{ Bearer: [] }],\n  request: {\n    params: TaskParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Task details\",\n      content: {\n        \"application/json\": {\n          schema: TaskSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Task not found\",\n    },\n    401: {\n      description: \"Unauthorized\",\n    },\n  },\n});\n\n// Retry task route\nconst retryTaskRoute = createRoute({\n  method: \"post\",\n  path: \"/tasks/{task_id}/retry\",\n  tags: [\"tasks\"],\n  summary: \"Retry a failed task\",\n  description: \"Reset a failed task to pending status and queue it for retry\",\n  security: [{ Bearer: [] }],\n  request: {\n    params: TaskParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Task retried successfully\",\n      content: {\n        \"application/json\": {\n          schema: TaskSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Task not found\",\n    },\n    401: {\n      description: \"Unauthorized\",\n    },\n    400: {\n      description: \"Task cannot be retried\",\n    },\n  },\n});\n\nexport const createTaskRoutes = (database?: D1Database) => {\n  const app = new OpenAPIHono();\n  const taskService = new TaskService(database);\n\n  // Helper function to serialize task data for API response\n  const serializeTask = (task: any) => ({\n    ...task,\n    payload: task.payload ? JSON.parse(task.payload) : null,\n    result: task.result ? JSON.parse(task.result) : null,\n  });\n\n  // Apply authentication middleware - using colon notation to match user permissions\n  app.use(\"*\", requireScopes([\"podcast:read\", \"podcast:write\"]));\n\n  // Create task\n  app.openapi(createTaskRoute, async (c) => {\n    const body = c.req.valid(\"json\");\n\n    const task = await taskService.createTask(body.type, body.payload);\n    return c.json(serializeTask(task), 201);\n  });\n\n  // List tasks\n  app.openapi(getTasksRoute, async (c) => {\n    const query = c.req.valid(\"query\");\n\n    const tasks = await taskService.getTasks(\n      query.status,\n      query.limit,\n      query.offset,\n      query.sortBy,\n      query.sortOrder\n    );\n\n    return c.json(tasks.map(serializeTask));\n  });\n\n  // Get specific task\n  app.openapi(getTaskRoute, async (c) => {\n    const { task_id } = c.req.valid(\"param\");\n\n    const task = await taskService.getTask(task_id);\n\n    if (!task) {\n      throw new NotFoundError(`Task with ID ${task_id} not found`);\n    }\n\n    return c.json(serializeTask(task));\n  });\n\n  // Retry task\n  app.openapi(retryTaskRoute, async (c) => {\n    const { task_id } = c.req.valid(\"param\");\n\n    try {\n      const task = await taskService.retryTask(task_id);\n      return c.json(serializeTask(task));\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message === \"Task not found\") {\n          throw new NotFoundError(`Task with ID ${task_id} not found`);\n        }\n        throw new HTTPException(400, { message: error.message });\n      }\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  return app;\n};\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport { authMiddleware } from \"../auth/middleware\";\n\n// Cloudflare Workers types (for environments where they're not globally available)\ndeclare global {\n  interface Workflow {\n    create(options: { id: string; params: any }): Promise<{ id: string }>;\n  }\n}\n\n// Workflow schemas\nconst WorkflowStatusSchema = z.enum([\n  \"queued\",\n  \"running\",\n  \"paused\",\n  \"completed\",\n  \"failed\",\n  \"cancelled\",\n  \"terminated\",\n]);\n\nconst WorkflowTypeSchema = z.enum([\n  \"transcription\",\n  \"audio-processing\",\n  \"encoding\",\n  \"custom\",\n]);\n\nconst workflowInstanceSchema = z.object({\n  id: z.string(),\n  workflowName: z.string(),\n  status: WorkflowStatusSchema,\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  completedAt: z.string().optional(),\n  episodeId: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n  error: z.string().optional(),\n  progress: z.record(z.any()).optional(),\n  estimatedProgress: z.number().min(0).max(100).optional(),\n  estimatedDuration: z.string().optional(),\n  actualDuration: z.number().optional(),\n});\n\nconst WorkflowQuerySchema = z.object({\n  status: WorkflowStatusSchema.optional(),\n  workflowType: WorkflowTypeSchema.optional(),\n  episodeId: z.string().optional(),\n  limit: z.coerce.number().int().min(1).max(100).default(20),\n  offset: z.coerce.number().int().min(0).default(0),\n  sortBy: z.enum([\"createdAt\", \"updatedAt\", \"status\"]).default(\"createdAt\"),\n  sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n});\n\nconst WorkflowSearchSchema = z.object({\n  episodeId: z.string().optional(),\n  status: WorkflowStatusSchema.optional(),\n  workflowType: z.string().optional(),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n});\n\n// Workflow request schemas\nconst audioProcessingWorkflowSchema = z.object({\n  episodeId: z.string().min(1),\n  audioR2Key: z.string().min(1),\n  chunkDuration: z.number().int().min(10).max(300).default(60),\n  overlapDuration: z.number().int().min(0).max(10).default(2),\n  encodingFormats: z.array(z.string()).default([\"mp3_128\"]),\n  transcriptionLanguage: z.string().optional().default(\"en\"), // Force language to avoid mixed language issues\n});\n\n// Helper function to fetch workflow instances from Cloudflare API\nasync function fetchWorkflowInstancesFromCloudflare(\n  accountId: string,\n  workflowName: string,\n  apiToken: string\n): Promise<any[]> {\n  const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/workflows/${workflowName}/instances`;\n\n  try {\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${apiToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      console.error(\n        `Cloudflare API error: ${response.status} ${response.statusText}`\n      );\n      return [];\n    }\n\n    const data = (await response.json()) as {\n      success: boolean;\n      errors?: any[];\n      result?: Array<{\n        id: string;\n        created_on: string;\n        ended_on?: string;\n        status: string;\n        version_id: string;\n      }>;\n    };\n\n    if (!data.success || !data.result) {\n      console.error(`Cloudflare API error:`, data.errors);\n      return [];\n    }\n\n    // Transform Cloudflare API response to match our schema\n    return data.result.map((instance) => ({\n      id: instance.id,\n      workflowName: workflowName,\n      status: mapCloudflareStatusToOurStatus(instance.status),\n      createdAt: instance.created_on,\n      updatedAt: instance.created_on, // Cloudflare doesn't provide updated_at\n      completedAt: instance.ended_on,\n      metadata: {\n        version_id: instance.version_id,\n        cloudflare_status: instance.status,\n      },\n    }));\n  } catch (error) {\n    console.error(\"Error fetching workflow instances from Cloudflare:\", error);\n    return [];\n  }\n}\n\n// Map Cloudflare workflow status to our status enum\nfunction mapCloudflareStatusToOurStatus(cloudflareStatus: string): string {\n  const statusMap: Record<string, string> = {\n    running: \"running\",\n    complete: \"completed\",\n    failed: \"failed\",\n    paused: \"paused\",\n    terminated: \"terminated\",\n    queued: \"queued\",\n  };\n\n  return statusMap[cloudflareStatus] || \"queued\";\n}\n\n// Env type with workflow bindings\nexport interface Env {\n  AUDIO_PROCESSING_WORKFLOW: Workflow;\n  DB: D1Database;\n  // Cloudflare API credentials for querying workflow instances\n  CLOUDFLARE_API_TOKEN?: string;\n  CLOUDFLARE_ACCOUNT_ID?: string;\n}\n\n// Route definitions using createRoute\nconst healthRoute = createRoute({\n  method: \"get\",\n  path: \"/workflows/health\",\n  tags: [\"workflows\"],\n  summary: \"Workflow system health check\",\n  description:\n    \"Check if the workflow system is operational and get available workflows\",\n  responses: {\n    200: {\n      description: \"Workflow system status\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            success: z.boolean(),\n            status: z.string(),\n            workflows: z.array(\n              z.object({\n                name: z.string(),\n                type: z.string(),\n                available: z.boolean(),\n              })\n            ),\n            endpoints: z.array(z.string()),\n            timestamp: z.string(),\n          }),\n        },\n      },\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nconst listInstancesRoute = createRoute({\n  method: \"get\",\n  path: \"/workflows/instances\",\n  tags: [\"workflows\"],\n  summary: \"List workflow instances\",\n  description:\n    \"Get a paginated list of workflow instances with optional filtering\",\n  request: {\n    query: WorkflowQuerySchema,\n  },\n  responses: {\n    200: {\n      description: \"List of workflow instances\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            success: z.boolean(),\n            workflows: z.array(workflowInstanceSchema),\n            pagination: z.object({\n              total: z.number(),\n              limit: z.number(),\n              offset: z.number(),\n              hasMore: z.boolean(),\n            }),\n            filters: WorkflowQuerySchema.partial(),\n          }),\n        },\n      },\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nconst statsRoute = createRoute({\n  method: \"get\",\n  path: \"/workflows/instances/stats\",\n  tags: [\"workflows\"],\n  summary: \"Get workflow statistics\",\n  description: \"Get aggregated statistics about workflow instances\",\n  responses: {\n    200: {\n      description: \"Workflow statistics\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            success: z.boolean(),\n            stats: z.object({\n              total: z.number(),\n              byStatus: z.record(z.string(), z.number()),\n              byType: z.record(z.string(), z.number()),\n              averageDuration: z.number().optional(),\n              recentActivity: z.object({\n                last24h: z.number(),\n                last7d: z.number(),\n                last30d: z.number(),\n              }),\n              successRate: z.number().min(0).max(100),\n            }),\n            generatedAt: z.string(),\n          }),\n        },\n      },\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nconst getInstanceRoute = createRoute({\n  method: \"get\",\n  path: \"/workflows/instances/{workflowId}\",\n  tags: [\"workflows\"],\n  summary: \"Get workflow instance details\",\n  description: \"Get detailed information about a specific workflow instance\",\n  request: {\n    params: z.object({\n      workflowId: z.string().min(1),\n    }),\n  },\n  responses: {\n    200: {\n      description: \"Workflow instance details\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            success: z.boolean(),\n            workflow: workflowInstanceSchema,\n          }),\n        },\n      },\n    },\n    404: {\n      description: \"Workflow not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nconst audioProcessingRoute = createRoute({\n  method: \"post\",\n  path: \"/workflows/audio-processing\",\n  tags: [\"workflows\"],\n  summary: \"Start audio processing workflow\",\n  description:\n    \"Starts a durable workflow that processes audio with encoding and transcription in parallel\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: audioProcessingWorkflowSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    202: {\n      description: \"Workflow started successfully\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            success: z.boolean(),\n            message: z.string(),\n            workflowId: z.string(),\n            instanceId: z.string(),\n            status: z.string(),\n            episodeId: z.string(),\n            estimatedDuration: z.string(),\n          }),\n        },\n      },\n    },\n    400: {\n      description: \"Invalid request body\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nexport function createWorkflowRoutes() {\n  const app = new OpenAPIHono<{ Bindings: Env }>();\n\n  // Apply auth middleware to all routes\n  app.use(\"*\", authMiddleware);\n\n  // Health check endpoint\n  app.openapi(healthRoute, async (c) => {\n    const env = c.env;\n\n    return c.json({\n      success: true,\n      status: \"healthy\",\n      workflows: [\n        {\n          name: \"audio-processing\",\n          type: \"audio-processing\",\n          available: !!env.AUDIO_PROCESSING_WORKFLOW,\n        },\n      ],\n      endpoints: [\n        \"GET /workflows/health\",\n        \"GET /workflows/instances\",\n        \"GET /workflows/instances/{workflowId}\",\n        \"GET /workflows/instances/stats\",\n        \"POST /workflows/transcription\",\n        \"POST /workflows/audio-processing\",\n      ],\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // List workflow instances\n  app.openapi(listInstancesRoute, async (c) => {\n    try {\n      const query = c.req.valid(\"query\");\n      const env = c.env;\n\n      let allWorkflows: any[] = [];\n\n      // Try to fetch from Cloudflare API if credentials are available\n      if (env.CLOUDFLARE_ACCOUNT_ID && env.CLOUDFLARE_API_TOKEN) {\n        const cloudflareInstances = await fetchWorkflowInstancesFromCloudflare(\n          env.CLOUDFLARE_ACCOUNT_ID,\n          \"audio-processing-workflow\", // This should match your workflow name in Cloudflare\n          env.CLOUDFLARE_API_TOKEN\n        );\n        allWorkflows = cloudflareInstances;\n      } else {\n        console.warn(\n          \"Cloudflare API credentials not configured, returning empty list\"\n        );\n      }\n\n      // Apply client-side filtering since Cloudflare API doesn't support all our filter options\n      let filteredWorkflows = allWorkflows;\n\n      if (query.status) {\n        filteredWorkflows = filteredWorkflows.filter(\n          (w) => w.status === query.status\n        );\n      }\n\n      if (query.episodeId) {\n        filteredWorkflows = filteredWorkflows.filter(\n          (w) => w.metadata?.episodeId === query.episodeId\n        );\n      }\n\n      // Sort workflows\n      filteredWorkflows.sort((a, b) => {\n        const aValue = a[query.sortBy] || \"\";\n        const bValue = b[query.sortBy] || \"\";\n\n        if (query.sortOrder === \"desc\") {\n          return bValue.localeCompare(aValue);\n        } else {\n          return aValue.localeCompare(bValue);\n        }\n      });\n\n      // Apply pagination\n      const total = filteredWorkflows.length;\n      const paginatedWorkflows = filteredWorkflows.slice(\n        query.offset,\n        query.offset + query.limit\n      );\n\n      return c.json({\n        success: true,\n        workflows: paginatedWorkflows,\n        pagination: {\n          total,\n          limit: query.limit,\n          offset: query.offset,\n          hasMore: total > query.offset + query.limit,\n        },\n        filters: {\n          status: query.status,\n          workflowType: query.workflowType,\n          episodeId: query.episodeId,\n        },\n      });\n    } catch (error) {\n      console.error(\"Failed to list workflow instances:\", error);\n      throw new HTTPException(500, {\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Get workflow statistics\n  app.openapi(statsRoute, async (c) => {\n    try {\n      // Placeholder implementation\n      const stats = {\n        total: 0,\n        byStatus: {} as Record<string, number>,\n        byType: {} as Record<string, number>,\n        recentActivity: {\n          last24h: 0,\n          last7d: 0,\n          last30d: 0,\n        },\n        successRate: 0,\n        averageDuration: undefined as number | undefined,\n      };\n\n      return c.json({\n        success: true,\n        stats,\n        generatedAt: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"Failed to get workflow stats:\", error);\n      throw new HTTPException(500, {\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Get specific workflow instance\n  app.openapi(getInstanceRoute, async (c) => {\n    try {\n      const { workflowId } = c.req.valid(\"param\");\n\n      // Placeholder implementation - would query actual workflow storage\n      const problem = {\n        type: \"not_found\",\n        title: \"Not Found\",\n        status: 404,\n        detail: \"Workflow not found\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(404, { message: JSON.stringify(problem) });\n    } catch (error) {\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n      console.error(\"Failed to get workflow instance:\", error);\n      throw new HTTPException(500, {\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  // Start audio processing workflow\n  app.openapi(audioProcessingRoute, async (c) => {\n    try {\n      const env = c.env;\n      const body = c.req.valid(\"json\");\n\n      const instanceId = crypto.randomUUID();\n\n      // Start the workflow\n      const instance = await env.AUDIO_PROCESSING_WORKFLOW.create({\n        id: instanceId,\n        params: body,\n      });\n\n      return c.json(\n        {\n          success: true,\n          message: \"Audio processing workflow started successfully\",\n          workflowId: \"audio-processing\",\n          instanceId: instance.id,\n          status: \"queued\",\n          episodeId: body.episodeId,\n          estimatedDuration: \"5-15 minutes\",\n        },\n        202\n      );\n    } catch (error) {\n      console.error(\"Failed to start audio processing workflow:\", error);\n\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n\n      // Check if it's a validation error\n      if (error instanceof Error && error.message.includes(\"validation\")) {\n        const problem = {\n          type: \"bad_request\",\n          title: \"Bad Request\",\n          status: 400,\n          detail: error.message,\n          instance: c.req.path,\n        };\n        throw new HTTPException(400, { message: JSON.stringify(problem) });\n      }\n\n      throw new HTTPException(500, {\n        message: error instanceof Error ? error.message : \"Unknown error\",\n      });\n    }\n  });\n\n  return app;\n}\n", "import { Hono } from \"hono\";\nimport { StorageService } from \"../utils/storage\";\n\nconst storage = new Hono<{\n  Bindings: {\n    BUCKET: R2Bucket;\n    STORAGE_SIGNATURE_SECRET: string;\n  };\n}>();\n\n// Handle file operations with signature verification\nstorage.all(\"/file\", async (c) => {\n  const method = c.req.method;\n  const path = c.req.query(\"path\");\n  const expire = c.req.query(\"expire\");\n  const signature = c.req.query(\"signature\");\n  const contentType = c.req.query(\"contentType\");\n\n  // Validate required parameters\n  if (!path || !expire || !signature) {\n    return c.json(\n      { error: \"Missing required parameters: path, expire, signature\" },\n      400\n    );\n  }\n\n  // Create storage service\n  const storageService = new StorageService(c.env);\n\n  // Verify signature\n  const isValid = await storageService.verifySignature(\n    method,\n    path,\n    expire,\n    signature\n  );\n  if (!isValid) {\n    return c.json({ error: \"Invalid or expired signature\" }, 403);\n  }\n\n  try {\n    if (method === \"GET\") {\n      // Download file\n      const file = await storageService.downloadFile(path);\n\n      // Set appropriate headers\n      const headers: Record<string, string> = {};\n      if (file.httpMetadata?.contentType) {\n        headers[\"Content-Type\"] = file.httpMetadata.contentType;\n      }\n      if (file.httpMetadata?.cacheControl) {\n        headers[\"Cache-Control\"] = file.httpMetadata.cacheControl;\n      }\n\n      return new Response(file.data, {\n        status: 200,\n        headers,\n      });\n    } else if (method === \"PUT\") {\n      // Upload file\n      const body = await c.req.arrayBuffer();\n\n      const result = await storageService.uploadFile(path, body, {\n        contentType: contentType || \"application/octet-stream\",\n      });\n\n      return c.json({\n        success: true,\n        key: result.key,\n        size: result.size,\n        etag: result.etag,\n        uploaded: result.uploaded,\n      });\n    } else {\n      return c.json({ error: `Method ${method} not supported` }, 405);\n    }\n  } catch (error) {\n    console.error(\"Storage operation failed:\", error);\n\n    if (error instanceof Error && error.message.includes(\"not found\")) {\n      return c.json({ error: \"File not found\" }, 404);\n    }\n\n    return c.json(\n      {\n        error: \"Storage operation failed\",\n        details: error instanceof Error ? error.message : String(error),\n      },\n      500\n    );\n  }\n});\n\n// Health check endpoint\nstorage.get(\"/health\", async (c) => {\n  return c.json({ status: \"ok\", service: \"storage\" });\n});\n\nexport default storage;\n", "export interface StorageEnv {\n  BUCKET: R2Bucket;\n  // Add a secret key for signing URLs\n  STORAGE_SIGNATURE_SECRET: string;\n}\n\nexport interface StorageOptions {\n  contentType?: string;\n}\n\nexport interface SignedUrlOptions {\n  path: string;\n  method: \"GET\" | \"PUT\";\n  expiresIn?: number; // in seconds\n  contentType?: string;\n}\n\nexport class StorageService {\n  constructor(private env: StorageEnv) {}\n\n  /**\n   * Generate a signed URL for internal use\n   */\n  async generateSignedUrl(options: SignedUrlOptions, baseUrl?: string) {\n    const { path, method, expiresIn = 3600, contentType } = options;\n\n    const expires = Math.floor(Date.now() / 1000) + expiresIn;\n    const signature = await this.createSignature(method, path, expires);\n\n    const params = new URLSearchParams({\n      path,\n      expire: expires.toString(),\n      signature,\n    });\n\n    if (contentType && method === \"PUT\") {\n      params.set(\"contentType\", contentType);\n    }\n\n    const relativePath = `/storage/file?${params.toString()}`;\n    const fullUrl = baseUrl ? `${baseUrl}${relativePath}` : relativePath;\n\n    return {\n      url: fullUrl,\n      expires: new Date(expires * 1000),\n      signature,\n    };\n  }\n\n  /**\n   * Verify a signed URL request\n   */\n  async verifySignature(\n    method: string,\n    path: string,\n    expire: string,\n    signature: string\n  ): Promise<boolean> {\n    const expireTime = parseInt(expire);\n    const currentTime = Math.floor(Date.now() / 1000);\n\n    // Check if expired\n    if (currentTime > expireTime) {\n      return false;\n    }\n\n    // Verify signature\n    const expectedSignature = await this.createSignature(\n      method,\n      path,\n      expireTime\n    );\n    return expectedSignature === signature;\n  }\n\n  /**\n   * Create HMAC signature for method + path + expire\n   */\n  private async createSignature(\n    method: string,\n    path: string,\n    expire: number\n  ): Promise<string> {\n    const message = `${method}:${path}:${expire}`;\n    const key = await crypto.subtle.importKey(\n      \"raw\",\n      new TextEncoder().encode(this.env.STORAGE_SIGNATURE_SECRET),\n      { name: \"HMAC\", hash: \"SHA-256\" },\n      false,\n      [\"sign\"]\n    );\n\n    const signature = await crypto.subtle.sign(\n      \"HMAC\",\n      key,\n      new TextEncoder().encode(message)\n    );\n\n    // Convert to base64url\n    return btoa(String.fromCharCode(...new Uint8Array(signature)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=/g, \"\");\n  }\n\n  /**\n   * Upload a file to the specified path\n   */\n  async uploadFile(\n    path: string,\n    data: ArrayBuffer | ReadableStream | string,\n    options?: StorageOptions\n  ) {\n    const objectKey = path.startsWith(\"/\") ? path.substring(1) : path;\n\n    const uploadOptions: R2PutOptions = {};\n    if (options?.contentType) {\n      uploadOptions.httpMetadata = {\n        contentType: options.contentType,\n      };\n    }\n\n    const result = await this.env.BUCKET.put(objectKey, data, uploadOptions);\n    return {\n      key: result.key,\n      etag: result.etag,\n      size: result.size,\n      uploaded: result.uploaded,\n    };\n  }\n\n  /**\n   * Download a file from the specified path\n   */\n  async downloadFile(path: string) {\n    const objectKey = path.startsWith(\"/\") ? path.substring(1) : path;\n\n    const object = await this.env.BUCKET.get(objectKey);\n    if (!object) {\n      throw new Error(`Object not found: ${objectKey}`);\n    }\n\n    return {\n      data: object.body,\n      size: object.size,\n      etag: object.etag,\n      uploaded: object.uploaded,\n      httpMetadata: object.httpMetadata,\n    };\n  }\n\n  /**\n   * Delete a file at the specified path\n   */\n  async deleteFile(path: string) {\n    const objectKey = path.startsWith(\"/\") ? path.substring(1) : path;\n    await this.env.BUCKET.delete(objectKey);\n    return { deleted: objectKey };\n  }\n\n  /**\n   * Check if a file exists at the specified path\n   */\n  async fileExists(path: string): Promise<boolean> {\n    try {\n      const objectKey = path.startsWith(\"/\") ? path.substring(1) : path;\n      const object = await this.env.BUCKET.head(objectKey);\n      return object !== null;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get file metadata\n   */\n  async getFileInfo(path: string) {\n    const objectKey = path.startsWith(\"/\") ? path.substring(1) : path;\n    return await this.env.BUCKET.head(objectKey);\n  }\n\n  /**\n   * List objects with optional prefix\n   */\n  async listObjects(prefix?: string, limit?: number) {\n    const options: R2ListOptions = {};\n    if (prefix) options.prefix = prefix;\n    if (limit) options.limit = limit;\n\n    const result = await this.env.BUCKET.list(options);\n    return {\n      objects: result.objects.map((obj) => ({\n        key: obj.key,\n        size: obj.size,\n        uploaded: obj.uploaded,\n        etag: obj.etag,\n      })),\n      truncated: result.truncated,\n    };\n  }\n}\n\n// Utility functions for common operations\nexport function createStorageService(env: StorageEnv) {\n  return new StorageService(env);\n}\n\n/**\n * Generate a signed upload URL\n */\nexport async function generateSignedUploadUrl(\n  env: StorageEnv & { SERVICE_BASE_URL?: string },\n  path: string,\n  contentType?: string,\n  expiresIn?: number\n) {\n  const storage = new StorageService(env);\n  return storage.generateSignedUrl(\n    {\n      path,\n      method: \"PUT\",\n      contentType,\n      expiresIn,\n    },\n    env.SERVICE_BASE_URL\n  );\n}\n\n/**\n * Generate a signed download URL\n */\nexport async function generateSignedDownloadUrl(\n  env: StorageEnv & { SERVICE_BASE_URL?: string },\n  path: string,\n  expiresIn?: number\n) {\n  const storage = new StorageService(env);\n  return storage.generateSignedUrl(\n    {\n      path,\n      method: \"GET\",\n      expiresIn,\n    },\n    env.SERVICE_BASE_URL\n  );\n}\n", "import { OpenAPIHono, createRoute } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { z } from \"zod\";\nimport {\n  CreateCampaignSchema,\n  UpdateCampaignSchema,\n  CampaignSchema,\n  CampaignWithDetailsSchema,\n  PaginationSchema,\n  CampaignParamsSchema,\n  CreativeParamsSchema,\n  CreateCreativeSchema,\n  UpdateCreativeSchema,\n  CreativeSchema,\n  AudioUploadSchema,\n  CreativeUploadSchema,\n} from \"./schemas\";\nimport { CampaignService } from \"./service\";\nimport { AudioService } from \"../audio/service\";\nimport { CreativeUploadService } from \"./creative-upload-service\";\nimport { requireScopes, hasPermissions, hasScopes } from \"../auth/middleware\";\nimport { NotFoundError } from \"../common/errors\";\nimport { JWTPayload } from \"../auth/types\";\n\n// Utility function to sign URLs in creatives\nasync function signUrlsInCreative(creative: any, audioService?: AudioService) {\n  const result = { ...creative };\n\n  if (!audioService) {\n    return result;\n  }\n\n  // Sign audio URL if present\n  if (creative.audioUrl && creative.audioUrl.startsWith(\"r2://\")) {\n    try {\n      const r2Key = creative.audioUrl.replace(\"r2://\", \"\");\n      const signedUrl = await audioService.generateSignedUrlFromKey(r2Key);\n      if (signedUrl) {\n        result.audioUrl = signedUrl;\n      }\n    } catch (error) {\n      console.warn(\"Failed to sign audioUrl for creative:\", creative.id, error);\n    }\n  }\n\n  // Sign image URL if present\n  if (creative.imageUrl && creative.imageUrl.startsWith(\"r2://\")) {\n    try {\n      const r2Key = creative.imageUrl.replace(\"r2://\", \"\");\n      const signedUrl = await audioService.generateSignedUrlFromKey(r2Key);\n      if (signedUrl) {\n        result.imageUrl = signedUrl;\n      }\n    } catch (error) {\n      console.warn(\"Failed to sign imageUrl for creative:\", creative.id, error);\n    }\n  }\n\n  return result;\n}\n\n// Get campaigns\nconst getCampaignsRoute = createRoute({\n  method: \"get\",\n  path: \"/campaigns\",\n  tags: [\"campaigns\"],\n  summary: \"Get campaigns\",\n  description: \"Get all campaigns with pagination\",\n  request: {\n    query: PaginationSchema,\n  },\n  responses: {\n    200: {\n      description: \"Campaigns retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            data: z.array(CampaignSchema),\n            pagination: z.object({\n              page: z.number(),\n              limit: z.number(),\n              total: z.number(),\n              totalPages: z.number(),\n            }),\n          }),\n        },\n      },\n    },\n  },\n});\n\n// Get campaign by ID\nconst getCampaignRoute = createRoute({\n  method: \"get\",\n  path: \"/campaigns/{campaign_id}\",\n  tags: [\"campaigns\"],\n  summary: \"Get campaign by ID\",\n  description: \"Get a single campaign with its creatives and shows\",\n  request: {\n    params: CampaignParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Campaign retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: CampaignWithDetailsSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Create campaign\nconst createCampaignRoute = createRoute({\n  method: \"post\",\n  path: \"/campaigns\",\n  tags: [\"campaigns\"],\n  summary: \"Create campaign\",\n  description: \"Create a new advertising campaign\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateCampaignSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      description: \"Campaign created successfully\",\n      content: {\n        \"application/json\": {\n          schema: CampaignSchema,\n        },\n      },\n    },\n  },\n});\n\n// Update campaign\nconst updateCampaignRoute = createRoute({\n  method: \"put\",\n  path: \"/campaigns/{campaign_id}\",\n  tags: [\"campaigns\"],\n  summary: \"Update campaign\",\n  description: \"Update an existing campaign\",\n  request: {\n    params: CampaignParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateCampaignSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      description: \"Campaign updated successfully\",\n      content: {\n        \"application/json\": {\n          schema: CampaignSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Patch campaign (partial update)\nconst patchCampaignRoute = createRoute({\n  method: \"patch\",\n  path: \"/campaigns/{campaign_id}\",\n  tags: [\"campaigns\"],\n  summary: \"Patch campaign\",\n  description:\n    \"Partially update an existing campaign (only provided fields will be updated)\",\n  request: {\n    params: CampaignParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateCampaignSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      description: \"Campaign updated successfully\",\n      content: {\n        \"application/json\": {\n          schema: CampaignSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Delete campaign\nconst deleteCampaignRoute = createRoute({\n  method: \"delete\",\n  path: \"/campaigns/{campaign_id}\",\n  tags: [\"campaigns\"],\n  summary: \"Delete campaign\",\n  description: \"Delete a campaign and all its creatives\",\n  request: {\n    params: CampaignParamsSchema,\n  },\n  responses: {\n    204: {\n      description: \"Campaign deleted successfully\",\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Get campaign creatives\nconst getCampaignCreativesRoute = createRoute({\n  method: \"get\",\n  path: \"/campaigns/{campaign_id}/creatives\",\n  tags: [\"creatives\"],\n  summary: \"Get campaign creatives\",\n  description: \"Get all creatives for a campaign\",\n  request: {\n    params: CampaignParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Creatives retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: z.array(CreativeSchema),\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Create creative\nconst createCreativeRoute = createRoute({\n  method: \"post\",\n  path: \"/campaigns/{campaign_id}/creatives\",\n  tags: [\"creatives\"],\n  summary: \"Create creative\",\n  description: \"Create a new creative for a campaign\",\n  request: {\n    params: CampaignParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateCreativeSchema.omit({ campaignId: true }),\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      description: \"Creative created successfully\",\n      content: {\n        \"application/json\": {\n          schema: CreativeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Get creative by ID\nconst getCreativeRoute = createRoute({\n  method: \"get\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}\",\n  tags: [\"creatives\"],\n  summary: \"Get creative by ID\",\n  description: \"Get a single creative\",\n  request: {\n    params: CreativeParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Creative retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: CreativeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Creative not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Update creative (full update)\nconst updateCreativeRoute = createRoute({\n  method: \"put\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}\",\n  tags: [\"creatives\"],\n  summary: \"Update creative\",\n  description: \"Update an existing creative (full update)\",\n  request: {\n    params: CreativeParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateCreativeSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      description: \"Creative updated successfully\",\n      content: {\n        \"application/json\": {\n          schema: CreativeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Creative not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Patch creative (partial update)\nconst patchCreativeRoute = createRoute({\n  method: \"patch\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}\",\n  tags: [\"creatives\"],\n  summary: \"Patch creative\",\n  description: \"Partially update an existing creative\",\n  request: {\n    params: CreativeParamsSchema,\n    body: {\n      content: {\n        \"application/json\": {\n          schema: UpdateCreativeSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    200: {\n      description: \"Creative updated successfully\",\n      content: {\n        \"application/json\": {\n          schema: CreativeSchema,\n        },\n      },\n    },\n    404: {\n      description: \"Creative not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Delete creative\nconst deleteCreativeRoute = createRoute({\n  method: \"delete\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}\",\n  tags: [\"creatives\"],\n  summary: \"Delete creative\",\n  description: \"Delete a creative\",\n  request: {\n    params: CreativeParamsSchema,\n  },\n  responses: {\n    204: {\n      description: \"Creative deleted successfully\",\n    },\n    404: {\n      description: \"Creative not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Note: Audio upload functionality to be implemented later\n\n// Get campaign shows\nconst getCampaignShowsRoute = createRoute({\n  method: \"get\",\n  path: \"/campaigns/{campaign_id}/shows\",\n  tags: [\"campaigns\"],\n  summary: \"Get campaign shows\",\n  description: \"Get all shows linked to a campaign\",\n  request: {\n    params: CampaignParamsSchema,\n  },\n  responses: {\n    200: {\n      description: \"Shows retrieved successfully\",\n      content: {\n        \"application/json\": {\n          schema: z.array(\n            z.object({\n              id: z.string(),\n              title: z.string(),\n              description: z.string(),\n              imageUrl: z.string().nullable(),\n              createdAt: z.string(),\n              updatedAt: z.string(),\n            })\n          ),\n        },\n      },\n    },\n    404: {\n      description: \"Campaign not found\",\n      content: {\n        \"application/json\": {\n          schema: z.object({ message: z.string() }),\n        },\n      },\n    },\n  },\n});\n\n// Upload creative audio route\nconst uploadCreativeAudioRoute = createRoute({\n  method: \"post\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}/audio\",\n  tags: [\"creatives\"],\n  summary: \"Upload audio file for creative\",\n  description: \"Upload an audio file for a creative\",\n  request: {\n    params: CreativeParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              audio: {\n                type: \"string\",\n                format: \"binary\",\n                description: \"Audio file to upload\",\n              },\n            },\n            required: [\"audio\"],\n          },\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: CreativeUploadSchema,\n        },\n      },\n      description: \"Audio uploaded successfully\",\n    },\n    404: {\n      description: \"Creative not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Upload creative video route\nconst uploadCreativeVideoRoute = createRoute({\n  method: \"post\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}/video\",\n  tags: [\"creatives\"],\n  summary: \"Upload video file for creative\",\n  description: \"Upload a video file for a creative\",\n  request: {\n    params: CreativeParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              video: {\n                type: \"string\",\n                format: \"binary\",\n                description: \"Video file to upload\",\n              },\n            },\n            required: [\"video\"],\n          },\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: CreativeUploadSchema,\n        },\n      },\n      description: \"Video uploaded successfully\",\n    },\n    404: {\n      description: \"Creative not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\n// Upload creative image route\nconst uploadCreativeImageRoute = createRoute({\n  method: \"post\",\n  path: \"/campaigns/{campaign_id}/creatives/{creative_id}/image\",\n  tags: [\"creatives\"],\n  summary: \"Upload image file for creative\",\n  description: \"Upload an image file for a creative\",\n  request: {\n    params: CreativeParamsSchema,\n    body: {\n      content: {\n        \"multipart/form-data\": {\n          schema: {\n            type: \"object\",\n            properties: {\n              image: {\n                type: \"string\",\n                format: \"binary\",\n                description: \"Image file to upload\",\n              },\n            },\n            required: [\"image\"],\n          },\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      content: {\n        \"application/json\": {\n          schema: CreativeUploadSchema,\n        },\n      },\n      description: \"Image uploaded successfully\",\n    },\n    404: {\n      description: \"Creative not found\",\n    },\n  },\n  security: [{ Bearer: [] }],\n});\n\nexport function createCampaignRoutes(\n  campaignService: CampaignService,\n  audioService?: AudioService,\n  creativeUploadService?: CreativeUploadService\n) {\n  const app = new OpenAPIHono();\n\n  // Apply authentication middleware\n  app.use(\"*\", requireScopes([\"campaigns:read\", \"campaigns:write\"]));\n\n  // Campaign routes\n  app.openapi(getCampaignsRoute, async (c) => {\n    const query = c.req.valid(\"query\");\n\n    try {\n      const result = await campaignService.getAllCampaigns(query);\n      return c.json(result, 200);\n    } catch (error) {\n      console.error(\"Error getting campaigns:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(getCampaignRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n\n    try {\n      const campaign = await campaignService.getCampaignByIdWithDetails(\n        campaign_id\n      );\n      if (!campaign) {\n        throw new HTTPException(404, { message: \"Campaign not found\" });\n      }\n\n      // Sign URLs in creatives if audioService is available\n      if (audioService && campaign.creatives) {\n        campaign.creatives = await Promise.all(\n          campaign.creatives.map((creative) =>\n            signUrlsInCreative(creative, audioService)\n          )\n        );\n      }\n\n      return c.json(campaign, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error getting campaign:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(createCampaignRoute, async (c) => {\n    const body = c.req.valid(\"json\");\n\n    try {\n      const campaign = await campaignService.createCampaign(body);\n      return c.json(campaign, 201);\n    } catch (error) {\n      console.error(\"Error creating campaign:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(updateCampaignRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n\n    try {\n      const campaign = await campaignService.updateCampaign(campaign_id, body);\n      return c.json(campaign, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error updating campaign:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(patchCampaignRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n\n    try {\n      const campaign = await campaignService.updateCampaign(campaign_id, body);\n      return c.json(campaign, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error patching campaign:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(deleteCampaignRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n\n    try {\n      const deleted = await campaignService.deleteCampaign(campaign_id);\n      if (!deleted) {\n        throw new HTTPException(404, { message: \"Campaign not found\" });\n      }\n      return c.body(null, 204);\n    } catch (error) {\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n      console.error(\"Error deleting campaign:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  // Creative routes\n  app.openapi(getCampaignCreativesRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n\n    try {\n      const creatives = await campaignService.getCampaignCreatives(campaign_id);\n\n      // Sign audio URLs if audioService is available\n      const signedCreatives = audioService\n        ? await Promise.all(\n            creatives.map((creative) =>\n              signUrlsInCreative(creative, audioService)\n            )\n          )\n        : creatives;\n\n      return c.json(signedCreatives, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error getting campaign creatives:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(createCreativeRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n\n    try {\n      const creative = await campaignService.createCreative(campaign_id, body);\n\n      // Sign URLs if audioService is available\n      const signedCreative = audioService\n        ? await signUrlsInCreative(creative, audioService)\n        : creative;\n\n      return c.json(signedCreative, 201);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error creating creative:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(getCreativeRoute, async (c) => {\n    const { campaign_id, creative_id } = c.req.valid(\"param\");\n\n    try {\n      const creative = await campaignService.getCreativeById(\n        campaign_id,\n        creative_id\n      );\n      if (!creative) {\n        throw new HTTPException(404, { message: \"Creative not found\" });\n      }\n\n      // Sign URLs if audioService is available\n      const signedCreative = audioService\n        ? await signUrlsInCreative(creative, audioService)\n        : creative;\n\n      return c.json(signedCreative, 200);\n    } catch (error) {\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n      console.error(\"Error getting creative:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(updateCreativeRoute, async (c) => {\n    const { campaign_id, creative_id } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n\n    try {\n      const creative = await campaignService.updateCreative(\n        campaign_id,\n        creative_id,\n        body\n      );\n\n      // Sign audio URL if audioService is available\n      const signedCreative = audioService\n        ? await signUrlsInCreative(creative, audioService)\n        : creative;\n\n      return c.json(signedCreative, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error updating creative:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(patchCreativeRoute, async (c) => {\n    const { campaign_id, creative_id } = c.req.valid(\"param\");\n    const body = c.req.valid(\"json\");\n\n    try {\n      const creative = await campaignService.updateCreative(\n        campaign_id,\n        creative_id,\n        body\n      );\n\n      // Sign audio URL if audioService is available\n      const signedCreative = audioService\n        ? await signUrlsInCreative(creative, audioService)\n        : creative;\n\n      return c.json(signedCreative, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error patching creative:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  app.openapi(deleteCreativeRoute, async (c) => {\n    const { campaign_id, creative_id } = c.req.valid(\"param\");\n\n    try {\n      const deleted = await campaignService.deleteCreative(\n        campaign_id,\n        creative_id\n      );\n      if (!deleted) {\n        throw new HTTPException(404, { message: \"Creative not found\" });\n      }\n      return c.body(null, 204);\n    } catch (error) {\n      if (error instanceof HTTPException) {\n        throw error;\n      }\n      console.error(\"Error deleting creative:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  // Note: Audio upload functionality to be implemented later\n\n  // Campaign shows\n  app.openapi(getCampaignShowsRoute, async (c) => {\n    const { campaign_id } = c.req.valid(\"param\");\n\n    try {\n      const shows = await campaignService.getCampaignShows(campaign_id);\n      return c.json(shows, 200);\n    } catch (error) {\n      if (error instanceof NotFoundError) {\n        throw new HTTPException(404, { message: error.message });\n      }\n      console.error(\"Error getting campaign shows:\", error);\n      throw new HTTPException(500, { message: \"Internal server error\" });\n    }\n  });\n\n  // Creative upload routes\n  if (creativeUploadService) {\n    app.openapi(uploadCreativeAudioRoute, async (c) => {\n      // Check auth\n      const payload = c.get(\"jwtPayload\") as JWTPayload;\n      const hasWritePermission = hasPermissions(payload, [\"campaigns:write\"]);\n      const hasWriteScope = hasScopes(payload, [\"campaigns.write\"]);\n      if (!hasWritePermission && !hasWriteScope) {\n        const problem = {\n          type: \"forbidden\",\n          title: \"Forbidden\",\n          status: 403,\n          detail:\n            \"Required permissions: campaigns:write or scope: campaigns.write\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(403, { message: JSON.stringify(problem) });\n      }\n\n      const { campaign_id, creative_id } = c.req.valid(\"param\");\n\n      try {\n        // Parse multipart form data\n        const formData = await c.req.formData();\n        const audioFile = formData.get(\"audio\") as File | null;\n\n        if (!audioFile) {\n          const problem = {\n            type: \"validation_error\",\n            title: \"Validation Error\",\n            status: 400,\n            detail: \"Audio file is required\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(400, { message: JSON.stringify(problem) });\n        }\n\n        // Convert File to Buffer\n        const buffer = Buffer.from(await audioFile.arrayBuffer());\n\n        const fileData = {\n          fileName: audioFile.name,\n          fileSize: audioFile.size,\n          mimeType: audioFile.type,\n          buffer,\n        };\n\n        const upload = await creativeUploadService.uploadCreativeAudio(\n          campaign_id,\n          creative_id,\n          fileData\n        );\n        return c.json(upload, 201);\n      } catch (error) {\n        if (error instanceof NotFoundError) {\n          const problem = {\n            type: \"not_found\",\n            title: \"Not Found\",\n            status: 404,\n            detail: \"Creative not found\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(404, { message: JSON.stringify(problem) });\n        }\n\n        // Log the actual error for debugging\n        console.error(\"Creative audio upload error:\", error);\n\n        // Re-throw to let the global error handler deal with it\n        throw error;\n      }\n    });\n\n    app.openapi(uploadCreativeVideoRoute, async (c) => {\n      // Check auth\n      const payload = c.get(\"jwtPayload\") as JWTPayload;\n      const hasWritePermission = hasPermissions(payload, [\"campaigns:write\"]);\n      const hasWriteScope = hasScopes(payload, [\"campaigns.write\"]);\n      if (!hasWritePermission && !hasWriteScope) {\n        const problem = {\n          type: \"forbidden\",\n          title: \"Forbidden\",\n          status: 403,\n          detail:\n            \"Required permissions: campaigns:write or scope: campaigns.write\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(403, { message: JSON.stringify(problem) });\n      }\n\n      const { campaign_id, creative_id } = c.req.valid(\"param\");\n\n      try {\n        // Parse multipart form data\n        const formData = await c.req.formData();\n        const videoFile = formData.get(\"video\") as File | null;\n\n        if (!videoFile) {\n          const problem = {\n            type: \"validation_error\",\n            title: \"Validation Error\",\n            status: 400,\n            detail: \"Video file is required\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(400, { message: JSON.stringify(problem) });\n        }\n\n        // Convert File to Buffer\n        const buffer = Buffer.from(await videoFile.arrayBuffer());\n\n        const fileData = {\n          fileName: videoFile.name,\n          fileSize: videoFile.size,\n          mimeType: videoFile.type,\n          buffer,\n        };\n\n        const upload = await creativeUploadService.uploadCreativeVideo(\n          campaign_id,\n          creative_id,\n          fileData\n        );\n        return c.json(upload, 201);\n      } catch (error) {\n        if (error instanceof NotFoundError) {\n          const problem = {\n            type: \"not_found\",\n            title: \"Not Found\",\n            status: 404,\n            detail: \"Creative not found\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(404, { message: JSON.stringify(problem) });\n        }\n\n        // Log the actual error for debugging\n        console.error(\"Creative video upload error:\", error);\n\n        // Re-throw to let the global error handler deal with it\n        throw error;\n      }\n    });\n\n    app.openapi(uploadCreativeImageRoute, async (c) => {\n      // Check auth\n      const payload = c.get(\"jwtPayload\") as JWTPayload;\n      const hasWritePermission = hasPermissions(payload, [\"campaigns:write\"]);\n      const hasWriteScope = hasScopes(payload, [\"campaigns.write\"]);\n      if (!hasWritePermission && !hasWriteScope) {\n        const problem = {\n          type: \"forbidden\",\n          title: \"Forbidden\",\n          status: 403,\n          detail:\n            \"Required permissions: campaigns:write or scope: campaigns.write\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(403, { message: JSON.stringify(problem) });\n      }\n\n      const { campaign_id, creative_id } = c.req.valid(\"param\");\n\n      try {\n        // Parse multipart form data\n        const formData = await c.req.formData();\n        const imageFile = formData.get(\"image\") as File | null;\n\n        if (!imageFile) {\n          const problem = {\n            type: \"validation_error\",\n            title: \"Validation Error\",\n            status: 400,\n            detail: \"Image file is required\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(400, { message: JSON.stringify(problem) });\n        }\n\n        // Convert File to Buffer\n        const buffer = Buffer.from(await imageFile.arrayBuffer());\n\n        const fileData = {\n          fileName: imageFile.name,\n          fileSize: imageFile.size,\n          mimeType: imageFile.type,\n          buffer,\n        };\n\n        const upload = await creativeUploadService.uploadCreativeImage(\n          campaign_id,\n          creative_id,\n          fileData\n        );\n        return c.json(upload, 201);\n      } catch (error) {\n        if (error instanceof NotFoundError) {\n          const problem = {\n            type: \"not_found\",\n            title: \"Not Found\",\n            status: 404,\n            detail: \"Creative not found\",\n            instance: c.req.path,\n          };\n          throw new HTTPException(404, { message: JSON.stringify(problem) });\n        }\n\n        // Log the actual error for debugging\n        console.error(\"Creative image upload error:\", error);\n\n        // Re-throw to let the global error handler deal with it\n        throw error;\n      }\n    });\n  }\n\n  return app;\n}\n", "import { z } from \"zod\";\n\n// Campaign status enum\nexport const CampaignStatus = z.enum([\"draft\", \"active\", \"paused\", \"ended\"]);\n\n// Creative placement type enum\nexport const PlacementType = z.enum([\"pre\", \"mid\", \"post\", \"any\"]);\n\n// Creative type enum\nexport const CreativeType = z.enum([\"audio\", \"video\", \"display\"]);\n\n// Base campaign schema\nexport const CampaignSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  advertiser: z.string().nullable(),\n  startDate: z.string().nullable(),\n  endDate: z.string().nullable(),\n  targetImpressions: z.number().nullable(),\n  priority: z.number(),\n  status: CampaignStatus,\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\n// Create campaign schema (without auto-generated fields)\nexport const CreateCampaignSchema = z\n  .object({\n    name: z.string().min(1, \"Campaign name is required\"),\n    advertiser: z.string().optional(),\n    startDate: z\n      .string()\n      .refine((date) => !isNaN(Date.parse(date)), {\n        message: \"Invalid start date format\",\n      })\n      .optional(),\n    endDate: z\n      .string()\n      .refine((date) => !isNaN(Date.parse(date)), {\n        message: \"Invalid end date format\",\n      })\n      .optional(),\n    targetImpressions: z.number().positive().optional(),\n    priority: z.number().min(1).max(10).default(5),\n    status: CampaignStatus.default(\"draft\"),\n    showIds: z\n      .array(z.string())\n      .min(1, \"At least one show must be selected\")\n      .optional(),\n  })\n  .refine(\n    (data) => {\n      // If status is active, require startDate, endDate, and showIds\n      if (data.status === \"active\") {\n        return data.startDate && data.endDate && data.showIds;\n      }\n      return true;\n    },\n    {\n      message:\n        \"startDate, endDate, and showIds are required when status is active\",\n    }\n  )\n  .refine(\n    (data) => {\n      // Only validate date order if both dates are provided\n      if (data.startDate && data.endDate) {\n        return new Date(data.startDate) < new Date(data.endDate);\n      }\n      return true;\n    },\n    {\n      message: \"End date must be after start date\",\n      path: [\"endDate\"],\n    }\n  );\n\n// Update campaign schema (base without refinement)\nconst UpdateCampaignBaseSchema = z.object({\n  name: z.string().min(1, \"Campaign name is required\").optional(),\n  advertiser: z.string().optional(),\n  startDate: z\n    .string()\n    .refine((date) => !isNaN(Date.parse(date)), {\n      message: \"Invalid start date format\",\n    })\n    .optional(),\n  endDate: z\n    .string()\n    .refine((date) => !isNaN(Date.parse(date)), {\n      message: \"Invalid end date format\",\n    })\n    .optional(),\n  targetImpressions: z.number().positive().optional(),\n  priority: z.number().min(1).max(10).optional(),\n  status: CampaignStatus.optional(),\n  showIds: z.array(z.string()).optional(),\n});\n\nexport const UpdateCampaignSchema = UpdateCampaignBaseSchema.refine(\n  (data) => {\n    // If status is being set to active, require startDate, endDate, and showIds\n    if (data.status === \"active\") {\n      return data.startDate && data.endDate && data.showIds;\n    }\n    return true;\n  },\n  {\n    message:\n      \"startDate, endDate, and showIds are required when status is active\",\n  }\n).refine(\n  (data) => {\n    if (data.startDate && data.endDate) {\n      return new Date(data.startDate) < new Date(data.endDate);\n    }\n    return true;\n  },\n  {\n    message: \"End date must be after start date\",\n    path: [\"endDate\"],\n  }\n);\n\n// Base creative schema\nexport const CreativeSchema = z.object({\n  id: z.string(),\n  campaignId: z.string(),\n  name: z.string(),\n  type: CreativeType,\n  audioUrl: z.string().nullable(),\n  imageUrl: z.string().nullable(),\n  duration: z.number().nullable(),\n  placementType: PlacementType,\n  language: z.string().nullable(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\n// Create creative schema\nexport const CreateCreativeSchema = z.object({\n  campaignId: z.string(),\n  name: z.string().min(1, \"Creative name is required\"),\n  type: CreativeType.default(\"audio\"),\n  audioUrl: z.string().url(\"Invalid audio URL\").optional(),\n  imageUrl: z.string().url(\"Invalid image URL\").optional(),\n  duration: z.number().positive(\"Duration must be positive\").optional(),\n  placementType: PlacementType.default(\"any\"),\n  language: z.string().length(2).optional(), // ISO 639-1 language code\n});\n\n// Update creative schema\nexport const UpdateCreativeSchema = CreateCreativeSchema.partial().omit({\n  campaignId: true,\n});\n\n// Campaign with creatives and shows\nexport const CampaignWithDetailsSchema = CampaignSchema.extend({\n  creatives: z.array(CreativeSchema),\n  shows: z.array(\n    z.object({\n      id: z.string(),\n      title: z.string(),\n    })\n  ),\n});\n\n// Pagination schema\nexport const PaginationSchema = z.object({\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(1).max(100).default(20),\n});\n\n// URL parameters\nexport const CampaignParamsSchema = z.object({\n  campaign_id: z.string(),\n});\n\nexport const CreativeParamsSchema = z.object({\n  campaign_id: z.string(),\n  creative_id: z.string(),\n});\n\n// Creative upload schemas\nexport const CreativeUploadSchema = z.object({\n  id: z.string().uuid(),\n  campaignId: z.string().uuid(),\n  creativeId: z.string().uuid(),\n  fileName: z.string(),\n  fileSize: z.number().int().positive(),\n  mimeType: z.string(),\n  url: z.string().url(),\n  uploadedAt: z.string().datetime(),\n});\n\n// Audio upload for creatives (legacy - kept for backward compatibility)\nexport const AudioUploadSchema = z.object({\n  fileName: z.string(),\n  fileSize: z.number(),\n  mimeType: z.string(),\n  url: z.string(),\n});\n\n// Types\nexport type Campaign = z.infer<typeof CampaignSchema>;\nexport type CreateCampaign = z.infer<typeof CreateCampaignSchema>;\nexport type UpdateCampaign = z.infer<typeof UpdateCampaignSchema>;\n\nexport type Creative = z.infer<typeof CreativeSchema>;\nexport type CreateCreative = z.infer<typeof CreateCreativeSchema>;\nexport type UpdateCreative = z.infer<typeof UpdateCreativeSchema>;\n\nexport type CampaignWithDetails = z.infer<typeof CampaignWithDetailsSchema>;\nexport type Pagination = z.infer<typeof PaginationSchema>;\nexport type CampaignParams = z.infer<typeof CampaignParamsSchema>;\nexport type CreativeParams = z.infer<typeof CreativeParamsSchema>;\nexport type CreativeUpload = z.infer<typeof CreativeUploadSchema>;\nexport type AudioUpload = z.infer<typeof AudioUploadSchema>;\n", "import { createRoute, z } from \"@hono/zod-openapi\";\nimport { OpenAPIHono } from \"@hono/zod-openapi\";\nimport { HTTPException } from \"hono/http-exception\";\nimport { JWTPayload } from \"../auth/types\";\nimport { OrganizationService } from \"./service\";\n\n// Schemas\nconst OrganizationSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  auth0_id: z.string(),\n});\n\nconst CreateOrganizationSchema = z.object({\n  name: z.string().min(1).max(100),\n  display_name: z.string().max(100).optional(),\n});\n\n// Routes\n\nconst createOrganizationRoute = createRoute({\n  method: \"post\",\n  path: \"/organizations\",\n  tags: [\"Organizations\"],\n  summary: \"Create a new organization\",\n  description: \"Create a new organization and assign the user as admin\",\n  request: {\n    body: {\n      content: {\n        \"application/json\": {\n          schema: CreateOrganizationSchema,\n        },\n      },\n    },\n  },\n  responses: {\n    201: {\n      description: \"Organization created successfully\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            id: z.string(),\n            name: z.string(),\n            auth0_id: z.string(),\n            created_at: z.string(),\n          }),\n        },\n      },\n    },\n    400: {\n      description: \"Bad request\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            type: z.string(),\n            title: z.string(),\n            status: z.number(),\n            detail: z.string(),\n          }),\n        },\n      },\n    },\n    401: {\n      description: \"Unauthorized\",\n      content: {\n        \"application/json\": {\n          schema: z.object({\n            type: z.string(),\n            title: z.string(),\n            status: z.number(),\n            detail: z.string(),\n          }),\n        },\n      },\n    },\n  },\n});\n\nexport function registerOrganizationRoutes(\n  app: OpenAPIHono,\n  organizationService: OrganizationService\n) {\n  // Get user's organizations\n  app.openapi(\n    createRoute({\n      method: \"get\",\n      path: \"/organizations\",\n      tags: [\"Organizations\"],\n      summary: \"Get user's organizations\",\n      description:\n        \"Get all organizations that the authenticated user is a member of\",\n      responses: {\n        200: {\n          description: \"User's organizations\",\n          content: {\n            \"application/json\": {\n              schema: z.array(OrganizationSchema),\n            },\n          },\n        },\n        401: {\n          description: \"Unauthorized\",\n          content: {\n            \"application/json\": {\n              schema: z.object({\n                type: z.string(),\n                title: z.string(),\n                status: z.number(),\n                detail: z.string(),\n              }),\n            },\n          },\n        },\n      },\n    }),\n    async (c) => {\n      const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n      if (!payload.sub) {\n        const problem = {\n          type: \"unauthorized\",\n          title: \"Unauthorized\",\n          status: 401,\n          detail: \"Invalid user ID in token\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(401, { message: JSON.stringify(problem) });\n      }\n\n      try {\n        const organizations = await organizationService.getUserOrganizations(\n          payload.sub\n        );\n        return c.json(organizations, 200);\n      } catch (error) {\n        console.error(\"Error getting user organizations:\", error);\n        const problem = {\n          type: \"internal_error\",\n          title: \"Internal Server Error\",\n          status: 500,\n          detail: \"Failed to fetch organizations\",\n          instance: c.req.path,\n        };\n        throw new HTTPException(500, { message: JSON.stringify(problem) });\n      }\n    }\n  );\n\n  // Create organization\n  app.openapi(createOrganizationRoute, async (c) => {\n    const payload = c.get(\"jwtPayload\") as JWTPayload;\n\n    if (!payload.sub) {\n      const problem = {\n        type: \"unauthorized\",\n        title: \"Unauthorized\",\n        status: 401,\n        detail: \"Invalid user ID in token\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(401, { message: JSON.stringify(problem) });\n    }\n\n    const orgData = c.req.valid(\"json\");\n\n    try {\n      const result = await organizationService.createOrganization(\n        orgData.name,\n        payload.sub,\n        orgData.display_name\n      );\n\n      return c.json(\n        {\n          id: result.organization.id,\n          name: result.organization.name,\n          auth0_id: result.organization.auth0OrgId,\n          created_at: result.organization.createdAt,\n        },\n        201\n      );\n    } catch (error) {\n      console.error(\"Error creating organization:\", error);\n      const problem = {\n        type: \"internal_error\",\n        title: \"Internal Server Error\",\n        status: 500,\n        detail: \"Failed to create organization\",\n        instance: c.req.path,\n      };\n      throw new HTTPException(500, { message: JSON.stringify(problem) });\n    }\n  });\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { PodcastEventType } from \"./types\";\n\n// Edge-compatible CloudEvent interface\ninterface CloudEventData {\n  specversion: string;\n  type: string;\n  source: string;\n  id: string;\n  time: string;\n  data: any;\n  subject?: string;\n}\n\nexport class EventPublisher {\n  private source: string;\n\n  constructor() {\n    this.source = process.env.SERVICE_NAME || \"podcast-service\";\n  }\n\n  async publish(\n    eventType: PodcastEventType,\n    data: any,\n    subject?: string\n  ): Promise<void> {\n    const event: CloudEventData = {\n      specversion: \"1.0\",\n      type: eventType,\n      source: this.source,\n      id: uuidv4(),\n      time: new Date().toISOString(),\n      data,\n      subject,\n    };\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { ShowRepository } from \"./repository\";\nimport { CreateShow, UpdateShow, Pagination } from \"./schemas\";\nimport { EventPublisher } from \"../events/publisher\";\n\nexport class ShowService {\n  constructor(\n    private showRepository: ShowRepository,\n    private eventPublisher: EventPublisher\n  ) {}\n\n  async getAllShows(pagination: Pagination) {\n    return await this.showRepository.findAll(pagination);\n  }\n\n  async getShowById(id: string) {\n    return await this.showRepository.findById(id);\n  }\n\n  async createShow(data: CreateShow, organizationId: string) {\n    const id = uuidv4();\n    const show = await this.showRepository.create({\n      ...data,\n      id,\n      organizationId,\n    });\n\n    // Publish event\n    await this.eventPublisher.publish(\"show.created\", show, show.id);\n\n    return show;\n  }\n\n  async updateShow(id: string, data: UpdateShow) {\n    const show = await this.showRepository.update(id, data);\n\n    // Publish event\n    await this.eventPublisher.publish(\"show.updated\", show, show.id);\n\n    return show;\n  }\n\n  async deleteShow(id: string) {\n    const show = await this.showRepository.findById(id);\n    if (!show) {\n      return false;\n    }\n\n    await this.showRepository.delete(id);\n\n    // Publish event\n    await this.eventPublisher.publish(\"show.deleted\", { id }, id);\n\n    return true;\n  }\n}\n", "import { eq, and } from \"drizzle-orm\";\nimport { getDatabase } from \"../database/client\";\nimport { episodes } from \"../database/schema\";\nimport { CreateEpisode, UpdateEpisode, Pagination } from \"./schemas\";\nimport { NotFoundError } from \"../common/errors\";\n\nexport class EpisodeRepository {\n  private db;\n\n  constructor(database?: D1Database) {\n    this.db = getDatabase(database);\n  }\n\n  async findByShowId(showId: string, { limit, offset }: Pagination) {\n    return await this.db\n      .select()\n      .from(episodes)\n      .where(eq(episodes.showId, showId))\n      .limit(limit)\n      .offset(offset)\n      .orderBy(episodes.createdAt);\n  }\n\n  async findById(showId: string, episodeId: string) {\n    const result = await this.db\n      .select()\n      .from(episodes)\n      .where(and(eq(episodes.showId, showId), eq(episodes.id, episodeId)))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async findByIdOnly(episodeId: string) {\n    const result = await this.db\n      .select()\n      .from(episodes)\n      .where(eq(episodes.id, episodeId))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async create(\n    showId: string,\n    data: CreateEpisode & { id: string; organizationId: string }\n  ) {\n    const now = new Date().toISOString();\n\n    const newEpisode = {\n      ...data,\n      showId,\n      published: false,\n      publishedAt: null,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    await this.db.insert(episodes).values(newEpisode);\n    return newEpisode;\n  }\n\n  async update(showId: string, episodeId: string, data: UpdateEpisode) {\n    const existing = await this.findById(showId, episodeId);\n    if (!existing) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    const updatedEpisode = {\n      ...existing,\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n\n    await this.db\n      .update(episodes)\n      .set({\n        ...data,\n        updatedAt: updatedEpisode.updatedAt,\n      })\n      .where(and(eq(episodes.showId, showId), eq(episodes.id, episodeId)));\n\n    return updatedEpisode;\n  }\n\n  async updateByIdOnly(episodeId: string, data: UpdateEpisode) {\n    const existing = await this.findByIdOnly(episodeId);\n    if (!existing) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    const updatedEpisode = {\n      ...existing,\n      ...data,\n      updatedAt: new Date().toISOString(),\n    };\n\n    await this.db\n      .update(episodes)\n      .set({\n        ...data,\n        updatedAt: updatedEpisode.updatedAt,\n      })\n      .where(eq(episodes.id, episodeId));\n\n    return updatedEpisode;\n  }\n\n  async publish(showId: string, episodeId: string) {\n    const existing = await this.findById(showId, episodeId);\n    if (!existing) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    const now = new Date().toISOString();\n    const updatedEpisode = {\n      ...existing,\n      published: true,\n      publishedAt: now,\n      updatedAt: now,\n    };\n\n    await this.db\n      .update(episodes)\n      .set({\n        published: true,\n        publishedAt: now,\n        updatedAt: now,\n      })\n      .where(and(eq(episodes.showId, showId), eq(episodes.id, episodeId)));\n\n    return updatedEpisode;\n  }\n\n  async delete(showId: string, episodeId: string) {\n    const existing = await this.findById(showId, episodeId);\n    if (!existing) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    await this.db\n      .delete(episodes)\n      .where(and(eq(episodes.showId, showId), eq(episodes.id, episodeId)));\n\n    return true;\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { EpisodeRepository } from \"./repository\";\nimport { CreateEpisode, UpdateEpisode, Pagination } from \"./schemas\";\nimport { EventPublisher } from \"../events/publisher\";\nimport { TaskService } from \"../tasks/service\";\n\nexport class EpisodeService {\n  constructor(\n    private episodeRepository: EpisodeRepository,\n    private eventPublisher: EventPublisher,\n    private taskService?: TaskService\n  ) {}\n\n  async getEpisodesByShowId(showId: string, pagination: Pagination) {\n    return await this.episodeRepository.findByShowId(showId, pagination);\n  }\n\n  async getEpisodeById(showId: string, episodeId: string) {\n    return await this.episodeRepository.findById(showId, episodeId);\n  }\n\n  async createEpisode(\n    showId: string,\n    data: CreateEpisode,\n    organizationId: string\n  ) {\n    const id = uuidv4();\n    const episode = await this.episodeRepository.create(showId, {\n      ...data,\n      id,\n      organizationId,\n    });\n\n    // Publish event\n    await this.eventPublisher.publish(\"episode.created\", episode, episode.id);\n\n    return episode;\n  }\n\n  async updateEpisode(showId: string, episodeId: string, data: UpdateEpisode) {\n    const episode = await this.episodeRepository.update(\n      showId,\n      episodeId,\n      data\n    );\n\n    // Publish event\n    await this.eventPublisher.publish(\"episode.updated\", episode, episode.id);\n\n    return episode;\n  }\n\n  async publishEpisode(showId: string, episodeId: string) {\n    const episode = await this.episodeRepository.publish(showId, episodeId);\n\n    // Publish event\n    await this.eventPublisher.publish(\"episode.published\", episode, episode.id);\n\n    return episode;\n  }\n\n  async deleteEpisode(showId: string, episodeId: string) {\n    const episode = await this.episodeRepository.findById(showId, episodeId);\n    if (!episode) {\n      return false;\n    }\n\n    await this.episodeRepository.delete(showId, episodeId);\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"episode.deleted\",\n      { id: episodeId, showId },\n      episodeId\n    );\n\n    return true;\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { AudioRepository } from \"./repository\";\nimport { EventPublisher } from \"../events/publisher\";\nimport { EpisodeRepository } from \"../episodes/repository\";\nimport { NotFoundError } from \"../common/errors\";\nimport { R2PreSignedUrlGenerator } from \"../utils\";\n\nexport class AudioService {\n  private audioRepo: AudioRepository;\n  private eventPublisher: EventPublisher;\n  private episodeRepo: EpisodeRepository;\n  private audioProcessingWorkflow?: Workflow;\n  private bucket: R2Bucket;\n  private presignedUrlGenerator: R2PreSignedUrlGenerator | null = null;\n  private database?: D1Database;\n\n  constructor(\n    database?: D1Database,\n    bucket?: R2Bucket,\n    eventPublisher?: EventPublisher,\n    r2AccessKeyId?: string,\n    r2SecretAccessKey?: string,\n    r2Endpoint?: string,\n    audioProcessingWorkflow?: Workflow\n  ) {\n    this.database = database;\n    this.audioRepo = new AudioRepository(database);\n    this.episodeRepo = new EpisodeRepository(database);\n    this.eventPublisher = eventPublisher || new EventPublisher();\n    this.audioProcessingWorkflow = audioProcessingWorkflow;\n    this.bucket = bucket as R2Bucket;\n\n    console.log(\n      `AudioService initialized with workflow: ${!!audioProcessingWorkflow}`\n    );\n\n    // Initialize pre-signed URL generator if credentials are available\n    if (r2AccessKeyId && r2SecretAccessKey) {\n      console.log(\n        `Initializing R2PreSignedUrlGenerator with endpoint: ${r2Endpoint}`\n      );\n      this.presignedUrlGenerator = new R2PreSignedUrlGenerator(\n        r2AccessKeyId,\n        r2SecretAccessKey,\n        r2Endpoint\n      );\n    } else {\n      console.log(\n        `R2 credentials not available - r2AccessKeyId: ${!!r2AccessKeyId}, r2SecretAccessKey: ${!!r2SecretAccessKey}`\n      );\n    }\n  }\n\n  async uploadAudio(\n    showId: string,\n    episodeId: string,\n    file: {\n      fileName: string;\n      fileSize: number;\n      mimeType: string;\n      buffer: Buffer;\n    }\n  ) {\n    // Verify episode exists\n    const episode = await this.episodeRepo.findById(showId, episodeId);\n    if (!episode) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    const audioId = uuidv4();\n    const fileName = file.fileName;\n    const key = `audio/${showId}/${episodeId}/${audioId}/${fileName}`;\n\n    let url: string;\n    let signedUrl: string;\n\n    if (this.bucket) {\n      // Upload to R2 bucket\n      await this.bucket.put(key, file.buffer, {\n        httpMetadata: {\n          contentType: file.mimeType,\n        },\n      });\n\n      // Store the R2 key with a special prefix for database storage\n      url = `r2://${key}`;\n\n      // Generate URL for immediate use and episode update\n      if (this.presignedUrlGenerator) {\n        try {\n          // Use direct URL with custom domain if available\n          const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n            \"podcast-service-assets\",\n            key\n          );\n          signedUrl = directUrl || url; // Fall back to r2:// URL if no custom domain\n        } catch (error) {\n          console.warn(\"Failed to generate URL, using r2:// fallback:\", error);\n          signedUrl = url;\n        }\n      } else {\n        console.warn(\"No R2 credentials available for URL generation\");\n        signedUrl = url;\n      }\n    } else {\n      // Fallback for development/testing\n      url = `https://storage.example.com/audio/${audioId}/${fileName}`;\n      signedUrl = url;\n    }\n\n    // Save audio metadata with R2 key\n    let audioUpload;\n    try {\n      console.log(`Creating audio record for episode ${episodeId}`);\n      audioUpload = await this.audioRepo.create({\n        id: audioId,\n        episodeId,\n        fileName: file.fileName,\n        fileSize: file.fileSize,\n        mimeType: file.mimeType,\n        url, // Store R2 key (r2://) for regenerating signed URLs\n      });\n      console.log(`Audio record created successfully: ${audioUpload.id}`);\n    } catch (error) {\n      console.error(\"Failed to create audio record:\", error);\n      throw new Error(\n        `Database error: Failed to create audio record - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Update episode with R2 key (NOT signed URL)\n    try {\n      console.log(`Updating episode ${episodeId} with audio URL`);\n      await this.episodeRepo.update(showId, episodeId, {\n        audioUrl: url, // Store R2 key, sign on-demand when reading\n      });\n      console.log(`Episode updated successfully`);\n    } catch (error) {\n      console.error(\"Failed to update episode:\", error);\n      throw new Error(\n        `Database error: Failed to update episode - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Publish event with R2 key (generate signed URL for event payload)\n    try {\n      console.log(`Publishing audio.uploaded event`);\n      await this.eventPublisher.publish(\n        \"audio.uploaded\",\n        {\n          ...audioUpload,\n          url: signedUrl, // Include signed URL in event for immediate use\n        },\n        audioUpload.id\n      );\n      console.log(`Event published successfully`);\n    } catch (error) {\n      console.error(\"Failed to publish event:\", error);\n      throw new Error(\n        `Event error: Failed to publish audio.uploaded event - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Process uploaded audio with workflow or fallback to tasks\n    try {\n      console.log(`Starting audio processing workflow`);\n      await this.processUploadedAudio(episodeId, url, 600); // Pass R2 key and 10-minute chunks for nova-3\n      console.log(`Audio processing workflow started successfully`);\n    } catch (error) {\n      console.error(\"Failed to start audio processing:\", error);\n      throw new Error(\n        `Workflow error: Failed to start audio processing - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Return upload info with signed URL for immediate use\n    return {\n      ...audioUpload,\n      url: signedUrl,\n    };\n  }\n\n  // Process uploaded audio by creating a task that will start the workflow\n  private async processUploadedAudio(\n    episodeId: string,\n    audioR2Key: string, // Changed parameter name to be clearer\n    chunkDuration: number = 600 // Default to 10 minutes for nova-3\n  ): Promise<void> {\n    console.log(\n      `Creating audio processing task for uploaded audio: episodeId=${episodeId}`\n    );\n\n    try {\n      // Get the episode to find the show ID\n      const episode = await this.episodeRepo.findByIdOnly(episodeId);\n      if (!episode) {\n        throw new Error(`Episode ${episodeId} not found`);\n      }\n\n      // Get the show to determine the language\n      const { ShowRepository } = await import(\"../shows/repository.js\");\n      const showRepo = new ShowRepository(this.database);\n      const show = await showRepo.findById(episode.showId);\n\n      // Use show language if available, otherwise fall back to environment variable or \"en\"\n      const transcriptionLanguage =\n        show?.language || process.env.DEFAULT_TRANSCRIPTION_LANGUAGE || \"en\";\n\n      console.log(\n        `Using transcription language: ${transcriptionLanguage} for show ${episode.showId}`\n      );\n\n      // Import TaskService dynamically to avoid circular dependencies\n      const { TaskService } = await import(\"../tasks/service.js\");\n\n      // Create a TaskService instance with workflow support\n      console.log(\n        `Creating TaskService with workflow: ${!!this.audioProcessingWorkflow}`\n      );\n      const taskService = new TaskService(\n        this.database,\n        this.audioProcessingWorkflow\n      );\n\n      // Create an audio_processing task with the required payload\n      const task = await taskService.createTask(\"audio_processing\", {\n        episodeId,\n        audioR2Key, // Use R2 key instead of signed URL\n        chunkDuration,\n        encodingFormats: [\"mp3_128\"], // Use MP3 format with auto-adjusted bitrate based on mono/stereo\n        transcriptionLanguage,\n      });\n\n      console.log(\n        `Created audio processing task ${task.id} for episode ${episodeId}`\n      );\n\n      // Generate signed URL for event payload (events may need accessible URLs)\n      let eventSignedUrl = audioR2Key;\n      if (this.presignedUrlGenerator && audioR2Key.startsWith(\"r2://\")) {\n        try {\n          eventSignedUrl =\n            await this.presignedUrlGenerator.generatePresignedUrl(\n              audioR2Key.replace(\"r2://\", \"\"),\n              \"get\",\n              3600 // 1 hour\n            );\n        } catch (error) {\n          console.warn(\n            \"Failed to generate signed URL for event payload:\",\n            error\n          );\n        }\n      }\n\n      // Publish task created event (reusing existing workflow event type)\n      console.log(`Publishing workflow started event for episode ${episodeId}`);\n      await this.eventPublisher.publish(\n        \"episode.audio_processing_workflow_started\",\n        {\n          episodeId,\n          taskId: task.id,\n          audioUrl: eventSignedUrl,\n          audioR2Key, // Include R2 key for workflow consumers\n          type: \"task\",\n          message: \"Audio processing task created and workflow started\",\n        },\n        episodeId\n      );\n      console.log(`Workflow started event published successfully`);\n    } catch (error) {\n      console.error(\n        `Failed to create audio processing task for episode ${episodeId}:`,\n        error\n      );\n      throw new Error(\n        `Task creation failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n\n  async getAudioMetadata(showId: string, episodeId: string) {\n    const audioData = await this.audioRepo.findByEpisodeId(showId, episodeId);\n\n    if (!audioData) {\n      return null;\n    }\n\n    // Generate fresh pre-signed URL if we have the generator and URL contains an R2 key\n    if (this.presignedUrlGenerator && audioData.url.startsWith(\"r2://\")) {\n      const key = audioData.url.replace(\"r2://\", \"\");\n      try {\n        const signedUrl = await this.presignedUrlGenerator.generatePresignedUrl(\n          \"podcast-service-assets\",\n          key,\n          28800 // 8 hours\n        );\n\n        return {\n          ...audioData,\n          url: signedUrl,\n        };\n      } catch (error) {\n        console.warn(\"Failed to generate fresh pre-signed URL:\", error);\n      }\n    }\n\n    return audioData;\n  }\n\n  async getR2Object(key: string): Promise<R2Object | null> {\n    if (!this.bucket) {\n      throw new Error(\"R2 bucket not available\");\n    }\n\n    try {\n      const object = await this.bucket.get(key);\n      return object;\n    } catch (error) {\n      console.error(\"Error getting R2 object:\", error);\n      return null;\n    }\n  }\n\n  // Utility method to generate signed URL from R2 key\n  async generateSignedUrlFromKey(r2Key: string): Promise<string | null> {\n    if (!this.presignedUrlGenerator) {\n      return null;\n    }\n\n    try {\n      // Use direct URL with custom domain if available\n      // Returns null if no custom domain is configured (avoiding broken cloudflarestorage.com URLs)\n      return this.presignedUrlGenerator.generateDirectUrl(\n        \"podcast-service-assets\",\n        r2Key\n      );\n    } catch (error) {\n      console.warn(\"Failed to generate URL for key:\", r2Key, error);\n      return null;\n    }\n  }\n\n  async generatePresignedUrlFromKey(r2Key: string): Promise<string | null> {\n    if (!this.presignedUrlGenerator) {\n      return null;\n    }\n\n    try {\n      // Use presigned URL for container/server-to-server access\n      return await this.presignedUrlGenerator.generatePresignedUrl(\n        \"podcast-service-assets\",\n        r2Key,\n        28800 // 8 hours\n      );\n    } catch (error) {\n      console.warn(\"Failed to generate presigned URL for key:\", r2Key, error);\n      return null;\n    }\n  }\n\n  /**\n   * Creates an audio processing task that will start a workflow\n   * This is the new recommended way to process audio\n   */\n  async createAudioProcessingTask(\n    episodeId: string,\n    audioR2Key: string,\n    options?: {\n      encodingFormats?: string[];\n    }\n  ) {\n    // Get the episode to find the show ID\n    const episode = await this.episodeRepo.findByIdOnly(episodeId);\n    if (!episode) {\n      throw new Error(`Episode ${episodeId} not found`);\n    }\n\n    // Get the show to determine the language\n    const { ShowRepository } = await import(\"../shows/repository.js\");\n    const showRepo = new ShowRepository(this.database);\n    const show = await showRepo.findById(episode.showId);\n\n    // Use show language if available, otherwise fall back to environment variable or \"en\"\n    const transcriptionLanguage =\n      show?.language || process.env.DEFAULT_TRANSCRIPTION_LANGUAGE || \"en\";\n\n    console.log(\n      `Using transcription language: ${transcriptionLanguage} for show ${episode.showId}`\n    );\n\n    // Import TaskService to create the task\n    const { TaskService } = await import(\"../tasks/service.js\");\n\n    // Create a temporary TaskService instance with workflow support\n    // In a real implementation, this should be injected as a dependency\n    const taskService = new TaskService(\n      this.database,\n      this.audioProcessingWorkflow\n    );\n\n    // Get transcription model from environment or default to nova-3\n    const transcriptionModel =\n      process.env.DEFAULT_TRANSCRIPTION_MODEL || \"@cf/deepgram/nova-3\";\n\n    // Set chunk duration based on model: 30 seconds for whisper, 10 minutes for nova-3\n    const defaultChunkDuration = transcriptionModel.includes(\"whisper\")\n      ? 30\n      : 600;\n\n    const payload = {\n      episodeId,\n      audioR2Key,\n      chunkDuration: defaultChunkDuration,\n      encodingFormats: options?.encodingFormats || [\"mp3_128\"],\n      transcriptionModel,\n      useNova3Features: transcriptionModel.includes(\"nova\"),\n      transcriptionLanguage,\n    };\n\n    // Create an audio_processing task\n    const task = await taskService.createTask(\"audio_processing\", payload);\n\n    console.log(\n      `Created audio processing task ${task.id} for episode ${episodeId} using ${transcriptionModel} (${payload.chunkDuration}s chunks) with language ${transcriptionLanguage}`\n    );\n\n    return task;\n  }\n}\n", "import { eq, and } from \"drizzle-orm\";\nimport { getDatabase } from \"../database/client\";\nimport { audioUploads, episodes } from \"../database/schema\";\nimport { NotFoundError } from \"../common/errors\";\n\nexport interface AudioUploadData {\n  id: string;\n  episodeId: string;\n  fileName: string;\n  fileSize: number;\n  mimeType: string;\n  url: string;\n}\n\nexport class AudioRepository {\n  private db;\n\n  constructor(database?: D1Database) {\n    this.db = getDatabase(database);\n  }\n  async findByEpisodeId(showId: string, episodeId: string) {\n    // First check if episode exists and belongs to the show\n    const episodeCheck = await this.db\n      .select()\n      .from(episodes)\n      .where(and(eq(episodes.showId, showId), eq(episodes.id, episodeId)))\n      .limit(1);\n\n    if (!episodeCheck[0]) {\n      throw new NotFoundError(\"Episode not found\");\n    }\n\n    const result = await this.db\n      .select()\n      .from(audioUploads)\n      .where(eq(audioUploads.episodeId, episodeId))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  async create(data: AudioUploadData) {\n    const now = new Date().toISOString();\n\n    const newAudioUpload = {\n      ...data,\n      uploadedAt: now,\n    };\n\n    await this.db.insert(audioUploads).values(newAudioUpload);\n    return newAudioUpload;\n  }\n\n  async delete(episodeId: string) {\n    await this.db\n      .delete(audioUploads)\n      .where(eq(audioUploads.episodeId, episodeId));\n    return true;\n  }\n}\n", "export { R2PreSignedUrlGenerator } from \"./r2-presigned-url\";\n", "/// <reference types=\"@cloudflare/workers-types\" />\n\nimport { AwsClient } from \"aws4fetch\";\n\n// AWS Signature Version 4 implementation for R2 pre-signed URLs using aws4fetch\nexport class R2PreSignedUrlGenerator {\n  private client: AwsClient;\n  private customDomain?: string;\n  private accessKeyId: string;\n  private secretAccessKey: string;\n  private region: string;\n\n  constructor(\n    accessKeyId: string,\n    secretAccessKey: string,\n    customDomain?: string,\n    region = \"auto\"\n  ) {\n    this.accessKeyId = accessKeyId;\n    this.secretAccessKey = secretAccessKey;\n    this.region = region;\n    this.client = new AwsClient({\n      accessKeyId,\n      secretAccessKey,\n      region,\n      service: \"s3\",\n    });\n    this.customDomain = customDomain;\n  }\n\n  async generatePresignedUrl(\n    bucketName: string,\n    key: string,\n    expiresIn: number = 28800, // 8 hours in seconds\n    method: string = \"GET\",\n    contentType?: string\n  ): Promise<string> {\n    // Use custom domain for both GET and PUT if available\n    // This avoids SSL issues with cloudflarestorage.com\n    const baseUrl = this.customDomain\n      ? `${this.customDomain}/${key}`\n      : `https://${bucketName}.r2.cloudflarestorage.com/${key}`;\n\n    // For GET requests with custom domain, we can return direct URLs (no signature needed)\n    if (this.customDomain && method === \"GET\") {\n      return baseUrl;\n    }\n\n    // For PUT requests, we need signatures regardless of domain\n    const headers: Record<string, string> = {};\n    if (contentType && method === \"PUT\") {\n      headers[\"content-type\"] = contentType;\n    }\n\n    try {\n      // Use aws4fetch to sign the URL with query parameters\n      const signedUrl = await this.client.sign(baseUrl, {\n        method,\n        headers,\n        aws: {\n          signQuery: true,\n          allHeaders: false,\n        },\n      });\n\n      // Add expiration to the signed URL\n      const finalUrl = new URL(signedUrl.url);\n      finalUrl.searchParams.set(\"X-Amz-Expires\", expiresIn.toString());\n\n      return finalUrl.toString();\n    } catch (error) {\n      console.error(\n        `Failed to generate presigned URL for ${method} ${key}:`,\n        error\n      );\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      throw new Error(`Failed to generate presigned URL: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Generate a direct access URL using custom domain (no signature)\n   * This only works if a custom domain is configured. If no custom domain is available,\n   * returns null to avoid generating broken cloudflarestorage.com URLs.\n   */\n  generateDirectUrl(bucketName: string, key: string): string | null {\n    if (this.customDomain) {\n      // Use custom domain for direct access\n      return `${this.customDomain}/${key}`;\n    }\n    // Don't generate cloudflarestorage.com URLs as they won't work for public access\n    return null;\n  }\n}\n", "/**\n * @license MIT <https://opensource.org/licenses/MIT>\n * @copyright Michael Hart 2024\n */\nconst encoder = new TextEncoder();\nconst HOST_SERVICES = {\n  appstream2: 'appstream',\n  cloudhsmv2: 'cloudhsm',\n  email: 'ses',\n  marketplace: 'aws-marketplace',\n  mobile: 'AWSMobileHubService',\n  pinpoint: 'mobiletargeting',\n  queue: 'sqs',\n  'git-codecommit': 'codecommit',\n  'mturk-requester-sandbox': 'mturk-requester',\n  'personalize-runtime': 'personalize',\n};\nconst UNSIGNABLE_HEADERS = new Set([\n  'authorization',\n  'content-type',\n  'content-length',\n  'user-agent',\n  'presigned-expires',\n  'expect',\n  'x-amzn-trace-id',\n  'range',\n  'connection',\n]);\nclass AwsClient {\n  constructor({ accessKeyId, secretAccessKey, sessionToken, service, region, cache, retries, initRetryMs }) {\n    if (accessKeyId == null) throw new TypeError('accessKeyId is a required option')\n    if (secretAccessKey == null) throw new TypeError('secretAccessKey is a required option')\n    this.accessKeyId = accessKeyId;\n    this.secretAccessKey = secretAccessKey;\n    this.sessionToken = sessionToken;\n    this.service = service;\n    this.region = region;\n    this.cache = cache || new Map();\n    this.retries = retries != null ? retries : 10;\n    this.initRetryMs = initRetryMs || 50;\n  }\n  async sign(input, init) {\n    if (input instanceof Request) {\n      const { method, url, headers, body } = input;\n      init = Object.assign({ method, url, headers }, init);\n      if (init.body == null && headers.has('Content-Type')) {\n        init.body = body != null && headers.has('X-Amz-Content-Sha256') ? body : await input.clone().arrayBuffer();\n      }\n      input = url;\n    }\n    const signer = new AwsV4Signer(Object.assign({ url: input.toString() }, init, this, init && init.aws));\n    const signed = Object.assign({}, init, await signer.sign());\n    delete signed.aws;\n    try {\n      return new Request(signed.url.toString(), signed)\n    } catch (e) {\n      if (e instanceof TypeError) {\n        return new Request(signed.url.toString(), Object.assign({ duplex: 'half' }, signed))\n      }\n      throw e\n    }\n  }\n  async fetch(input, init) {\n    for (let i = 0; i <= this.retries; i++) {\n      const fetched = fetch(await this.sign(input, init));\n      if (i === this.retries) {\n        return fetched\n      }\n      const res = await fetched;\n      if (res.status < 500 && res.status !== 429) {\n        return res\n      }\n      await new Promise(resolve => setTimeout(resolve, Math.random() * this.initRetryMs * Math.pow(2, i)));\n    }\n    throw new Error('An unknown error occurred, ensure retries is not negative')\n  }\n}\nclass AwsV4Signer {\n  constructor({ method, url, headers, body, accessKeyId, secretAccessKey, sessionToken, service, region, cache, datetime, signQuery, appendSessionToken, allHeaders, singleEncode }) {\n    if (url == null) throw new TypeError('url is a required option')\n    if (accessKeyId == null) throw new TypeError('accessKeyId is a required option')\n    if (secretAccessKey == null) throw new TypeError('secretAccessKey is a required option')\n    this.method = method || (body ? 'POST' : 'GET');\n    this.url = new URL(url);\n    this.headers = new Headers(headers || {});\n    this.body = body;\n    this.accessKeyId = accessKeyId;\n    this.secretAccessKey = secretAccessKey;\n    this.sessionToken = sessionToken;\n    let guessedService, guessedRegion;\n    if (!service || !region) {\n[guessedService, guessedRegion] = guessServiceRegion(this.url, this.headers);\n    }\n    this.service = service || guessedService || '';\n    this.region = region || guessedRegion || 'us-east-1';\n    this.cache = cache || new Map();\n    this.datetime = datetime || new Date().toISOString().replace(/[:-]|\\.\\d{3}/g, '');\n    this.signQuery = signQuery;\n    this.appendSessionToken = appendSessionToken || this.service === 'iotdevicegateway';\n    this.headers.delete('Host');\n    if (this.service === 's3' && !this.signQuery && !this.headers.has('X-Amz-Content-Sha256')) {\n      this.headers.set('X-Amz-Content-Sha256', 'UNSIGNED-PAYLOAD');\n    }\n    const params = this.signQuery ? this.url.searchParams : this.headers;\n    params.set('X-Amz-Date', this.datetime);\n    if (this.sessionToken && !this.appendSessionToken) {\n      params.set('X-Amz-Security-Token', this.sessionToken);\n    }\n    this.signableHeaders = ['host', ...this.headers.keys()]\n      .filter(header => allHeaders || !UNSIGNABLE_HEADERS.has(header))\n      .sort();\n    this.signedHeaders = this.signableHeaders.join(';');\n    this.canonicalHeaders = this.signableHeaders\n      .map(header => header + ':' + (header === 'host' ? this.url.host : (this.headers.get(header) || '').replace(/\\s+/g, ' ')))\n      .join('\\n');\n    this.credentialString = [this.datetime.slice(0, 8), this.region, this.service, 'aws4_request'].join('/');\n    if (this.signQuery) {\n      if (this.service === 's3' && !params.has('X-Amz-Expires')) {\n        params.set('X-Amz-Expires', '86400');\n      }\n      params.set('X-Amz-Algorithm', 'AWS4-HMAC-SHA256');\n      params.set('X-Amz-Credential', this.accessKeyId + '/' + this.credentialString);\n      params.set('X-Amz-SignedHeaders', this.signedHeaders);\n    }\n    if (this.service === 's3') {\n      try {\n        this.encodedPath = decodeURIComponent(this.url.pathname.replace(/\\+/g, ' '));\n      } catch (e) {\n        this.encodedPath = this.url.pathname;\n      }\n    } else {\n      this.encodedPath = this.url.pathname.replace(/\\/+/g, '/');\n    }\n    if (!singleEncode) {\n      this.encodedPath = encodeURIComponent(this.encodedPath).replace(/%2F/g, '/');\n    }\n    this.encodedPath = encodeRfc3986(this.encodedPath);\n    const seenKeys = new Set();\n    this.encodedSearch = [...this.url.searchParams]\n      .filter(([k]) => {\n        if (!k) return false\n        if (this.service === 's3') {\n          if (seenKeys.has(k)) return false\n          seenKeys.add(k);\n        }\n        return true\n      })\n      .map(pair => pair.map(p => encodeRfc3986(encodeURIComponent(p))))\n      .sort(([k1, v1], [k2, v2]) => k1 < k2 ? -1 : k1 > k2 ? 1 : v1 < v2 ? -1 : v1 > v2 ? 1 : 0)\n      .map(pair => pair.join('='))\n      .join('&');\n  }\n  async sign() {\n    if (this.signQuery) {\n      this.url.searchParams.set('X-Amz-Signature', await this.signature());\n      if (this.sessionToken && this.appendSessionToken) {\n        this.url.searchParams.set('X-Amz-Security-Token', this.sessionToken);\n      }\n    } else {\n      this.headers.set('Authorization', await this.authHeader());\n    }\n    return {\n      method: this.method,\n      url: this.url,\n      headers: this.headers,\n      body: this.body,\n    }\n  }\n  async authHeader() {\n    return [\n      'AWS4-HMAC-SHA256 Credential=' + this.accessKeyId + '/' + this.credentialString,\n      'SignedHeaders=' + this.signedHeaders,\n      'Signature=' + (await this.signature()),\n    ].join(', ')\n  }\n  async signature() {\n    const date = this.datetime.slice(0, 8);\n    const cacheKey = [this.secretAccessKey, date, this.region, this.service].join();\n    let kCredentials = this.cache.get(cacheKey);\n    if (!kCredentials) {\n      const kDate = await hmac('AWS4' + this.secretAccessKey, date);\n      const kRegion = await hmac(kDate, this.region);\n      const kService = await hmac(kRegion, this.service);\n      kCredentials = await hmac(kService, 'aws4_request');\n      this.cache.set(cacheKey, kCredentials);\n    }\n    return buf2hex(await hmac(kCredentials, await this.stringToSign()))\n  }\n  async stringToSign() {\n    return [\n      'AWS4-HMAC-SHA256',\n      this.datetime,\n      this.credentialString,\n      buf2hex(await hash(await this.canonicalString())),\n    ].join('\\n')\n  }\n  async canonicalString() {\n    return [\n      this.method.toUpperCase(),\n      this.encodedPath,\n      this.encodedSearch,\n      this.canonicalHeaders + '\\n',\n      this.signedHeaders,\n      await this.hexBodyHash(),\n    ].join('\\n')\n  }\n  async hexBodyHash() {\n    let hashHeader = this.headers.get('X-Amz-Content-Sha256') || (this.service === 's3' && this.signQuery ? 'UNSIGNED-PAYLOAD' : null);\n    if (hashHeader == null) {\n      if (this.body && typeof this.body !== 'string' && !('byteLength' in this.body)) {\n        throw new Error('body must be a string, ArrayBuffer or ArrayBufferView, unless you include the X-Amz-Content-Sha256 header')\n      }\n      hashHeader = buf2hex(await hash(this.body || ''));\n    }\n    return hashHeader\n  }\n}\nasync function hmac(key, string) {\n  const cryptoKey = await crypto.subtle.importKey(\n    'raw',\n    typeof key === 'string' ? encoder.encode(key) : key,\n    { name: 'HMAC', hash: { name: 'SHA-256' } },\n    false,\n    ['sign'],\n  );\n  return crypto.subtle.sign('HMAC', cryptoKey, encoder.encode(string))\n}\nasync function hash(content) {\n  return crypto.subtle.digest('SHA-256', typeof content === 'string' ? encoder.encode(content) : content)\n}\nconst HEX_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\nfunction buf2hex(arrayBuffer) {\n  const buffer = new Uint8Array(arrayBuffer);\n  let out = '';\n  for (let idx = 0; idx < buffer.length; idx++) {\n    const n = buffer[idx];\n    out += HEX_CHARS[(n >>> 4) & 0xF];\n    out += HEX_CHARS[n & 0xF];\n  }\n  return out\n}\nfunction encodeRfc3986(urlEncodedStr) {\n  return urlEncodedStr.replace(/[!'()*]/g, c => '%' + c.charCodeAt(0).toString(16).toUpperCase())\n}\nfunction guessServiceRegion(url, headers) {\n  const { hostname, pathname } = url;\n  if (hostname.endsWith('.on.aws')) {\n    const match = hostname.match(/^[^.]{1,63}\\.lambda-url\\.([^.]{1,63})\\.on\\.aws$/);\n    return match != null ? ['lambda', match[1] || ''] : ['', '']\n  }\n  if (hostname.endsWith('.r2.cloudflarestorage.com')) {\n    return ['s3', 'auto']\n  }\n  if (hostname.endsWith('.backblazeb2.com')) {\n    const match = hostname.match(/^(?:[^.]{1,63}\\.)?s3\\.([^.]{1,63})\\.backblazeb2\\.com$/);\n    return match != null ? ['s3', match[1] || ''] : ['', '']\n  }\n  const match = hostname.replace('dualstack.', '').match(/([^.]{1,63})\\.(?:([^.]{0,63})\\.)?amazonaws\\.com(?:\\.cn)?$/);\n  let service = (match && match[1]) || '';\n  let region = match && match[2];\n  if (region === 'us-gov') {\n    region = 'us-gov-west-1';\n  } else if (region === 's3' || region === 's3-accelerate') {\n    region = 'us-east-1';\n    service = 's3';\n  } else if (service === 'iot') {\n    if (hostname.startsWith('iot.')) {\n      service = 'execute-api';\n    } else if (hostname.startsWith('data.jobs.iot.')) {\n      service = 'iot-jobs-data';\n    } else {\n      service = pathname === '/mqtt' ? 'iotdevicegateway' : 'iotdata';\n    }\n  } else if (service === 'autoscaling') {\n    const targetPrefix = (headers.get('X-Amz-Target') || '').split('.')[0];\n    if (targetPrefix === 'AnyScaleFrontendService') {\n      service = 'application-autoscaling';\n    } else if (targetPrefix === 'AnyScaleScalingPlannerFrontendService') {\n      service = 'autoscaling-plans';\n    }\n  } else if (region == null && service.startsWith('s3-')) {\n    region = service.slice(3).replace(/^fips-|^external-1/, '');\n    service = 's3';\n  } else if (service.endsWith('-fips')) {\n    service = service.slice(0, -5);\n  } else if (region && /-\\d$/.test(service) && !/-\\d$/.test(region)) {\n[service, region] = [region, service];\n  }\n  return [HOST_SERVICES[service] || service, region || '']\n}\n\nexport { AwsClient, AwsV4Signer };\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { R2Bucket } from \"@cloudflare/workers-types\";\nimport {\n  imageUploads,\n  shows,\n  episodes,\n  NewImageUpload,\n  ImageUpload,\n} from \"../database/schema.js\";\nimport { eq } from \"drizzle-orm\";\nimport { getDatabase } from \"../database/client.js\";\nimport { R2PreSignedUrlGenerator } from \"../utils\";\n\nexport class ImageService {\n  private r2PreSignedUrlGenerator: R2PreSignedUrlGenerator | null = null;\n  private db: any;\n  private bucket: R2Bucket;\n\n  constructor(\n    bucket?: R2Bucket,\n    r2AccessKeyId?: string,\n    r2SecretAccessKey?: string,\n    r2Endpoint?: string,\n    database?: any\n  ) {\n    this.bucket = bucket as R2Bucket;\n    this.db = getDatabase(database);\n\n    // Initialize pre-signed URL generator if credentials are available\n    if (r2AccessKeyId && r2SecretAccessKey) {\n      console.log(\n        `[ImageService] Initializing R2PreSignedUrlGenerator with endpoint: ${r2Endpoint}`\n      );\n      this.r2PreSignedUrlGenerator = new R2PreSignedUrlGenerator(\n        r2AccessKeyId,\n        r2SecretAccessKey,\n        r2Endpoint\n      );\n    } else {\n      console.log(\n        `[ImageService] R2 credentials not available - r2AccessKeyId: ${!!r2AccessKeyId}, r2SecretAccessKey: ${!!r2SecretAccessKey}`\n      );\n    }\n  }\n\n  /**\n   * Upload image for a show\n   */\n  async uploadShowImage(showId: string, file: File): Promise<ImageUpload> {\n    console.log(`[ImageService] Uploading show image for show ${showId}`);\n    console.log(\n      `[ImageService] File details: name=\"${file.name}\", size=${file.size}, type=\"${file.type}\"`\n    );\n\n    // Validate that R2 bucket is available\n    if (!this.bucket) {\n      console.error(`[ImageService] R2 bucket is not configured`);\n      throw new Error(\"R2 bucket is not configured\");\n    }\n    console.log(`[ImageService] R2 bucket is available`);\n\n    // Verify show exists\n    console.log(`[ImageService] Checking if show exists: ${showId}`);\n    const show = await this.db\n      .select()\n      .from(shows)\n      .where(eq(shows.id, showId))\n      .get();\n    if (!show) {\n      console.error(`[ImageService] Show not found: ${showId}`);\n      throw new Error(`Show with id ${showId} not found`);\n    }\n    console.log(`[ImageService] Show found: ${show.title}`);\n\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      console.error(`[ImageService] Invalid file type: ${file.type}`);\n      throw new Error(\"File must be an image\");\n    }\n    console.log(`[ImageService] File type validated: ${file.type}`);\n\n    const fileId = uuidv4();\n    const filename = file.name || `image-${fileId}`;\n    const key = `images/shows/${showId}/${fileId}/${filename}`;\n\n    console.log(`[ImageService] Generated upload key: ${key}`);\n\n    try {\n      console.log(`[ImageService] Converting file to arrayBuffer...`);\n      // Upload to R2\n      const arrayBuffer = await file.arrayBuffer();\n      console.log(\n        `[ImageService] ArrayBuffer created, size: ${arrayBuffer.byteLength}`\n      );\n\n      console.log(`[ImageService] Attempting R2 upload...`);\n      await this.bucket.put(key, arrayBuffer, {\n        httpMetadata: {\n          contentType: file.type,\n        },\n      });\n      console.log(`[ImageService] R2 upload successful`);\n\n      const r2Url = `r2://${key}`;\n      console.log(`[ImageService] Stored as R2 URL: ${r2Url}`);\n\n      console.log(`[ImageService] Saving metadata to database...`);\n      // Save metadata to database\n      const imageUpload: NewImageUpload = {\n        id: fileId,\n        showId: showId,\n        episodeId: null,\n        fileName: filename,\n        fileSize: file.size,\n        mimeType: file.type,\n        url: r2Url,\n        uploadedAt: new Date().toISOString(),\n      };\n\n      const result = await this.db\n        .insert(imageUploads)\n        .values(imageUpload)\n        .returning()\n        .get();\n\n      console.log(\n        `[ImageService] Image upload saved to database with id: ${result.id}`\n      );\n\n      // Update show's image URL\n      await this.db\n        .update(shows)\n        .set({\n          imageUrl: r2Url,\n          updatedAt: new Date().toISOString(),\n        })\n        .where(eq(shows.id, showId));\n\n      console.log(`[ImageService] Updated show ${showId} with new image URL`);\n\n      // Enqueue encoding task for uploaded image\n      if (typeof (globalThis as any).TASK_QUEUE !== \"undefined\") {\n        await (globalThis as any).TASK_QUEUE.send({\n          type: \"encode\",\n          payload: {\n            imageId: fileId,\n            showId,\n            url: r2Url,\n          },\n        });\n      }\n      return result;\n    } catch (error: any) {\n      console.error(\n        `[ImageService] Error uploading image for show ${showId}:`,\n        {\n          message: error.message,\n          name: error.name,\n          stack: error.stack,\n          cause: error.cause,\n          errorString: String(error),\n          errorType: typeof error,\n        }\n      );\n\n      if (error.message?.includes(\"bucket\")) {\n        console.error(`[ImageService] R2 bucket error detected`);\n        throw new Error(\"Image storage service is not available\");\n      }\n\n      if (\n        error.message?.includes(\"database\") ||\n        error.message?.includes(\"UNIQUE\")\n      ) {\n        console.error(`[ImageService] Database error detected`);\n        throw new Error(\"Database error occurred while saving image metadata\");\n      }\n\n      // Re-throw the original error for other cases\n      console.error(`[ImageService] Rethrowing unhandled error`);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload image for an episode\n   */\n  async uploadEpisodeImage(\n    showId: string,\n    episodeId: string,\n    file: File\n  ): Promise<ImageUpload> {\n    console.log(\n      `[ImageService] Uploading episode image for episode ${episodeId}`\n    );\n\n    // Verify episode exists and belongs to show\n    const episode = await this.db\n      .select()\n      .from(episodes)\n      .where(eq(episodes.id, episodeId))\n      .get();\n\n    if (!episode || episode.showId !== showId) {\n      throw new Error(\n        `Episode with id ${episodeId} not found in show ${showId}`\n      );\n    }\n\n    // Validate file type\n    if (!file.type.startsWith(\"image/\")) {\n      throw new Error(\"File must be an image\");\n    }\n\n    const fileId = uuidv4();\n    const filename = file.name || `image-${fileId}`;\n    const key = `images/episodes/${showId}/${episodeId}/${fileId}/${filename}`;\n\n    console.log(`[ImageService] Uploading to R2 key: ${key}`);\n\n    // Upload to R2\n    const arrayBuffer = await file.arrayBuffer();\n    await this.bucket.put(key, arrayBuffer, {\n      httpMetadata: {\n        contentType: file.type,\n      },\n    });\n\n    const r2Url = `r2://${key}`;\n    console.log(`[ImageService] Stored as R2 URL: ${r2Url}`);\n\n    // Save metadata to database\n    const imageUpload: NewImageUpload = {\n      id: fileId,\n      showId: null,\n      episodeId: episodeId,\n      fileName: filename,\n      fileSize: file.size,\n      mimeType: file.type,\n      url: r2Url,\n      uploadedAt: new Date().toISOString(),\n    };\n\n    const result = await this.db\n      .insert(imageUploads)\n      .values(imageUpload)\n      .returning()\n      .get();\n\n    console.log(\n      `[ImageService] Image upload saved to database with id: ${result.id}`\n    );\n\n    // Update episode's image URL\n    await this.db\n      .update(episodes)\n      .set({\n        imageUrl: r2Url,\n        updatedAt: new Date().toISOString(),\n      })\n      .where(eq(episodes.id, episodeId));\n\n    // Enqueue encoding task for uploaded image\n    if (typeof (globalThis as any).TASK_QUEUE !== \"undefined\") {\n      await (globalThis as any).TASK_QUEUE.send({\n        type: \"encode\",\n        payload: {\n          imageId: fileId,\n          episodeId,\n          showId,\n          url: r2Url,\n        },\n      });\n    }\n\n    console.log(\n      `[ImageService] Updated episode ${episodeId} with new image URL`\n    );\n\n    return result;\n  }\n\n  /**\n   * Sign an R2 URL to make it accessible\n   */\n  async signImageUrl(url: string): Promise<string> {\n    if (!url || !url.startsWith(\"r2://\")) {\n      return url;\n    }\n\n    if (!this.r2PreSignedUrlGenerator) {\n      console.warn(\"[ImageService] No pre-signed URL generator available\");\n      return url;\n    }\n\n    const key = url.replace(\"r2://\", \"\");\n    return await this.r2PreSignedUrlGenerator.generatePresignedUrl(\n      \"podcast-assets\",\n      key\n    );\n  }\n}\n", "import { eq, and, desc, asc, count, sql } from \"drizzle-orm\";\nimport { getDatabase } from \"../database/client\";\nimport {\n  campaigns,\n  creatives,\n  campaignShows,\n  shows,\n  type Campaign,\n  type NewCampaign,\n  type Creative,\n  type NewCreative,\n} from \"../database/schema\";\nimport { Pagination } from \"./schemas\";\nimport { NotFoundError } from \"../common/errors\";\n\nexport class CampaignRepository {\n  private db;\n\n  constructor(database?: D1Database) {\n    this.db = getDatabase(database);\n  }\n\n  async findAll(pagination: Pagination) {\n    const offset = (pagination.page - 1) * pagination.limit;\n\n    const [campaignsData, totalCount] = await Promise.all([\n      this.db\n        .select()\n        .from(campaigns)\n        .orderBy(desc(campaigns.createdAt))\n        .limit(pagination.limit)\n        .offset(offset),\n      this.db\n        .select({ count: count() })\n        .from(campaigns)\n        .then((result: any) => result[0].count),\n    ]);\n\n    return {\n      data: campaignsData,\n      pagination: {\n        page: pagination.page,\n        limit: pagination.limit,\n        total: totalCount,\n        totalPages: Math.ceil(totalCount / pagination.limit),\n      },\n    };\n  }\n\n  async findById(id: string): Promise<Campaign | null> {\n    const campaign = await this.db\n      .select()\n      .from(campaigns)\n      .where(eq(campaigns.id, id))\n      .limit(1);\n\n    return campaign[0] || null;\n  }\n\n  async findByIdWithDetails(id: string) {\n    const campaign = await this.findById(id);\n    if (!campaign) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    // Get creatives for this campaign\n    const campaignCreatives = await this.db\n      .select()\n      .from(creatives)\n      .where(eq(creatives.campaignId, id))\n      .orderBy(asc(creatives.createdAt));\n\n    // Get shows for this campaign\n    const campaignShowsData = await this.db\n      .select({\n        id: shows.id,\n        title: shows.title,\n      })\n      .from(campaignShows)\n      .innerJoin(shows, eq(campaignShows.showId, shows.id))\n      .where(eq(campaignShows.campaignId, id))\n      .orderBy(asc(shows.title));\n\n    return {\n      ...campaign,\n      creatives: campaignCreatives,\n      shows: campaignShowsData,\n    };\n  }\n\n  async create(\n    data: Omit<NewCampaign, \"createdAt\" | \"updatedAt\">\n  ): Promise<Campaign> {\n    const now = new Date().toISOString();\n    const campaignData = {\n      ...data,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    const result = await this.db\n      .insert(campaigns)\n      .values(campaignData)\n      .returning();\n\n    return result[0];\n  }\n\n  async update(\n    id: string,\n    data: Partial<Omit<NewCampaign, \"createdAt\" | \"updatedAt\">>\n  ): Promise<Campaign> {\n    const now = new Date().toISOString();\n    const updateData = {\n      ...data,\n      updatedAt: now,\n    };\n\n    const result = await this.db\n      .update(campaigns)\n      .set(updateData)\n      .where(eq(campaigns.id, id))\n      .returning();\n\n    if (result.length === 0) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    return result[0];\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const result = await this.db\n      .delete(campaigns)\n      .where(eq(campaigns.id, id))\n      .returning();\n\n    return result.length > 0;\n  }\n\n  // Creative methods\n  async findCreativesByCampaign(campaignId: string): Promise<Creative[]> {\n    return await this.db\n      .select()\n      .from(creatives)\n      .where(eq(creatives.campaignId, campaignId))\n      .orderBy(asc(creatives.createdAt));\n  }\n\n  async findCreativeById(\n    campaignId: string,\n    creativeId: string\n  ): Promise<Creative | null> {\n    const creative = await this.db\n      .select()\n      .from(creatives)\n      .where(\n        and(eq(creatives.id, creativeId), eq(creatives.campaignId, campaignId))\n      )\n      .limit(1);\n\n    return creative[0] || null;\n  }\n\n  async createCreative(\n    data: Omit<NewCreative, \"createdAt\" | \"updatedAt\">\n  ): Promise<Creative> {\n    const now = new Date().toISOString();\n    const creativeData = {\n      ...data,\n      createdAt: now,\n      updatedAt: now,\n    };\n\n    const result = await this.db\n      .insert(creatives)\n      .values(creativeData)\n      .returning();\n\n    return result[0];\n  }\n\n  async updateCreative(\n    campaignId: string,\n    creativeId: string,\n    data: Partial<Omit<NewCreative, \"createdAt\" | \"updatedAt\">>\n  ): Promise<Creative> {\n    const now = new Date().toISOString();\n    const updateData = {\n      ...data,\n      updatedAt: now,\n    };\n\n    const result = await this.db\n      .update(creatives)\n      .set(updateData)\n      .where(\n        and(eq(creatives.id, creativeId), eq(creatives.campaignId, campaignId))\n      )\n      .returning();\n\n    if (result.length === 0) {\n      throw new NotFoundError(\"Creative not found\");\n    }\n\n    return result[0];\n  }\n\n  async deleteCreative(\n    campaignId: string,\n    creativeId: string\n  ): Promise<boolean> {\n    const result = await this.db\n      .delete(creatives)\n      .where(\n        and(eq(creatives.id, creativeId), eq(creatives.campaignId, campaignId))\n      )\n      .returning();\n\n    return result.length > 0;\n  }\n\n  // Campaign-Show relationship methods\n  async addShowToCampaign(campaignId: string, showId: string): Promise<void> {\n    const now = new Date().toISOString();\n\n    await this.db\n      .insert(campaignShows)\n      .values({\n        campaignId,\n        showId,\n        createdAt: now,\n      })\n      .onConflictDoNothing(); // Prevent duplicate entries\n  }\n\n  async removeShowFromCampaign(\n    campaignId: string,\n    showId: string\n  ): Promise<boolean> {\n    const result = await this.db\n      .delete(campaignShows)\n      .where(\n        and(\n          eq(campaignShows.campaignId, campaignId),\n          eq(campaignShows.showId, showId)\n        )\n      )\n      .returning();\n\n    return result.length > 0;\n  }\n\n  async updateCampaignShows(\n    campaignId: string,\n    showIds: string[]\n  ): Promise<void> {\n    // Remove existing relationships\n    await this.db\n      .delete(campaignShows)\n      .where(eq(campaignShows.campaignId, campaignId));\n\n    // Add new relationships\n    if (showIds.length > 0) {\n      const now = new Date().toISOString();\n      const values = showIds.map((showId) => ({\n        campaignId,\n        showId,\n        createdAt: now,\n      }));\n\n      await this.db.insert(campaignShows).values(values);\n    }\n  }\n\n  async findShowsByCampaign(campaignId: string) {\n    return await this.db\n      .select({\n        id: shows.id,\n        title: shows.title,\n        description: shows.description,\n        imageUrl: shows.imageUrl,\n        createdAt: shows.createdAt,\n        updatedAt: shows.updatedAt,\n      })\n      .from(campaignShows)\n      .innerJoin(shows, eq(campaignShows.showId, shows.id))\n      .where(eq(campaignShows.campaignId, campaignId))\n      .orderBy(asc(shows.title));\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { CampaignRepository } from \"./repository\";\nimport {\n  CreateCampaign,\n  UpdateCampaign,\n  Pagination,\n  CreateCreative,\n  UpdateCreative,\n} from \"./schemas\";\nimport { EventPublisher } from \"../events/publisher\";\nimport { NotFoundError } from \"../common/errors\";\n\nexport class CampaignService {\n  constructor(\n    private campaignRepository: CampaignRepository,\n    private eventPublisher: EventPublisher\n  ) {}\n\n  async getAllCampaigns(pagination: Pagination) {\n    return await this.campaignRepository.findAll(pagination);\n  }\n\n  async getCampaignById(id: string) {\n    return await this.campaignRepository.findById(id);\n  }\n\n  async getCampaignByIdWithDetails(id: string) {\n    return await this.campaignRepository.findByIdWithDetails(id);\n  }\n\n  async createCampaign(data: CreateCampaign) {\n    const id = uuidv4();\n    const { showIds, ...campaignData } = data;\n\n    // Create the campaign - all required fields must be present\n    const campaign = await this.campaignRepository.create({\n      id,\n      name: campaignData.name,\n      startDate: campaignData.startDate,\n      endDate: campaignData.endDate,\n      priority: campaignData.priority ?? 5,\n      status: campaignData.status ?? \"draft\",\n      advertiser: campaignData.advertiser ?? null,\n      targetImpressions: campaignData.targetImpressions ?? null,\n    } as any);\n\n    // Link campaign to shows\n    if (showIds && showIds.length > 0) {\n      await this.campaignRepository.updateCampaignShows(id, showIds);\n    }\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"campaign.created\",\n      campaign,\n      campaign.id\n    );\n\n    return campaign;\n  }\n\n  async updateCampaign(id: string, data: UpdateCampaign) {\n    const { showIds, ...campaignData } = data;\n\n    // Update the campaign\n    const campaign = await this.campaignRepository.update(id, campaignData);\n\n    // Update campaign-show relationships if showIds provided\n    if (showIds !== undefined) {\n      await this.campaignRepository.updateCampaignShows(id, showIds);\n    }\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"campaign.updated\",\n      campaign,\n      campaign.id\n    );\n\n    return campaign;\n  }\n\n  async deleteCampaign(id: string) {\n    const campaign = await this.campaignRepository.findById(id);\n    if (!campaign) {\n      return false;\n    }\n\n    const deleted = await this.campaignRepository.delete(id);\n\n    if (deleted) {\n      // Publish event\n      await this.eventPublisher.publish(\"campaign.deleted\", { id }, id);\n    }\n\n    return deleted;\n  }\n\n  // Creative management methods\n  async getCampaignCreatives(campaignId: string) {\n    // Verify campaign exists\n    const campaign = await this.campaignRepository.findById(campaignId);\n    if (!campaign) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    return await this.campaignRepository.findCreativesByCampaign(campaignId);\n  }\n\n  async getCreativeById(campaignId: string, creativeId: string) {\n    return await this.campaignRepository.findCreativeById(\n      campaignId,\n      creativeId\n    );\n  }\n\n  async createCreative(\n    campaignId: string,\n    data: Omit<CreateCreative, \"campaignId\">\n  ) {\n    // Verify campaign exists\n    const campaign = await this.campaignRepository.findById(campaignId);\n    if (!campaign) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    const id = uuidv4();\n    const creative = await this.campaignRepository.createCreative({\n      id,\n      campaignId,\n      name: data.name,\n      type: data.type ?? \"audio\",\n      duration: data.duration,\n      placementType: data.placementType ?? \"any\",\n      language: data.language ?? null,\n    } as any);\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"creative.created\",\n      creative,\n      creative.id\n    );\n\n    return creative;\n  }\n\n  async updateCreative(\n    campaignId: string,\n    creativeId: string,\n    data: UpdateCreative\n  ) {\n    const creative = await this.campaignRepository.updateCreative(\n      campaignId,\n      creativeId,\n      data\n    );\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"creative.updated\",\n      creative,\n      creative.id\n    );\n\n    return creative;\n  }\n\n  async deleteCreative(campaignId: string, creativeId: string) {\n    const creative = await this.campaignRepository.findCreativeById(\n      campaignId,\n      creativeId\n    );\n    if (!creative) {\n      return false;\n    }\n\n    const deleted = await this.campaignRepository.deleteCreative(\n      campaignId,\n      creativeId\n    );\n\n    if (deleted) {\n      // Publish event\n      await this.eventPublisher.publish(\n        \"creative.deleted\",\n        { id: creativeId, campaignId },\n        creativeId\n      );\n    }\n\n    return deleted;\n  }\n\n  // Campaign-Show relationship methods\n  async getCampaignShows(campaignId: string) {\n    // Verify campaign exists\n    const campaign = await this.campaignRepository.findById(campaignId);\n    if (!campaign) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    return await this.campaignRepository.findShowsByCampaign(campaignId);\n  }\n\n  async addShowToCampaign(campaignId: string, showId: string) {\n    // Verify campaign exists\n    const campaign = await this.campaignRepository.findById(campaignId);\n    if (!campaign) {\n      throw new NotFoundError(\"Campaign not found\");\n    }\n\n    await this.campaignRepository.addShowToCampaign(campaignId, showId);\n\n    // Publish event\n    await this.eventPublisher.publish(\n      \"campaign.show.added\",\n      { campaignId, showId },\n      campaignId\n    );\n\n    return true;\n  }\n\n  async removeShowFromCampaign(campaignId: string, showId: string) {\n    const removed = await this.campaignRepository.removeShowFromCampaign(\n      campaignId,\n      showId\n    );\n\n    if (removed) {\n      // Publish event\n      await this.eventPublisher.publish(\n        \"campaign.show.removed\",\n        { campaignId, showId },\n        campaignId\n      );\n    }\n\n    return removed;\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { CampaignRepository } from \"./repository\";\nimport { EventPublisher } from \"../events/publisher\";\nimport { NotFoundError } from \"../common/errors\";\nimport { R2PreSignedUrlGenerator } from \"../utils/r2-presigned-url\";\n\nexport interface CreativeUploadData {\n  id: string;\n  campaignId: string;\n  creativeId: string;\n  fileName: string;\n  fileSize: number;\n  mimeType: string;\n  url: string;\n  uploadedAt: string;\n}\n\nexport class CreativeUploadService {\n  private campaignRepo: CampaignRepository;\n  private eventPublisher: EventPublisher;\n  private bucket: R2Bucket;\n  private presignedUrlGenerator: R2PreSignedUrlGenerator | null = null;\n  private database?: D1Database;\n\n  constructor(\n    database?: D1Database,\n    bucket?: R2Bucket,\n    eventPublisher?: EventPublisher,\n    r2AccessKeyId?: string,\n    r2SecretAccessKey?: string,\n    r2Endpoint?: string\n  ) {\n    this.database = database;\n    this.campaignRepo = new CampaignRepository(database);\n    this.eventPublisher = eventPublisher || new EventPublisher();\n    this.bucket = bucket as R2Bucket;\n\n    // Initialize R2 credentials for signed URL generation\n    if (r2AccessKeyId && r2SecretAccessKey && r2Endpoint) {\n      try {\n        this.presignedUrlGenerator = new R2PreSignedUrlGenerator(\n          r2AccessKeyId,\n          r2SecretAccessKey,\n          r2Endpoint\n        );\n        console.log(\"R2PreSignedUrlGenerator initialized successfully\");\n      } catch (error) {\n        console.warn(\"Failed to initialize R2PreSignedUrlGenerator:\", error);\n        this.presignedUrlGenerator = null;\n      }\n    } else {\n      console.warn(\n        \"R2 credentials not provided, signed URL generation will be limited\"\n      );\n    }\n  }\n\n  async uploadCreativeAudio(\n    campaignId: string,\n    creativeId: string,\n    file: {\n      fileName: string;\n      fileSize: number;\n      mimeType: string;\n      buffer: Buffer;\n    }\n  ) {\n    // Verify creative exists\n    const creative = await this.campaignRepo.findCreativeById(\n      campaignId,\n      creativeId\n    );\n    if (!creative) {\n      throw new NotFoundError(\"Creative not found\");\n    }\n\n    // Validate file type for audio\n    if (!file.mimeType.startsWith(\"audio/\")) {\n      throw new Error(\"File must be an audio file\");\n    }\n\n    const uploadId = uuidv4();\n    const fileName = file.fileName;\n    const key = `creatives/audio/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n\n    let url: string;\n    let signedUrl: string;\n\n    if (this.bucket) {\n      // Upload to R2 bucket\n      await this.bucket.put(key, file.buffer, {\n        httpMetadata: {\n          contentType: file.mimeType,\n        },\n      });\n\n      // Store the R2 key with a special prefix for database storage\n      url = `r2://${key}`;\n\n      // Generate URL for immediate use\n      if (this.presignedUrlGenerator) {\n        try {\n          // Use direct URL with custom domain if available\n          const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n            \"podcast-service-assets\",\n            key\n          );\n          signedUrl = directUrl || url; // Fall back to r2:// URL if no custom domain\n        } catch (error) {\n          console.warn(\"Failed to generate URL, using r2:// fallback:\", error);\n          signedUrl = url;\n        }\n      } else {\n        console.warn(\"No R2 credentials available for URL generation\");\n        signedUrl = url;\n      }\n    } else {\n      // Fallback for development/testing\n      url = `https://storage.example.com/creatives/audio/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n      signedUrl = url;\n    }\n\n    // Update creative with the new file URL\n    try {\n      console.log(`Updating creative ${creativeId} with audio URL`);\n      await this.campaignRepo.updateCreative(campaignId, creativeId, {\n        audioUrl: url, // Store R2 key for audio files\n        type: \"audio\", // Ensure type is set to audio\n      });\n      console.log(`Creative updated successfully`);\n    } catch (error) {\n      console.error(\"Failed to update creative:\", error);\n      throw new Error(\n        `Database error: Failed to update creative - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Create upload record for tracking\n    const creativeUpload: CreativeUploadData = {\n      id: uploadId,\n      campaignId,\n      creativeId,\n      fileName: file.fileName,\n      fileSize: file.fileSize,\n      mimeType: file.mimeType,\n      url, // Store R2 key (r2://) for regenerating signed URLs\n      uploadedAt: new Date().toISOString(),\n    };\n\n    // Publish event with R2 key (generate signed URL for event payload)\n    try {\n      console.log(`Publishing creative.audio.uploaded event`);\n      await this.eventPublisher.publish(\n        \"creative.audio.uploaded\",\n        {\n          ...creativeUpload,\n          url: signedUrl, // Include signed URL in event for immediate use\n        },\n        creativeUpload.id\n      );\n      console.log(`Event published successfully`);\n    } catch (error) {\n      console.error(\"Failed to publish event:\", error);\n      throw new Error(\n        `Event error: Failed to publish creative.audio.uploaded event - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Return upload info with signed URL for immediate use\n    return {\n      ...creativeUpload,\n      url: signedUrl,\n    };\n  }\n\n  async uploadCreativeVideo(\n    campaignId: string,\n    creativeId: string,\n    file: {\n      fileName: string;\n      fileSize: number;\n      mimeType: string;\n      buffer: Buffer;\n    }\n  ) {\n    // Verify creative exists\n    const creative = await this.campaignRepo.findCreativeById(\n      campaignId,\n      creativeId\n    );\n    if (!creative) {\n      throw new NotFoundError(\"Creative not found\");\n    }\n\n    // Validate file type for video\n    if (!file.mimeType.startsWith(\"video/\")) {\n      throw new Error(\"File must be a video file\");\n    }\n\n    const uploadId = uuidv4();\n    const fileName = file.fileName;\n    const key = `creatives/video/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n\n    let url: string;\n    let signedUrl: string;\n\n    if (this.bucket) {\n      // Upload to R2 bucket\n      await this.bucket.put(key, file.buffer, {\n        httpMetadata: {\n          contentType: file.mimeType,\n        },\n      });\n\n      // Store the R2 key with a special prefix for database storage\n      url = `r2://${key}`;\n\n      // Generate URL for immediate use\n      if (this.presignedUrlGenerator) {\n        try {\n          // Use direct URL with custom domain if available\n          const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n            \"podcast-service-assets\",\n            key\n          );\n          signedUrl = directUrl || url; // Fall back to r2:// URL if no custom domain\n        } catch (error) {\n          console.warn(\"Failed to generate URL, using r2:// fallback:\", error);\n          signedUrl = url;\n        }\n      } else {\n        console.warn(\"No R2 credentials available for URL generation\");\n        signedUrl = url;\n      }\n    } else {\n      // Fallback for development/testing\n      url = `https://storage.example.com/creatives/video/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n      signedUrl = url;\n    }\n\n    // Update creative with the new file URL\n    try {\n      console.log(`Updating creative ${creativeId} with video URL`);\n      await this.campaignRepo.updateCreative(campaignId, creativeId, {\n        audioUrl: url, // Store R2 key for video files (treating video as audio content)\n        type: \"video\", // Ensure type is set to video\n      });\n      console.log(`Creative updated successfully`);\n    } catch (error) {\n      console.error(\"Failed to update creative:\", error);\n      throw new Error(\n        `Database error: Failed to update creative - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Create upload record for tracking\n    const creativeUpload: CreativeUploadData = {\n      id: uploadId,\n      campaignId,\n      creativeId,\n      fileName: file.fileName,\n      fileSize: file.fileSize,\n      mimeType: file.mimeType,\n      url, // Store R2 key (r2://) for regenerating signed URLs\n      uploadedAt: new Date().toISOString(),\n    };\n\n    // Publish event with R2 key (generate signed URL for event payload)\n    try {\n      console.log(`Publishing creative.video.uploaded event`);\n      await this.eventPublisher.publish(\n        \"creative.video.uploaded\",\n        {\n          ...creativeUpload,\n          url: signedUrl, // Include signed URL in event for immediate use\n        },\n        creativeUpload.id\n      );\n      console.log(`Event published successfully`);\n    } catch (error) {\n      console.error(\"Failed to publish event:\", error);\n      throw new Error(\n        `Event error: Failed to publish creative.video.uploaded event - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Return upload info with signed URL for immediate use\n    return {\n      ...creativeUpload,\n      url: signedUrl,\n    };\n  }\n\n  async uploadCreativeImage(\n    campaignId: string,\n    creativeId: string,\n    file: {\n      fileName: string;\n      fileSize: number;\n      mimeType: string;\n      buffer: Buffer;\n    }\n  ) {\n    // Verify creative exists\n    const creative = await this.campaignRepo.findCreativeById(\n      campaignId,\n      creativeId\n    );\n    if (!creative) {\n      throw new NotFoundError(\"Creative not found\");\n    }\n\n    // Validate file type for image\n    if (!file.mimeType.startsWith(\"image/\")) {\n      throw new Error(\"File must be an image file\");\n    }\n\n    const uploadId = uuidv4();\n    const fileName = file.fileName;\n    const key = `creatives/image/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n\n    let url: string;\n    let signedUrl: string;\n\n    if (this.bucket) {\n      // Upload to R2 bucket\n      await this.bucket.put(key, file.buffer, {\n        httpMetadata: {\n          contentType: file.mimeType,\n        },\n      });\n\n      // Store the R2 key with a special prefix for database storage\n      url = `r2://${key}`;\n\n      // Generate URL for immediate use\n      if (this.presignedUrlGenerator) {\n        try {\n          // Use direct URL with custom domain if available\n          const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n            \"podcast-service-assets\",\n            key\n          );\n          signedUrl = directUrl || url; // Fall back to r2:// URL if no custom domain\n        } catch (error) {\n          console.warn(\"Failed to generate URL, using r2:// fallback:\", error);\n          signedUrl = url;\n        }\n      } else {\n        console.warn(\"No R2 credentials available for URL generation\");\n        signedUrl = url;\n      }\n    } else {\n      // Fallback for development/testing\n      url = `https://storage.example.com/creatives/image/${campaignId}/${creativeId}/${uploadId}/${fileName}`;\n      signedUrl = url;\n    }\n\n    // Update creative with the new file URL\n    try {\n      console.log(`Updating creative ${creativeId} with image URL`);\n      await this.campaignRepo.updateCreative(campaignId, creativeId, {\n        imageUrl: url, // Store R2 key for image files\n      });\n      console.log(`Creative updated successfully`);\n    } catch (error) {\n      console.error(\"Failed to update creative:\", error);\n      throw new Error(\n        `Database error: Failed to update creative - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Create upload record for tracking\n    const creativeUpload: CreativeUploadData = {\n      id: uploadId,\n      campaignId,\n      creativeId,\n      fileName: file.fileName,\n      fileSize: file.fileSize,\n      mimeType: file.mimeType,\n      url, // Store R2 key (r2://) for regenerating signed URLs\n      uploadedAt: new Date().toISOString(),\n    };\n\n    // Publish event with R2 key (generate signed URL for event payload)\n    try {\n      console.log(`Publishing creative.image.uploaded event`);\n      await this.eventPublisher.publish(\n        \"creative.image.uploaded\",\n        {\n          ...creativeUpload,\n          url: signedUrl, // Include signed URL in event for immediate use\n        },\n        creativeUpload.id\n      );\n      console.log(`Event published successfully`);\n    } catch (error) {\n      console.error(\"Failed to publish event:\", error);\n      throw new Error(\n        `Event error: Failed to publish creative.image.uploaded event - ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n\n    // Return upload info with signed URL for immediate use\n    return {\n      ...creativeUpload,\n      url: signedUrl,\n    };\n  }\n\n  async getCreativeMetadata(campaignId: string, creativeId: string) {\n    const creative = await this.campaignRepo.findCreativeById(\n      campaignId,\n      creativeId\n    );\n    if (!creative) {\n      throw new NotFoundError(\"Creative not found\");\n    }\n\n    let signedAudioUrl = creative.audioUrl;\n    let signedImageUrl = creative.imageUrl;\n\n    // Generate signed URL for audio if we have an R2 key and the generator is available\n    if (\n      this.presignedUrlGenerator &&\n      creative.audioUrl &&\n      creative.audioUrl.startsWith(\"r2://\")\n    ) {\n      try {\n        const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n          \"podcast-service-assets\",\n          creative.audioUrl.replace(\"r2://\", \"\")\n        );\n        signedAudioUrl = directUrl || creative.audioUrl;\n      } catch (error) {\n        console.warn(\"Failed to generate signed audio URL:\", error);\n      }\n    }\n\n    // Generate signed URL for image if we have an R2 key and the generator is available\n    if (\n      this.presignedUrlGenerator &&\n      creative.imageUrl &&\n      creative.imageUrl.startsWith(\"r2://\")\n    ) {\n      try {\n        const directUrl = this.presignedUrlGenerator.generateDirectUrl(\n          \"podcast-service-assets\",\n          creative.imageUrl.replace(\"r2://\", \"\")\n        );\n        signedImageUrl = directUrl || creative.imageUrl;\n      } catch (error) {\n        console.warn(\"Failed to generate signed image URL:\", error);\n      }\n    }\n\n    return {\n      ...creative,\n      audioUrl: signedAudioUrl,\n      imageUrl: signedImageUrl,\n    };\n  }\n}\n", "import { eq } from \"drizzle-orm\";\nimport { Database } from \"../database/client\";\nimport {\n  organizations,\n  type Organization,\n  type NewOrganization,\n} from \"../database/schema\";\nimport { Auth0Service } from \"../auth/auth0-service\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport class OrganizationService {\n  constructor(\n    private db: Database | undefined,\n    private auth0Service?: Auth0Service\n  ) {}\n\n  /**\n   * Get organization by ID\n   */\n  async getOrganization(id: string): Promise<Organization | null> {\n    if (!this.db) {\n      throw new Error(\"Database not available\");\n    }\n\n    const result = await this.db\n      .select()\n      .from(organizations)\n      .where(eq(organizations.id, id))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  /**\n   * Get organization by Auth0 org ID\n   */\n  async getOrganizationByAuth0Id(\n    auth0OrgId: string\n  ): Promise<Organization | null> {\n    if (!this.db) {\n      throw new Error(\"Database not available\");\n    }\n\n    const result = await this.db\n      .select()\n      .from(organizations)\n      .where(eq(organizations.auth0OrgId, auth0OrgId))\n      .limit(1);\n\n    return result[0] || null;\n  }\n\n  /**\n   * Get user's organizations from Auth0\n   */\n  async getUserOrganizations(\n    userId: string\n  ): Promise<{ id: string; name: string; auth0_id: string }[]> {\n    if (!this.auth0Service) {\n      throw new Error(\"Auth0 service not configured\");\n    }\n\n    try {\n      const auth0Orgs = await this.auth0Service.getUserOrganizations(userId);\n\n      // Convert to the format expected by the client\n      return auth0Orgs.map((org) => ({\n        id: org.id,\n        name: org.display_name || org.name,\n        auth0_id: org.id,\n      }));\n    } catch (error) {\n      console.error(\"Failed to get user organizations:\", error);\n      throw new Error(\"Failed to fetch user organizations\");\n    }\n  }\n\n  /**\n   * Create a new organization both in Auth0 and locally\n   */\n  async createOrganization(\n    name: string,\n    userId: string,\n    displayName?: string\n  ): Promise<{ organization: Organization; auth0_org: any }> {\n    if (!this.auth0Service) {\n      throw new Error(\"Auth0 service not configured\");\n    }\n\n    if (!this.db) {\n      throw new Error(\"Database not available\");\n    }\n\n    try {\n      // Create organization in Auth0\n      const auth0Org = await this.auth0Service.createOrganization(\n        name,\n        displayName\n      );\n\n      // Add user to the organization with admin role\n      await this.auth0Service.addUserToOrganization(auth0Org.id, userId, [\n        \"podcasts:admin\",\n      ]);\n\n      // Create organization in local database\n      const newOrg: NewOrganization = {\n        id: uuidv4(),\n        name: auth0Org.display_name || auth0Org.name,\n        auth0OrgId: auth0Org.id,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      const result = await this.db\n        .insert(organizations)\n        .values(newOrg)\n        .returning();\n\n      return {\n        organization: result[0],\n        auth0_org: auth0Org,\n      };\n    } catch (error) {\n      console.error(\"Failed to create organization:\", error);\n      throw new Error(\"Failed to create organization\");\n    }\n  }\n\n  /**\n   * Sync an Auth0 organization to local database if it doesn't exist\n   */\n  async syncOrganization(auth0OrgId: string): Promise<Organization> {\n    // Check if organization already exists locally\n    let org = await this.getOrganizationByAuth0Id(auth0OrgId);\n\n    if (org) {\n      return org;\n    }\n\n    if (!this.db) {\n      throw new Error(\"Database not available\");\n    }\n\n    if (!this.auth0Service) {\n      throw new Error(\"Auth0 service not configured\");\n    }\n\n    // Fetch from Auth0 and create locally\n    const auth0Org = await this.auth0Service.getOrganization(auth0OrgId);\n    if (!auth0Org) {\n      throw new Error(`Organization ${auth0OrgId} not found in Auth0`);\n    }\n\n    const newOrg: NewOrganization = {\n      id: uuidv4(),\n      name: auth0Org.display_name || auth0Org.name,\n      auth0OrgId: auth0Org.id,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const result = await this.db\n      .insert(organizations)\n      .values(newOrg)\n      .returning();\n    return result[0];\n  }\n}\n", "import { ManagementClient } from \"auth0\";\n\nexport interface Auth0Organization {\n  id: string;\n  name: string;\n  display_name?: string;\n  branding?: {\n    logo_url?: string;\n    colors?: {\n      primary?: string;\n      page_background?: string;\n    };\n  };\n  metadata?: Record<string, any>;\n}\n\nexport class Auth0Service {\n  private management: ManagementClient;\n\n  constructor(domain: string, clientId: string, clientSecret: string) {\n    this.management = new ManagementClient({\n      domain,\n      clientId,\n      clientSecret,\n      headers: {\n        \"tenant-id\": \"sesamy\",\n      },\n    });\n  }\n\n  /**\n   * Get organizations for a user\n   */\n  async getUserOrganizations(userId: string): Promise<Auth0Organization[]> {\n    try {\n      const organizations = await this.management.users.getUserOrganizations({\n        id: userId,\n      });\n      return organizations.data as Auth0Organization[];\n    } catch (error) {\n      console.error(\"Failed to get user organizations:\", error);\n      throw new Error(\"Failed to fetch user organizations\");\n    }\n  }\n\n  /**\n   * Create a new organization\n   */\n  async createOrganization(\n    name: string,\n    displayName?: string\n  ): Promise<Auth0Organization> {\n    try {\n      const organization = await this.management.organizations.create({\n        name,\n        display_name: displayName || name,\n      });\n      return organization.data as Auth0Organization;\n    } catch (error) {\n      console.error(\"Failed to create organization:\", error);\n      throw new Error(\"Failed to create organization\");\n    }\n  }\n\n  /**\n   * Add user to organization with specified roles\n   */\n  async addUserToOrganization(\n    orgId: string,\n    userId: string,\n    roles: string[]\n  ): Promise<void> {\n    try {\n      // First add the user to the organization\n      await this.management.organizations.addMembers(\n        { id: orgId },\n        { members: [userId] }\n      );\n\n      // Then assign roles\n      if (roles.length > 0) {\n        await this.management.organizations.addMemberRoles(\n          { id: orgId, user_id: userId },\n          { roles }\n        );\n      }\n    } catch (error) {\n      console.error(\"Failed to add user to organization:\", error);\n      throw new Error(\"Failed to add user to organization\");\n    }\n  }\n\n  /**\n   * Get organization by ID\n   */\n  async getOrganization(orgId: string): Promise<Auth0Organization | null> {\n    try {\n      const organization = await this.management.organizations.get({\n        id: orgId,\n      });\n      return organization.data as Auth0Organization;\n    } catch (error) {\n      console.error(\"Failed to get organization:\", error);\n      return null;\n    }\n  }\n}\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "export { compactDecrypt } from './jwe/compact/decrypt.js';\nexport { flattenedDecrypt } from './jwe/flattened/decrypt.js';\nexport { generalDecrypt } from './jwe/general/decrypt.js';\nexport { GeneralEncrypt } from './jwe/general/encrypt.js';\nexport { compactVerify } from './jws/compact/verify.js';\nexport { flattenedVerify } from './jws/flattened/verify.js';\nexport { generalVerify } from './jws/general/verify.js';\nexport { jwtVerify } from './jwt/verify.js';\nexport { jwtDecrypt } from './jwt/decrypt.js';\nexport { CompactEncrypt } from './jwe/compact/encrypt.js';\nexport { FlattenedEncrypt } from './jwe/flattened/encrypt.js';\nexport { CompactSign } from './jws/compact/sign.js';\nexport { FlattenedSign } from './jws/flattened/sign.js';\nexport { GeneralSign } from './jws/general/sign.js';\nexport { SignJWT } from './jwt/sign.js';\nexport { EncryptJWT } from './jwt/encrypt.js';\nexport { calculateJwkThumbprint, calculateJwkThumbprintUri } from './jwk/thumbprint.js';\nexport { EmbeddedJWK } from './jwk/embedded.js';\nexport { createLocalJWKSet } from './jwks/local.js';\nexport { createRemoteJWKSet } from './jwks/remote.js';\nexport { UnsecuredJWT } from './jwt/unsecured.js';\nexport { exportPKCS8, exportSPKI, exportJWK } from './key/export.js';\nexport { importSPKI, importPKCS8, importX509, importJWK } from './key/import.js';\nexport { decodeProtectedHeader } from './util/decode_protected_header.js';\nexport { decodeJwt } from './util/decode_jwt.js';\nimport * as errors_1 from './util/errors.js';\nexport { errors_1 as errors };\nexport { generateKeyPair } from './key/generate_key_pair.js';\nexport { generateSecret } from './key/generate_secret.js';\nimport * as base64url_1 from './util/base64url.js';\nexport { base64url_1 as base64url };\nexport { default as cryptoRuntime } from './util/runtime.js';\n", "import { encoder, decoder } from '../lib/buffer_utils.js';\nexport const encodeBase64 = (input) => {\n    let unencoded = input;\n    if (typeof unencoded === 'string') {\n        unencoded = encoder.encode(unencoded);\n    }\n    const CHUNK_SIZE = 0x8000;\n    const arr = [];\n    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {\n        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));\n    }\n    return btoa(arr.join(''));\n};\nexport const encode = (input) => {\n    return encodeBase64(input).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n};\nexport const decodeBase64 = (encoded) => {\n    const binary = atob(encoded);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n};\nexport const decode = (input) => {\n    let encoded = input;\n    if (encoded instanceof Uint8Array) {\n        encoded = decoder.decode(encoded);\n    }\n    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, '');\n    try {\n        return decodeBase64(encoded);\n    }\n    catch (_a) {\n        throw new TypeError('The input to be decoded is not correctly encoded.');\n    }\n};\n", "import digest from '../runtime/digest.js';\nexport const encoder = new TextEncoder();\nexport const decoder = new TextDecoder();\nconst MAX_INT32 = 2 ** 32;\nexport function concat(...buffers) {\n    const size = buffers.reduce((acc, { length }) => acc + length, 0);\n    const buf = new Uint8Array(size);\n    let i = 0;\n    buffers.forEach((buffer) => {\n        buf.set(buffer, i);\n        i += buffer.length;\n    });\n    return buf;\n}\nexport function p2s(alg, p2sInput) {\n    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);\n}\nfunction writeUInt32BE(buf, value, offset) {\n    if (value < 0 || value >= MAX_INT32) {\n        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);\n    }\n    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);\n}\nexport function uint64be(value) {\n    const high = Math.floor(value / MAX_INT32);\n    const low = value % MAX_INT32;\n    const buf = new Uint8Array(8);\n    writeUInt32BE(buf, high, 0);\n    writeUInt32BE(buf, low, 4);\n    return buf;\n}\nexport function uint32be(value) {\n    const buf = new Uint8Array(4);\n    writeUInt32BE(buf, value);\n    return buf;\n}\nexport function lengthAndInput(input) {\n    return concat(uint32be(input.length), input);\n}\nexport async function concatKdf(secret, bits, value) {\n    const iterations = Math.ceil((bits >> 3) / 32);\n    const res = new Uint8Array(iterations * 32);\n    for (let iter = 0; iter < iterations; iter++) {\n        const buf = new Uint8Array(4 + secret.length + value.length);\n        buf.set(uint32be(iter + 1));\n        buf.set(secret, 4);\n        buf.set(value, 4 + secret.length);\n        res.set(await digest('sha256', buf), iter * 32);\n    }\n    return res.slice(0, bits >> 3);\n}\n", "export default crypto;\nexport const isCryptoKey = (key) => key instanceof CryptoKey;\n", "export class JOSEError extends Error {\n    static get code() {\n        return 'ERR_JOSE_GENERIC';\n    }\n    constructor(message) {\n        var _a;\n        super(message);\n        this.code = 'ERR_JOSE_GENERIC';\n        this.name = this.constructor.name;\n        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);\n    }\n}\nexport class JWTClaimValidationFailed extends JOSEError {\n    static get code() {\n        return 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n    }\n    constructor(message, claim = 'unspecified', reason = 'unspecified') {\n        super(message);\n        this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexport class JWTExpired extends JOSEError {\n    static get code() {\n        return 'ERR_JWT_EXPIRED';\n    }\n    constructor(message, claim = 'unspecified', reason = 'unspecified') {\n        super(message);\n        this.code = 'ERR_JWT_EXPIRED';\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexport class JOSEAlgNotAllowed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';\n    }\n    static get code() {\n        return 'ERR_JOSE_ALG_NOT_ALLOWED';\n    }\n}\nexport class JOSENotSupported extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JOSE_NOT_SUPPORTED';\n    }\n    static get code() {\n        return 'ERR_JOSE_NOT_SUPPORTED';\n    }\n}\nexport class JWEDecryptionFailed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWE_DECRYPTION_FAILED';\n        this.message = 'decryption operation failed';\n    }\n    static get code() {\n        return 'ERR_JWE_DECRYPTION_FAILED';\n    }\n}\nexport class JWEDecompressionFailed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWE_DECOMPRESSION_FAILED';\n        this.message = 'decompression operation failed';\n    }\n    static get code() {\n        return 'ERR_JWE_DECOMPRESSION_FAILED';\n    }\n}\nexport class JWEInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWE_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWE_INVALID';\n    }\n}\nexport class JWSInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWS_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWS_INVALID';\n    }\n}\nexport class JWTInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWT_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWT_INVALID';\n    }\n}\nexport class JWKInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWK_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWK_INVALID';\n    }\n}\nexport class JWKSInvalid extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_INVALID';\n    }\n    static get code() {\n        return 'ERR_JWKS_INVALID';\n    }\n}\nexport class JWKSNoMatchingKey extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_NO_MATCHING_KEY';\n        this.message = 'no applicable key found in the JSON Web Key Set';\n    }\n    static get code() {\n        return 'ERR_JWKS_NO_MATCHING_KEY';\n    }\n}\nexport class JWKSMultipleMatchingKeys extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n        this.message = 'multiple matching keys found in the JSON Web Key Set';\n    }\n    static get code() {\n        return 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n    }\n}\nSymbol.asyncIterator;\nexport class JWKSTimeout extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWKS_TIMEOUT';\n        this.message = 'request timed out';\n    }\n    static get code() {\n        return 'ERR_JWKS_TIMEOUT';\n    }\n}\nexport class JWSSignatureVerificationFailed extends JOSEError {\n    constructor() {\n        super(...arguments);\n        this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n        this.message = 'signature verification failed';\n    }\n    static get code() {\n        return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n    }\n}\n", "function unusable(name, prop = 'algorithm.name') {\n    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n    return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n    return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n    switch (alg) {\n        case 'ES256':\n            return 'P-256';\n        case 'ES384':\n            return 'P-384';\n        case 'ES512':\n            return 'P-521';\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction checkUsage(key, usages) {\n    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {\n        let msg = 'CryptoKey does not support this operation, its usages must include ';\n        if (usages.length > 2) {\n            const last = usages.pop();\n            msg += `one of ${usages.join(', ')}, or ${last}.`;\n        }\n        else if (usages.length === 2) {\n            msg += `one of ${usages[0]} or ${usages[1]}.`;\n        }\n        else {\n            msg += `${usages[0]}.`;\n        }\n        throw new TypeError(msg);\n    }\n}\nexport function checkSigCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512': {\n            if (!isAlgorithm(key.algorithm, 'HMAC'))\n                throw unusable('HMAC');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'RS256':\n        case 'RS384':\n        case 'RS512': {\n            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))\n                throw unusable('RSASSA-PKCS1-v1_5');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'PS256':\n        case 'PS384':\n        case 'PS512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))\n                throw unusable('RSA-PSS');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'EdDSA': {\n            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {\n                throw unusable('Ed25519 or Ed448');\n            }\n            break;\n        }\n        case 'ES256':\n        case 'ES384':\n        case 'ES512': {\n            if (!isAlgorithm(key.algorithm, 'ECDSA'))\n                throw unusable('ECDSA');\n            const expected = getNamedCurve(alg);\n            const actual = key.algorithm.namedCurve;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.namedCurve');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM': {\n            if (!isAlgorithm(key.algorithm, 'AES-GCM'))\n                throw unusable('AES-GCM');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            if (!isAlgorithm(key.algorithm, 'AES-KW'))\n                throw unusable('AES-KW');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'ECDH': {\n            switch (key.algorithm.name) {\n                case 'ECDH':\n                case 'X25519':\n                case 'X448':\n                    break;\n                default:\n                    throw unusable('ECDH, X25519, or X448');\n            }\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW':\n            if (!isAlgorithm(key.algorithm, 'PBKDF2'))\n                throw unusable('PBKDF2');\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))\n                throw unusable('RSA-OAEP');\n            const expected = parseInt(alg.slice(9), 10) || 1;\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\n", "function message(msg, actual, ...types) {\n    if (types.length > 2) {\n        const last = types.pop();\n        msg += `one of type ${types.join(', ')}, or ${last}.`;\n    }\n    else if (types.length === 2) {\n        msg += `one of type ${types[0]} or ${types[1]}.`;\n    }\n    else {\n        msg += `of type ${types[0]}.`;\n    }\n    if (actual == null) {\n        msg += ` Received ${actual}`;\n    }\n    else if (typeof actual === 'function' && actual.name) {\n        msg += ` Received function ${actual.name}`;\n    }\n    else if (typeof actual === 'object' && actual != null) {\n        if (actual.constructor && actual.constructor.name) {\n            msg += ` Received an instance of ${actual.constructor.name}`;\n        }\n    }\n    return msg;\n}\nexport default (actual, ...types) => {\n    return message('Key must be ', actual, ...types);\n};\nexport function withAlg(alg, actual, ...types) {\n    return message(`Key for the ${alg} algorithm must be `, actual, ...types);\n}\n", "import { isCryptoKey } from './webcrypto.js';\nexport default (key) => {\n    return isCryptoKey(key);\n};\nexport const types = ['CryptoKey'];\n", "const isDisjoint = (...headers) => {\n    const sources = headers.filter(Boolean);\n    if (sources.length === 0 || sources.length === 1) {\n        return true;\n    }\n    let acc;\n    for (const header of sources) {\n        const parameters = Object.keys(header);\n        if (!acc || acc.size === 0) {\n            acc = new Set(parameters);\n            continue;\n        }\n        for (const parameter of parameters) {\n            if (acc.has(parameter)) {\n                return false;\n            }\n            acc.add(parameter);\n        }\n    }\n    return true;\n};\nexport default isDisjoint;\n", "function isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nexport default function isObject(input) {\n    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(input) === null) {\n        return true;\n    }\n    let proto = input;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(input) === proto;\n}\n", "export default (alg, key) => {\n    if (alg.startsWith('RS') || alg.startsWith('PS')) {\n        const { modulusLength } = key.algorithm;\n        if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);\n        }\n    }\n};\n", "import { decode as decodeBase64URL } from '../runtime/base64url.js';\nimport { fromSPKI, fromPKCS8, fromX509 } from '../runtime/asn1.js';\nimport asKeyObject from '../runtime/jwk_to_key.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport isObject from '../lib/is_object.js';\nexport async function importSPKI(spki, alg, options) {\n    if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {\n        throw new TypeError('\"spki\" must be SPKI formatted string');\n    }\n    return fromSPKI(spki, alg, options);\n}\nexport async function importX509(x509, alg, options) {\n    if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {\n        throw new TypeError('\"x509\" must be X.509 formatted string');\n    }\n    return fromX509(x509, alg, options);\n}\nexport async function importPKCS8(pkcs8, alg, options) {\n    if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {\n        throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\n    }\n    return fromPKCS8(pkcs8, alg, options);\n}\nexport async function importJWK(jwk, alg, octAsKeyObject) {\n    var _a;\n    if (!isObject(jwk)) {\n        throw new TypeError('JWK must be an object');\n    }\n    alg || (alg = jwk.alg);\n    switch (jwk.kty) {\n        case 'oct':\n            if (typeof jwk.k !== 'string' || !jwk.k) {\n                throw new TypeError('missing \"k\" (Key Value) Parameter value');\n            }\n            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);\n            if (octAsKeyObject) {\n                return asKeyObject({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false });\n            }\n            return decodeBase64URL(jwk.k);\n        case 'RSA':\n            if (jwk.oth !== undefined) {\n                throw new JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\n            }\n        case 'EC':\n        case 'OKP':\n            return asKeyObject({ ...jwk, alg });\n        default:\n            throw new JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\n    }\n}\n", "import crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encodeBase64, decodeBase64 } from './base64url.js';\nimport formatPEM from '../lib/format_pem.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nconst genericExport = async (keyType, keyFormat, key) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    if (!key.extractable) {\n        throw new TypeError('CryptoKey is not extractable');\n    }\n    if (key.type !== keyType) {\n        throw new TypeError(`key is not a ${keyType} key`);\n    }\n    return formatPEM(encodeBase64(new Uint8Array(await crypto.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);\n};\nexport const toSPKI = (key) => {\n    return genericExport('public', 'spki', key);\n};\nexport const toPKCS8 = (key) => {\n    return genericExport('private', 'pkcs8', key);\n};\nconst findOid = (keyData, oid, from = 0) => {\n    if (from === 0) {\n        oid.unshift(oid.length);\n        oid.unshift(0x06);\n    }\n    let i = keyData.indexOf(oid[0], from);\n    if (i === -1)\n        return false;\n    const sub = keyData.subarray(i, i + oid.length);\n    if (sub.length !== oid.length)\n        return false;\n    return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);\n};\nconst getNamedCurve = (keyData) => {\n    switch (true) {\n        case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):\n            return 'P-256';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):\n            return 'P-384';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):\n            return 'P-521';\n        case findOid(keyData, [0x2b, 0x65, 0x6e]):\n            return 'X25519';\n        case findOid(keyData, [0x2b, 0x65, 0x6f]):\n            return 'X448';\n        case findOid(keyData, [0x2b, 0x65, 0x70]):\n            return 'Ed25519';\n        case findOid(keyData, [0x2b, 0x65, 0x71]):\n            return 'Ed448';\n        default:\n            throw new JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');\n    }\n};\nconst genericImport = async (replace, keyFormat, pem, alg, options) => {\n    var _a;\n    let algorithm;\n    let keyUsages;\n    const keyData = new Uint8Array(atob(pem.replace(replace, ''))\n        .split('')\n        .map((c) => c.charCodeAt(0)));\n    const isPublic = keyFormat === 'spki';\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = { name: 'RSA-PSS', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n            };\n            keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            const namedCurve = getNamedCurve(keyData);\n            algorithm = namedCurve.startsWith('P-') ? { name: 'ECDH', namedCurve } : { name: namedCurve };\n            keyUsages = isPublic ? [] : ['deriveBits'];\n            break;\n        }\n        case 'EdDSA':\n            algorithm = { name: getNamedCurve(keyData) };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (Algorithm) value');\n    }\n    return crypto.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n};\nexport const fromPKCS8 = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, 'pkcs8', pem, alg, options);\n};\nexport const fromSPKI = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, 'spki', pem, alg, options);\n};\nfunction getElement(seq) {\n    let result = [];\n    let next = 0;\n    while (next < seq.length) {\n        let nextPart = parseElement(seq.subarray(next));\n        result.push(nextPart);\n        next += nextPart.byteLength;\n    }\n    return result;\n}\nfunction parseElement(bytes) {\n    let position = 0;\n    let tag = bytes[0] & 0x1f;\n    position++;\n    if (tag === 0x1f) {\n        tag = 0;\n        while (bytes[position] >= 0x80) {\n            tag = tag * 128 + bytes[position] - 0x80;\n            position++;\n        }\n        tag = tag * 128 + bytes[position] - 0x80;\n        position++;\n    }\n    let length = 0;\n    if (bytes[position] < 0x80) {\n        length = bytes[position];\n        position++;\n    }\n    else if (length === 0x80) {\n        length = 0;\n        while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {\n            if (length > bytes.byteLength) {\n                throw new TypeError('invalid indefinite form length');\n            }\n            length++;\n        }\n        const byteLength = position + length + 2;\n        return {\n            byteLength,\n            contents: bytes.subarray(position, position + length),\n            raw: bytes.subarray(0, byteLength),\n        };\n    }\n    else {\n        let numberOfDigits = bytes[position] & 0x7f;\n        position++;\n        length = 0;\n        for (let i = 0; i < numberOfDigits; i++) {\n            length = length * 256 + bytes[position];\n            position++;\n        }\n    }\n    const byteLength = position + length;\n    return {\n        byteLength,\n        contents: bytes.subarray(position, byteLength),\n        raw: bytes.subarray(0, byteLength),\n    };\n}\nfunction spkiFromX509(buf) {\n    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);\n    return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);\n}\nfunction getSPKI(x509) {\n    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\\s)/g, '');\n    const raw = decodeBase64(pem);\n    return formatPEM(spkiFromX509(raw), 'PUBLIC KEY');\n}\nexport const fromX509 = (pem, alg, options) => {\n    let spki;\n    try {\n        spki = getSPKI(pem);\n    }\n    catch (cause) {\n        throw new TypeError('Failed to parse the X.509 certificate', { cause });\n    }\n    return fromSPKI(spki, alg, options);\n};\n", "import crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\nfunction subtleMapping(jwk) {\n    let algorithm;\n    let keyUsages;\n    switch (jwk.kty) {\n        case 'oct': {\n            switch (jwk.alg) {\n                case 'HS256':\n                case 'HS384':\n                case 'HS512':\n                    algorithm = { name: 'HMAC', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case 'A128CBC-HS256':\n                case 'A192CBC-HS384':\n                case 'A256CBC-HS512':\n                    throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n                case 'A128GCM':\n                case 'A192GCM':\n                case 'A256GCM':\n                case 'A128GCMKW':\n                case 'A192GCMKW':\n                case 'A256GCMKW':\n                    algorithm = { name: 'AES-GCM' };\n                    keyUsages = ['encrypt', 'decrypt'];\n                    break;\n                case 'A128KW':\n                case 'A192KW':\n                case 'A256KW':\n                    algorithm = { name: 'AES-KW' };\n                    keyUsages = ['wrapKey', 'unwrapKey'];\n                    break;\n                case 'PBES2-HS256+A128KW':\n                case 'PBES2-HS384+A192KW':\n                case 'PBES2-HS512+A256KW':\n                    algorithm = { name: 'PBKDF2' };\n                    keyUsages = ['deriveBits'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'RSA': {\n            switch (jwk.alg) {\n                case 'PS256':\n                case 'PS384':\n                case 'PS512':\n                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RS256':\n                case 'RS384':\n                case 'RS512':\n                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RSA-OAEP':\n                case 'RSA-OAEP-256':\n                case 'RSA-OAEP-384':\n                case 'RSA-OAEP-512':\n                    algorithm = {\n                        name: 'RSA-OAEP',\n                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,\n                    };\n                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'EC': {\n            switch (jwk.alg) {\n                case 'ES256':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES384':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES512':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'OKP': {\n            switch (jwk.alg) {\n                case 'EdDSA':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n    return { algorithm, keyUsages };\n}\nconst parse = async (jwk) => {\n    var _a, _b;\n    if (!jwk.alg) {\n        throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\n    }\n    const { algorithm, keyUsages } = subtleMapping(jwk);\n    const rest = [\n        algorithm,\n        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,\n        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages,\n    ];\n    if (algorithm.name === 'PBKDF2') {\n        return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n    }\n    const keyData = { ...jwk };\n    delete keyData.alg;\n    delete keyData.use;\n    return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;\n", "import { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nconst symmetricTypeCheck = (alg, key) => {\n    if (key instanceof Uint8Array)\n        return;\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types, 'Uint8Array'));\n    }\n    if (key.type !== 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (alg, key, usage) => {\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types));\n    }\n    if (key.type === 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === 'sign' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === 'decrypt' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === 'verify' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nconst checkKeyType = (alg, key, usage) => {\n    const symmetric = alg.startsWith('HS') ||\n        alg === 'dir' ||\n        alg.startsWith('PBES2') ||\n        /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(alg, key);\n    }\n    else {\n        asymmetricTypeCheck(alg, key, usage);\n    }\n};\nexport default checkKeyType;\n", "import { JOSENotSupported } from '../util/errors.js';\nfunction validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {\n    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be integrity protected');\n    }\n    if (!protectedHeader || protectedHeader.crit === undefined) {\n        return new Set();\n    }\n    if (!Array.isArray(protectedHeader.crit) ||\n        protectedHeader.crit.length === 0 ||\n        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be an array of non-empty strings when present');\n    }\n    let recognized;\n    if (recognizedOption !== undefined) {\n        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);\n    }\n    else {\n        recognized = recognizedDefault;\n    }\n    for (const parameter of protectedHeader.crit) {\n        if (!recognized.has(parameter)) {\n            throw new JOSENotSupported(`Extension Header Parameter \"${parameter}\" is not recognized`);\n        }\n        if (joseHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" is missing`);\n        }\n        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" MUST be integrity protected`);\n        }\n    }\n    return new Set(protectedHeader.crit);\n}\nexport default validateCrit;\n", "const validateAlgorithms = (option, algorithms) => {\n    if (algorithms !== undefined &&\n        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {\n        throw new TypeError(`\"${option}\" option must be an array of strings`);\n    }\n    if (!algorithms) {\n        return undefined;\n    }\n    return new Set(algorithms);\n};\nexport default validateAlgorithms;\n", "import { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid } from '../../util/errors.js';\nimport { decoder } from '../../lib/buffer_utils.js';\nexport async function compactVerify(jws, key, options) {\n    if (jws instanceof Uint8Array) {\n        jws = decoder.decode(jws);\n    }\n    if (typeof jws !== 'string') {\n        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');\n    }\n    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');\n    if (length !== 3) {\n        throw new JWSInvalid('Invalid Compact JWS');\n    }\n    const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);\n    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n", "import { decode as base64url } from '../../runtime/base64url.js';\nimport verify from '../../runtime/verify.js';\nimport { JOSEAlgNotAllowed, JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';\nimport { concat, encoder, decoder } from '../../lib/buffer_utils.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport isObject from '../../lib/is_object.js';\nimport checkKeyType from '../../lib/check_key_type.js';\nimport validateCrit from '../../lib/validate_crit.js';\nimport validateAlgorithms from '../../lib/validate_algorithms.js';\nexport async function flattenedVerify(jws, key, options) {\n    var _a;\n    if (!isObject(jws)) {\n        throw new JWSInvalid('Flattened JWS must be an object');\n    }\n    if (jws.protected === undefined && jws.header === undefined) {\n        throw new JWSInvalid('Flattened JWS must have either of the \"protected\" or \"header\" members');\n    }\n    if (jws.protected !== undefined && typeof jws.protected !== 'string') {\n        throw new JWSInvalid('JWS Protected Header incorrect type');\n    }\n    if (jws.payload === undefined) {\n        throw new JWSInvalid('JWS Payload missing');\n    }\n    if (typeof jws.signature !== 'string') {\n        throw new JWSInvalid('JWS Signature missing or incorrect type');\n    }\n    if (jws.header !== undefined && !isObject(jws.header)) {\n        throw new JWSInvalid('JWS Unprotected Header incorrect type');\n    }\n    let parsedProt = {};\n    if (jws.protected) {\n        try {\n            const protectedHeader = base64url(jws.protected);\n            parsedProt = JSON.parse(decoder.decode(protectedHeader));\n        }\n        catch (_b) {\n            throw new JWSInvalid('JWS Protected Header is invalid');\n        }\n    }\n    if (!isDisjoint(parsedProt, jws.header)) {\n        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');\n    }\n    const joseHeader = {\n        ...parsedProt,\n        ...jws.header,\n    };\n    const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n    let b64 = true;\n    if (extensions.has('b64')) {\n        b64 = parsedProt.b64;\n        if (typeof b64 !== 'boolean') {\n            throw new JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n        }\n    }\n    const { alg } = joseHeader;\n    if (typeof alg !== 'string' || !alg) {\n        throw new JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n    const algorithms = options && validateAlgorithms('algorithms', options.algorithms);\n    if (algorithms && !algorithms.has(alg)) {\n        throw new JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n    }\n    if (b64) {\n        if (typeof jws.payload !== 'string') {\n            throw new JWSInvalid('JWS Payload must be a string');\n        }\n    }\n    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {\n        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');\n    }\n    let resolvedKey = false;\n    if (typeof key === 'function') {\n        key = await key(parsedProt, jws);\n        resolvedKey = true;\n    }\n    checkKeyType(alg, key, 'verify');\n    const data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);\n    let signature;\n    try {\n        signature = base64url(jws.signature);\n    }\n    catch (_c) {\n        throw new JWSInvalid('Failed to base64url decode the signature');\n    }\n    const verified = await verify(alg, key, signature, data);\n    if (!verified) {\n        throw new JWSSignatureVerificationFailed();\n    }\n    let payload;\n    if (b64) {\n        try {\n            payload = base64url(jws.payload);\n        }\n        catch (_d) {\n            throw new JWSInvalid('Failed to base64url decode the payload');\n        }\n    }\n    else if (typeof jws.payload === 'string') {\n        payload = encoder.encode(jws.payload);\n    }\n    else {\n        payload = jws.payload;\n    }\n    const result = { payload };\n    if (jws.protected !== undefined) {\n        result.protectedHeader = parsedProt;\n    }\n    if (jws.header !== undefined) {\n        result.unprotectedHeader = jws.header;\n    }\n    if (resolvedKey) {\n        return { ...result, key };\n    }\n    return result;\n}\n", "import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getVerifyKey from './get_sign_verify_key.js';\nconst verify = async (alg, key, signature, data) => {\n    const cryptoKey = await getVerifyKey(alg, key, 'verify');\n    checkKeyLength(alg, cryptoKey);\n    const algorithm = subtleAlgorithm(alg, cryptoKey.algorithm);\n    try {\n        return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexport default verify;\n", "import { JOSENotSupported } from '../util/errors.js';\nexport default function subtleDsa(alg, algorithm) {\n    const hash = `SHA-${alg.slice(-3)}`;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            return { hash, name: 'HMAC' };\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            return { hash, name: 'RSA-PSS', saltLength: alg.slice(-3) >> 3 };\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            return { hash, name: 'RSASSA-PKCS1-v1_5' };\n        case 'ES256':\n        case 'ES384':\n        case 'ES512':\n            return { hash, name: 'ECDSA', namedCurve: algorithm.namedCurve };\n        case 'EdDSA':\n            return { name: algorithm.name };\n        default:\n            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n}\n", "import crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkSigCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport default function getCryptoKey(alg, key, usage) {\n    if (isCryptoKey(key)) {\n        checkSigCryptoKey(key, alg, usage);\n        return key;\n    }\n    if (key instanceof Uint8Array) {\n        if (!alg.startsWith('HS')) {\n            throw new TypeError(invalidKeyInput(key, ...types));\n        }\n        return crypto.subtle.importKey('raw', key, { hash: `SHA-${alg.slice(-3)}`, name: 'HMAC' }, false, [usage]);\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\n", "import { compactVerify } from '../jws/compact/verify.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTInvalid } from '../util/errors.js';\nexport async function jwtVerify(jwt, key, options) {\n    var _a;\n    const verified = await compactVerify(jwt, key, options);\n    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {\n        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);\n    const result = { payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n", "import { JWTClaimValidationFailed, JWTExpired, JWTInvalid } from '../util/errors.js';\nimport { decoder } from './buffer_utils.js';\nimport epoch from './epoch.js';\nimport secs from './secs.js';\nimport isObject from './is_object.js';\nconst normalizeTyp = (value) => value.toLowerCase().replace(/^application\\//, '');\nconst checkAudiencePresence = (audPayload, audOption) => {\n    if (typeof audPayload === 'string') {\n        return audOption.includes(audPayload);\n    }\n    if (Array.isArray(audPayload)) {\n        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));\n    }\n    return false;\n};\nexport default (protectedHeader, encodedPayload, options = {}) => {\n    const { typ } = options;\n    if (typ &&\n        (typeof protectedHeader.typ !== 'string' ||\n            normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {\n        throw new JWTClaimValidationFailed('unexpected \"typ\" JWT header value', 'typ', 'check_failed');\n    }\n    let payload;\n    try {\n        payload = JSON.parse(decoder.decode(encodedPayload));\n    }\n    catch (_a) {\n    }\n    if (!isObject(payload)) {\n        throw new JWTInvalid('JWT Claims Set must be a top-level JSON object');\n    }\n    const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;\n    if (maxTokenAge !== undefined)\n        requiredClaims.push('iat');\n    if (audience !== undefined)\n        requiredClaims.push('aud');\n    if (subject !== undefined)\n        requiredClaims.push('sub');\n    if (issuer !== undefined)\n        requiredClaims.push('iss');\n    for (const claim of new Set(requiredClaims.reverse())) {\n        if (!(claim in payload)) {\n            throw new JWTClaimValidationFailed(`missing required \"${claim}\" claim`, claim, 'missing');\n        }\n    }\n    if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {\n        throw new JWTClaimValidationFailed('unexpected \"iss\" claim value', 'iss', 'check_failed');\n    }\n    if (subject && payload.sub !== subject) {\n        throw new JWTClaimValidationFailed('unexpected \"sub\" claim value', 'sub', 'check_failed');\n    }\n    if (audience &&\n        !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {\n        throw new JWTClaimValidationFailed('unexpected \"aud\" claim value', 'aud', 'check_failed');\n    }\n    let tolerance;\n    switch (typeof options.clockTolerance) {\n        case 'string':\n            tolerance = secs(options.clockTolerance);\n            break;\n        case 'number':\n            tolerance = options.clockTolerance;\n            break;\n        case 'undefined':\n            tolerance = 0;\n            break;\n        default:\n            throw new TypeError('Invalid clockTolerance option type');\n    }\n    const { currentDate } = options;\n    const now = epoch(currentDate || new Date());\n    if ((payload.iat !== undefined || maxTokenAge) && typeof payload.iat !== 'number') {\n        throw new JWTClaimValidationFailed('\"iat\" claim must be a number', 'iat', 'invalid');\n    }\n    if (payload.nbf !== undefined) {\n        if (typeof payload.nbf !== 'number') {\n            throw new JWTClaimValidationFailed('\"nbf\" claim must be a number', 'nbf', 'invalid');\n        }\n        if (payload.nbf > now + tolerance) {\n            throw new JWTClaimValidationFailed('\"nbf\" claim timestamp check failed', 'nbf', 'check_failed');\n        }\n    }\n    if (payload.exp !== undefined) {\n        if (typeof payload.exp !== 'number') {\n            throw new JWTClaimValidationFailed('\"exp\" claim must be a number', 'exp', 'invalid');\n        }\n        if (payload.exp <= now - tolerance) {\n            throw new JWTExpired('\"exp\" claim timestamp check failed', 'exp', 'check_failed');\n        }\n    }\n    if (maxTokenAge) {\n        const age = now - payload.iat;\n        const max = typeof maxTokenAge === 'number' ? maxTokenAge : secs(maxTokenAge);\n        if (age - tolerance > max) {\n            throw new JWTExpired('\"iat\" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');\n        }\n        if (age < 0 - tolerance) {\n            throw new JWTClaimValidationFailed('\"iat\" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');\n        }\n    }\n    return payload;\n};\n", "export default (date) => Math.floor(date.getTime() / 1000);\n", "const minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst year = day * 365.25;\nconst REGEX = /^(\\d+|\\d+\\.\\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;\nexport default (str) => {\n    const matched = REGEX.exec(str);\n    if (!matched) {\n        throw new TypeError('Invalid time period format');\n    }\n    const value = parseFloat(matched[1]);\n    const unit = matched[2].toLowerCase();\n    switch (unit) {\n        case 'sec':\n        case 'secs':\n        case 'second':\n        case 'seconds':\n        case 's':\n            return Math.round(value);\n        case 'minute':\n        case 'minutes':\n        case 'min':\n        case 'mins':\n        case 'm':\n            return Math.round(value * minute);\n        case 'hour':\n        case 'hours':\n        case 'hr':\n        case 'hrs':\n        case 'h':\n            return Math.round(value * hour);\n        case 'day':\n        case 'days':\n        case 'd':\n            return Math.round(value * day);\n        case 'week':\n        case 'weeks':\n        case 'w':\n            return Math.round(value * week);\n        default:\n            return Math.round(value * year);\n    }\n};\n", "import { FlattenedSign } from '../flattened/sign.js';\nexport class CompactSign {\n    constructor(payload) {\n        this._flattened = new FlattenedSign(payload);\n    }\n    setProtectedHeader(protectedHeader) {\n        this._flattened.setProtectedHeader(protectedHeader);\n        return this;\n    }\n    async sign(key, options) {\n        const jws = await this._flattened.sign(key, options);\n        if (jws.payload === undefined) {\n            throw new TypeError('use the flattened module for creating JWS with b64: false');\n        }\n        return `${jws.protected}.${jws.payload}.${jws.signature}`;\n    }\n}\n", "import { encode as base64url } from '../../runtime/base64url.js';\nimport sign from '../../runtime/sign.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport { JWSInvalid } from '../../util/errors.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport checkKeyType from '../../lib/check_key_type.js';\nimport validateCrit from '../../lib/validate_crit.js';\nexport class FlattenedSign {\n    constructor(payload) {\n        if (!(payload instanceof Uint8Array)) {\n            throw new TypeError('payload must be an instance of Uint8Array');\n        }\n        this._payload = payload;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError('setProtectedHeader can only be called once');\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError('setUnprotectedHeader can only be called once');\n        }\n        this._unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    async sign(key, options) {\n        if (!this._protectedHeader && !this._unprotectedHeader) {\n            throw new JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');\n        }\n        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader)) {\n            throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');\n        }\n        const joseHeader = {\n            ...this._protectedHeader,\n            ...this._unprotectedHeader,\n        };\n        const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n        let b64 = true;\n        if (extensions.has('b64')) {\n            b64 = this._protectedHeader.b64;\n            if (typeof b64 !== 'boolean') {\n                throw new JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n            }\n        }\n        const { alg } = joseHeader;\n        if (typeof alg !== 'string' || !alg) {\n            throw new JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n        }\n        checkKeyType(alg, key, 'sign');\n        let payload = this._payload;\n        if (b64) {\n            payload = encoder.encode(base64url(payload));\n        }\n        let protectedHeader;\n        if (this._protectedHeader) {\n            protectedHeader = encoder.encode(base64url(JSON.stringify(this._protectedHeader)));\n        }\n        else {\n            protectedHeader = encoder.encode('');\n        }\n        const data = concat(protectedHeader, encoder.encode('.'), payload);\n        const signature = await sign(alg, key, data);\n        const jws = {\n            signature: base64url(signature),\n            payload: '',\n        };\n        if (b64) {\n            jws.payload = decoder.decode(payload);\n        }\n        if (this._unprotectedHeader) {\n            jws.header = this._unprotectedHeader;\n        }\n        if (this._protectedHeader) {\n            jws.protected = decoder.decode(protectedHeader);\n        }\n        return jws;\n    }\n}\n", "import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getSignKey from './get_sign_verify_key.js';\nconst sign = async (alg, key, data) => {\n    const cryptoKey = await getSignKey(alg, key, 'sign');\n    checkKeyLength(alg, cryptoKey);\n    const signature = await crypto.subtle.sign(subtleAlgorithm(alg, cryptoKey.algorithm), cryptoKey, data);\n    return new Uint8Array(signature);\n};\nexport default sign;\n", "import { CompactSign } from '../jws/compact/sign.js';\nimport { JWTInvalid } from '../util/errors.js';\nimport { encoder } from '../lib/buffer_utils.js';\nimport { ProduceJWT } from './produce.js';\nexport class SignJWT extends ProduceJWT {\n    setProtectedHeader(protectedHeader) {\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    async sign(key, options) {\n        var _a;\n        const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));\n        sig.setProtectedHeader(this._protectedHeader);\n        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) &&\n            this._protectedHeader.crit.includes('b64') &&\n            this._protectedHeader.b64 === false) {\n            throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n        }\n        return sig.sign(key, options);\n    }\n}\n", "import epoch from '../lib/epoch.js';\nimport isObject from '../lib/is_object.js';\nimport secs from '../lib/secs.js';\nexport class ProduceJWT {\n    constructor(payload) {\n        if (!isObject(payload)) {\n            throw new TypeError('JWT Claims Set MUST be an object');\n        }\n        this._payload = payload;\n    }\n    setIssuer(issuer) {\n        this._payload = { ...this._payload, iss: issuer };\n        return this;\n    }\n    setSubject(subject) {\n        this._payload = { ...this._payload, sub: subject };\n        return this;\n    }\n    setAudience(audience) {\n        this._payload = { ...this._payload, aud: audience };\n        return this;\n    }\n    setJti(jwtId) {\n        this._payload = { ...this._payload, jti: jwtId };\n        return this;\n    }\n    setNotBefore(input) {\n        if (typeof input === 'number') {\n            this._payload = { ...this._payload, nbf: input };\n        }\n        else {\n            this._payload = { ...this._payload, nbf: epoch(new Date()) + secs(input) };\n        }\n        return this;\n    }\n    setExpirationTime(input) {\n        if (typeof input === 'number') {\n            this._payload = { ...this._payload, exp: input };\n        }\n        else {\n            this._payload = { ...this._payload, exp: epoch(new Date()) + secs(input) };\n        }\n        return this;\n    }\n    setIssuedAt(input) {\n        if (typeof input === 'undefined') {\n            this._payload = { ...this._payload, iat: epoch(new Date()) };\n        }\n        else {\n            this._payload = { ...this._payload, iat: input };\n        }\n        return this;\n    }\n}\n", "import { importJWK } from '../key/import.js';\nimport { JWKSInvalid, JOSENotSupported, JWKSNoMatchingKey, JWKSMultipleMatchingKeys, } from '../util/errors.js';\nimport isObject from '../lib/is_object.js';\nfunction getKtyFromAlg(alg) {\n    switch (typeof alg === 'string' && alg.slice(0, 2)) {\n        case 'RS':\n        case 'PS':\n            return 'RSA';\n        case 'ES':\n            return 'EC';\n        case 'Ed':\n            return 'OKP';\n        default:\n            throw new JOSENotSupported('Unsupported \"alg\" value for a JSON Web Key Set');\n    }\n}\nexport function isJWKSLike(jwks) {\n    return (jwks &&\n        typeof jwks === 'object' &&\n        Array.isArray(jwks.keys) &&\n        jwks.keys.every(isJWKLike));\n}\nfunction isJWKLike(key) {\n    return isObject(key);\n}\nfunction clone(obj) {\n    if (typeof structuredClone === 'function') {\n        return structuredClone(obj);\n    }\n    return JSON.parse(JSON.stringify(obj));\n}\nexport class LocalJWKSet {\n    constructor(jwks) {\n        this._cached = new WeakMap();\n        if (!isJWKSLike(jwks)) {\n            throw new JWKSInvalid('JSON Web Key Set malformed');\n        }\n        this._jwks = clone(jwks);\n    }\n    async getKey(protectedHeader, token) {\n        const { alg, kid } = { ...protectedHeader, ...token === null || token === void 0 ? void 0 : token.header };\n        const kty = getKtyFromAlg(alg);\n        const candidates = this._jwks.keys.filter((jwk) => {\n            let candidate = kty === jwk.kty;\n            if (candidate && typeof kid === 'string') {\n                candidate = kid === jwk.kid;\n            }\n            if (candidate && typeof jwk.alg === 'string') {\n                candidate = alg === jwk.alg;\n            }\n            if (candidate && typeof jwk.use === 'string') {\n                candidate = jwk.use === 'sig';\n            }\n            if (candidate && Array.isArray(jwk.key_ops)) {\n                candidate = jwk.key_ops.includes('verify');\n            }\n            if (candidate && alg === 'EdDSA') {\n                candidate = jwk.crv === 'Ed25519' || jwk.crv === 'Ed448';\n            }\n            if (candidate) {\n                switch (alg) {\n                    case 'ES256':\n                        candidate = jwk.crv === 'P-256';\n                        break;\n                    case 'ES256K':\n                        candidate = jwk.crv === 'secp256k1';\n                        break;\n                    case 'ES384':\n                        candidate = jwk.crv === 'P-384';\n                        break;\n                    case 'ES512':\n                        candidate = jwk.crv === 'P-521';\n                        break;\n                }\n            }\n            return candidate;\n        });\n        const { 0: jwk, length } = candidates;\n        if (length === 0) {\n            throw new JWKSNoMatchingKey();\n        }\n        else if (length !== 1) {\n            const error = new JWKSMultipleMatchingKeys();\n            const { _cached } = this;\n            error[Symbol.asyncIterator] = async function* () {\n                for (const jwk of candidates) {\n                    try {\n                        yield await importWithAlgCache(_cached, jwk, alg);\n                    }\n                    catch (_a) {\n                        continue;\n                    }\n                }\n            };\n            throw error;\n        }\n        return importWithAlgCache(this._cached, jwk, alg);\n    }\n}\nasync function importWithAlgCache(cache, jwk, alg) {\n    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);\n    if (cached[alg] === undefined) {\n        const key = await importJWK({ ...jwk, ext: true }, alg);\n        if (key instanceof Uint8Array || key.type !== 'public') {\n            throw new JWKSInvalid('JSON Web Key Set members must be public keys');\n        }\n        cached[alg] = key;\n    }\n    return cached[alg];\n}\nexport function createLocalJWKSet(jwks) {\n    const set = new LocalJWKSet(jwks);\n    return async function (protectedHeader, token) {\n        return set.getKey(protectedHeader, token);\n    };\n}\n", "import fetchJwks from '../runtime/fetch_jwks.js';\nimport { JWKSInvalid, JWKSNoMatchingKey } from '../util/errors.js';\nimport { isJWKSLike, LocalJWKSet } from './local.js';\nfunction isCloudflareWorkers() {\n    return (typeof WebSocketPair !== 'undefined' ||\n        (typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers') ||\n        (typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel'));\n}\nclass RemoteJWKSet extends LocalJWKSet {\n    constructor(url, options) {\n        super({ keys: [] });\n        this._jwks = undefined;\n        if (!(url instanceof URL)) {\n            throw new TypeError('url must be an instance of URL');\n        }\n        this._url = new URL(url.href);\n        this._options = { agent: options === null || options === void 0 ? void 0 : options.agent, headers: options === null || options === void 0 ? void 0 : options.headers };\n        this._timeoutDuration =\n            typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;\n        this._cooldownDuration =\n            typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;\n        this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === 'number' ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;\n    }\n    coolingDown() {\n        return typeof this._jwksTimestamp === 'number'\n            ? Date.now() < this._jwksTimestamp + this._cooldownDuration\n            : false;\n    }\n    fresh() {\n        return typeof this._jwksTimestamp === 'number'\n            ? Date.now() < this._jwksTimestamp + this._cacheMaxAge\n            : false;\n    }\n    async getKey(protectedHeader, token) {\n        if (!this._jwks || !this.fresh()) {\n            await this.reload();\n        }\n        try {\n            return await super.getKey(protectedHeader, token);\n        }\n        catch (err) {\n            if (err instanceof JWKSNoMatchingKey) {\n                if (this.coolingDown() === false) {\n                    await this.reload();\n                    return super.getKey(protectedHeader, token);\n                }\n            }\n            throw err;\n        }\n    }\n    async reload() {\n        if (this._pendingFetch && isCloudflareWorkers()) {\n            this._pendingFetch = undefined;\n        }\n        this._pendingFetch || (this._pendingFetch = fetchJwks(this._url, this._timeoutDuration, this._options)\n            .then((json) => {\n            if (!isJWKSLike(json)) {\n                throw new JWKSInvalid('JSON Web Key Set malformed');\n            }\n            this._jwks = { keys: json.keys };\n            this._jwksTimestamp = Date.now();\n            this._pendingFetch = undefined;\n        })\n            .catch((err) => {\n            this._pendingFetch = undefined;\n            throw err;\n        }));\n        await this._pendingFetch;\n    }\n}\nexport function createRemoteJWKSet(url, options) {\n    const set = new RemoteJWKSet(url, options);\n    return async function (protectedHeader, token) {\n        return set.getKey(protectedHeader, token);\n    };\n}\n", "import { JOSEError, JWKSTimeout } from '../util/errors.js';\nconst fetchJwks = async (url, timeout, options) => {\n    let controller;\n    let id;\n    let timedOut = false;\n    if (typeof AbortController === 'function') {\n        controller = new AbortController();\n        id = setTimeout(() => {\n            timedOut = true;\n            controller.abort();\n        }, timeout);\n    }\n    const response = await fetch(url.href, {\n        signal: controller ? controller.signal : undefined,\n        redirect: 'manual',\n        headers: options.headers,\n    }).catch((err) => {\n        if (timedOut)\n            throw new JWKSTimeout();\n        throw err;\n    });\n    if (id !== undefined)\n        clearTimeout(id);\n    if (response.status !== 200) {\n        throw new JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');\n    }\n    try {\n        return await response.json();\n    }\n    catch (_a) {\n        throw new JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');\n    }\n};\nexport default fetchJwks;\n", "import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nexport function decodeProtectedHeader(token) {\n    let protectedB64u;\n    if (typeof token === 'string') {\n        const parts = token.split('.');\n        if (parts.length === 3 || parts.length === 5) {\n            ;\n            [protectedB64u] = parts;\n        }\n    }\n    else if (typeof token === 'object' && token) {\n        if ('protected' in token) {\n            protectedB64u = token.protected;\n        }\n        else {\n            throw new TypeError('Token does not contain a Protected Header');\n        }\n    }\n    try {\n        if (typeof protectedB64u !== 'string' || !protectedB64u) {\n            throw new Error();\n        }\n        const result = JSON.parse(decoder.decode(base64url(protectedB64u)));\n        if (!isObject(result)) {\n            throw new Error();\n        }\n        return result;\n    }\n    catch (_a) {\n        throw new TypeError('Invalid Token or Protected Header formatting');\n    }\n}\n", "import * as base64url from '../runtime/base64url.js';\nexport const encode = base64url.encode;\nexport const decode = base64url.decode;\n", "import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nimport { JWTInvalid } from './errors.js';\nexport function decodeJwt(jwt) {\n    if (typeof jwt !== 'string')\n        throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n    const { 1: payload, length } = jwt.split('.');\n    if (length === 5)\n        throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n    if (length !== 3)\n        throw new JWTInvalid('Invalid JWT');\n    if (!payload)\n        throw new JWTInvalid('JWTs must contain a payload');\n    let decoded;\n    try {\n        decoded = base64url(payload);\n    }\n    catch (_a) {\n        throw new JWTInvalid('Failed to base64url decode the payload');\n    }\n    let result;\n    try {\n        result = JSON.parse(decoder.decode(decoded));\n    }\n    catch (_b) {\n        throw new JWTInvalid('Failed to parse the decoded payload as JSON');\n    }\n    if (!isObject(result))\n        throw new JWTInvalid('Invalid JWT Claims Set');\n    return result;\n}\n", null, null, null, null, null, null, null, null, "import { TaskService } from \"./service.js\";\n\nexport class TaskProcessor {\n  private taskService: TaskService;\n  private isProcessing = false;\n\n  constructor(database?: D1Database) {\n    this.taskService = new TaskService(database);\n  }\n\n  async processTasks(batchSize = 5): Promise<{\n    processed: number;\n    successful: number;\n    failed: number;\n  }> {\n    if (this.isProcessing) {\n      console.log(\"Task processing already in progress, skipping...\");\n      return { processed: 0, successful: 0, failed: 0 };\n    }\n\n    this.isProcessing = true;\n    let processed = 0;\n    let successful = 0;\n    let failed = 0;\n\n    try {\n      console.log(`Starting task processing (batch size: ${batchSize})`);\n\n      // Get pending and failed tasks that might need retry\n      const pendingTasks = await this.taskService.getTasks(\n        \"pending\",\n        batchSize\n      );\n      const failedTasks = await this.taskService.getTasks(\n        \"failed\",\n        Math.max(0, batchSize - pendingTasks.length)\n      );\n\n      const tasksToProcess = [...pendingTasks, ...failedTasks];\n      processed = tasksToProcess.length;\n\n      if (processed === 0) {\n        console.log(\"No tasks to process\");\n        return { processed: 0, successful: 0, failed: 0 };\n      }\n\n      // Process failed tasks by retrying them (they will create new workflows)\n      for (const task of failedTasks) {\n        try {\n          await this.taskService.retryTask(task.id);\n          successful++;\n          console.log(`Retried failed task ${task.id}`);\n        } catch (error) {\n          console.error(`Failed to retry task ${task.id}:`, error);\n          failed++;\n        }\n      }\n\n      // Pending tasks should already be processed since createTask now immediately starts workflows\n      // So we just count them as successful\n      successful += pendingTasks.length;\n\n      console.log(\n        `Task processing completed: ${processed} processed, ${successful} successful, ${failed} failed`\n      );\n    } catch (error) {\n      console.error(\"Error during task processing:\", error);\n      failed = processed;\n      successful = 0;\n    } finally {\n      this.isProcessing = false;\n    }\n\n    return { processed, successful, failed };\n  }\n\n  /**\n   * Scheduled task processor that can be called by Cloudflare Cron triggers\n   */\n  async handleScheduledTask(event: ScheduledEvent): Promise<void> {\n    console.log(\"Scheduled task processor triggered:\", event.scheduledTime);\n\n    try {\n      const result = await this.processTasks(5);\n      console.log(\"Scheduled task processing result:\", result);\n    } catch (error) {\n      console.error(\"Scheduled task processing failed:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process a specific task by ID for immediate processing\n   */\n  async processSpecificTask(taskId: number): Promise<void> {\n    console.log(`Processing specific task: ${taskId}`);\n\n    try {\n      const task = await this.taskService.getTask(taskId);\n      if (!task) {\n        console.warn(`Task ${taskId} not found`);\n        return;\n      }\n\n      if (task.status === \"failed\") {\n        console.log(`Retrying failed task ${taskId}`);\n        await this.taskService.retryTask(taskId);\n        console.log(`Successfully retried task ${taskId}`);\n      } else if (task.status === \"pending\") {\n        console.log(\n          `Task ${taskId} is pending - it should have been processed when created`\n        );\n        // If it's still pending, try to retry it to trigger workflow creation\n        await this.taskService.retryTask(taskId);\n        console.log(\n          `Successfully triggered workflow for pending task ${taskId}`\n        );\n      } else {\n        console.warn(\n          `Task ${taskId} is in status '${task.status}' - no action needed`\n        );\n      }\n    } catch (error) {\n      console.error(`Error processing specific task ${taskId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Manual trigger for task processing\n   */\n  async triggerProcessing(batchSize?: number): Promise<{\n    processed: number;\n    successful: number;\n    failed: number;\n  }> {\n    return await this.processTasks(batchSize);\n  }\n}\n", "import { Container } from \"@cloudflare/containers\";\n\nexport class EncodingContainer extends Container {\n  // Port the container listens on (default: 8080)\n  defaultPort = 8080;\n  // Time before container sleeps due to inactivity (15 minutes - increased for long-running tasks)\n  sleepAfter = \"15m\";\n  // Environment variables passed to the container\n  envVars = {\n    NODE_ENV: \"production\",\n    // Add timeout settings for better container management\n    CONTAINER_TIMEOUT: \"15m\",\n  };\n\n  // Optional lifecycle hooks\n  onStart() {\n    console.log(\"Encoding container successfully started\");\n  }\n\n  onStop() {\n    console.log(\"Encoding container successfully shut down\");\n  }\n\n  onError(error: unknown) {\n    console.log(\"Encoding container error:\", error);\n  }\n\n  // Add better health checking\n  onHealthCheck() {\n    console.log(\"Encoding container health check\");\n    return { status: \"healthy\", timestamp: new Date().toISOString() };\n  }\n}\n", null, null, null, null, "import {\n  WorkflowEntrypoint,\n  WorkflowStep,\n  WorkflowEvent,\n} from \"cloudflare:workers\";\n\n// Import types\nimport type { Env, AudioProcessingParams } from \"./types\";\nimport { AudioProcessingParamsSchema } from \"./types\";\n\nimport { InitializeWorkflowStep } from \"./initialize-workflow\";\nimport { encodeAudioForTTS } from \"./tts-encode\";\nimport { WorkflowProgressReporter } from \"./progress-reporter\";\nimport { audioChunking } from \"./audio-chunking\";\nimport { transcribeChunks } from \"./transcribe-chunks\";\n// import { enhanceTranscript } from \"./enhance-transcript\";\n// import { audioEncoding } from \"./audio-encoding\";\n// import { updateEpisodeEncodings } from \"./update-episode-encodings\";\nimport { cleanupResources } from \"./cleanup-resources\";\n// import { finalizeProcessing } from \"./finalize-processing\";\n\nexport class AudioProcessingWorkflow extends WorkflowEntrypoint<\n  Env,\n  AudioProcessingParams\n> {\n  private readonly totalSteps = 9;\n\n  private async updateWorkflowStatus(\n    taskId?: string,\n    status?: string,\n    message?: string\n  ): Promise<void> {\n    if (!taskId) return;\n\n    try {\n      const taskIdNum = parseInt(taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${taskId}`);\n        return;\n      }\n\n      const { TaskService } = await import(\"../../tasks/service.js\");\n      const taskService = new TaskService(this.env.DB);\n\n      await taskService.updateTaskStatus(taskIdNum, status || \"processing\", {\n        message,\n      });\n    } catch (error) {\n      console.error(\"Error updating workflow status:\", error);\n    }\n  }\n\n  private async updateStepProgress(\n    stepNumber: number,\n    description: string,\n    taskId?: string,\n    data?: any\n  ): Promise<void> {\n    if (!taskId) return;\n\n    const progress = Math.round((stepNumber / this.totalSteps) * 100);\n    const stepMessage = `${stepNumber}/${this.totalSteps} ${description}`;\n\n    try {\n      const taskIdNum = parseInt(taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${taskId}`);\n        return;\n      }\n\n      const { TaskService } = await import(\"../../tasks/service.js\");\n      const taskService = new TaskService(this.env.DB);\n\n      // Update step and progress\n      await taskService.updateTaskStep(taskIdNum, stepMessage, progress);\n\n      // Update result if data is provided\n      if (data) {\n        await this.updateTaskResult(taskId, {\n          step: stepNumber,\n          description,\n          progress,\n          stepMessage,\n          data,\n          timestamp: new Date().toISOString(),\n        });\n      }\n    } catch (error) {\n      console.error(\"Error updating step progress:\", error);\n    }\n  }\n\n  private async updateTaskResult(taskId: string, result: any): Promise<void> {\n    try {\n      const taskIdNum = parseInt(taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${taskId}`);\n        return;\n      }\n\n      const { TaskRepository } = await import(\"../../tasks/repository.js\");\n      const taskRepository = new TaskRepository(this.env.DB);\n\n      // Update the task result by storing it in the result field\n      await taskRepository.updateStatus(taskIdNum, \"processing\", {\n        result: JSON.stringify(result),\n      });\n    } catch (error) {\n      console.error(\"Error updating task result:\", error);\n    }\n  }\n\n  private async handleWorkflowError(\n    stepName: string,\n    error: unknown,\n    taskId?: string,\n    workflowId?: string\n  ): Promise<void> {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const fullErrorMessage = `Failed at step ${stepName}: ${errorMessage}`;\n    console.error(`Workflow failed at step ${stepName}:`, errorMessage);\n\n    try {\n      // Use WorkflowService to properly fail both workflow and task\n      if (workflowId) {\n        const { WorkflowService } = await import(\"../service.js\");\n        const workflowService = new WorkflowService(this.env.DB);\n\n        await workflowService.failWorkflow(\n          workflowId,\n          fullErrorMessage,\n          undefined // actualDuration - could be calculated if needed\n        );\n      } else if (taskId) {\n        // Fallback to direct task update if workflowId is not available\n        await this.updateWorkflowStatus(taskId, \"failed\", fullErrorMessage);\n      }\n\n      // Also update task result with detailed error information\n      if (taskId) {\n        await this.updateTaskResult(taskId, {\n          status: \"failed\",\n          error: fullErrorMessage,\n          step: stepName,\n          timestamp: new Date().toISOString(),\n          originalError: errorMessage,\n        });\n      }\n    } catch (updateError) {\n      console.error(\"Failed to update workflow failure status:\", updateError);\n    }\n  }\n\n  async run(event: WorkflowEvent<AudioProcessingParams>, step: WorkflowStep) {\n    let validatedParams: AudioProcessingParams;\n\n    try {\n      // Validate input parameters using Zod\n      validatedParams = AudioProcessingParamsSchema.parse(event.payload);\n    } catch (error) {\n      console.error(\"Invalid workflow parameters:\", error);\n      throw new Error(\n        `Invalid workflow parameters: ${\n          error instanceof Error ? error.message : String(error)\n        }`\n      );\n    }\n\n    // Create progress reporter\n    const progressReporter = new WorkflowProgressReporter(\n      this.env,\n      validatedParams.taskId,\n      event.payload.workflowId // This would be passed by the task service\n    );\n\n    // Track current step for error handling\n    let currentStep: string = \"initialization\";\n\n    try {\n      // Set status to in progress at the beginning\n      try {\n        await this.updateWorkflowStatus(\n          validatedParams.taskId,\n          \"processing\",\n          \"Workflow started\"\n        );\n\n        console.log(\n          `Starting audio processing workflow for episode ${validatedParams.episodeId}`\n        );\n      } catch (error) {\n        console.error(\"Failed to set initial workflow status:\", error);\n        // Continue with workflow even if status update fails\n      }\n\n      // Step 1: Initialize workflow and validate inputs\n      currentStep = \"initialize-workflow\";\n      let workflowState = await step.do(\"initialize-workflow\", async () => {\n        await this.updateStepProgress(\n          1,\n          \"Initializing workflow\",\n          validatedParams.taskId\n        );\n        await progressReporter.reportStepProgress(\n          \"initialize-workflow\",\n          0,\n          \"1/10 Initializing workflow\"\n        );\n\n        const initStep = new InitializeWorkflowStep(this.env);\n        const result = await initStep.execute(validatedParams);\n\n        await progressReporter.reportStepComplete(\n          \"initialize-workflow\",\n          \"Workflow initialized successfully\"\n        );\n\n        // Return legacy format for backward compatibility\n        const { signedUrls, ...legacyResult } = result;\n        return legacyResult;\n      });\n\n      // Step 2: Encode audio to mp3\n      currentStep = \"encode\";\n      let encodedAudio = await step.do(\n        \"encode\",\n        {\n          retries: {\n            limit: 2,\n            delay: \"5 seconds\",\n          },\n          timeout: \"10 minutes\",\n        },\n        async () => {\n          await this.updateStepProgress(\n            2,\n            \"Encoding audio\",\n            validatedParams.taskId\n          );\n          await progressReporter.reportStepProgress(\n            \"encode-for-tts\",\n            0,\n            \"2/10 Encoding audio for TTS\"\n          );\n\n          const result = await encodeAudioForTTS(this.env, workflowState);\n\n          await progressReporter.reportStepComplete(\n            \"encode\",\n            \"Encode audio for TTS\"\n          );\n\n          // Return legacy format for backward compatibility\n          const { signedUrls, ...legacyResult } = result;\n          return legacyResult;\n        }\n      );\n\n      // Step 3: Audio Chunking for Transcription (includes chunk storage preparation)\n      currentStep = \"audio-chunking\";\n      let chunkingResult = await step.do(\n        \"audio-chunking\",\n        {\n          retries: {\n            limit: 3,\n            delay: \"10 seconds\",\n            backoff: \"exponential\",\n          },\n          timeout: \"12 minutes\", // Increased timeout to account for storage preparation\n        },\n        async () => {\n          await this.updateStepProgress(\n            3,\n            \"Preparing storage and creating audio chunks\",\n            validatedParams.taskId\n          );\n          await progressReporter.reportStepProgress(\n            \"audio-chunking\",\n            0,\n            \"3/9 Preparing storage and creating audio chunks\"\n          );\n\n          const result = await audioChunking(\n            this.env,\n            workflowState,\n            encodedAudio\n          );\n\n          await progressReporter.reportStepComplete(\n            \"audio-chunking\",\n            `Created ${result.chunks.length} audio chunks`\n          );\n\n          return result;\n        }\n      );\n\n      // Step 4: Transcribe chunks in parallel\n      currentStep = \"transcribe-chunks\";\n      const transcriptionResult = await step.do(\n        \"transcribe-chunks\",\n        {\n          retries: {\n            limit: 2,\n            delay: \"10 seconds\",\n            backoff: \"exponential\",\n          },\n          timeout: \"20 minutes\",\n        },\n        async () => {\n          await this.updateStepProgress(\n            4,\n            \"Transcribing audio chunks\",\n            validatedParams.taskId\n          );\n          await progressReporter.reportStepProgress(\n            \"transcribe-chunks\",\n            0,\n            \"4/9 Transcribing audio chunks\"\n          );\n\n          const result = await transcribeChunks(\n            this.env,\n            workflowState,\n            chunkingResult\n          );\n\n          await progressReporter.reportStepComplete(\n            \"transcribe-chunks\",\n            `Transcription completed (${chunkingResult.chunks.length} chunks)`,\n            {\n              chunkTranscriptionsUrl: result.chunkTranscriptionsUrl,\n            }\n          );\n\n          return result;\n        }\n      );\n\n      // Extract the results from Step 5\n      let chunkTranscriptionsUrl = transcriptionResult.chunkTranscriptionsUrl;\n\n      // // Step 5: Enhance transcript with AI (create paragraphs, keywords, and chapters)\n      // currentStep = \"enhance-transcript\";\n      // let enhancedTranscriptResult = await step.do(\n      //   \"enhance-transcript\",\n      //   {\n      //     retries: {\n      //       limit: 2,\n      //       delay: \"10 seconds\",\n      //       backoff: \"exponential\",\n      //     },\n      //     timeout: \"10 minutes\",\n      //   },\n      //   async () => {\n      //     await this.updateStepProgress(\n      //       5,\n      //       \"Enhancing transcript with AI\",\n      //       validatedParams.taskId\n      //     );\n      //     await progressReporter.reportStepProgress(\n      //       \"enhance-transcript\",\n      //       0,\n      //       \"5/9 Enhancing transcript with AI\"\n      //     );\n\n      //     const result = await enhanceTranscript(\n      //       this.env,\n      //       workflowState,\n      //       transcriptionResult.chunkTranscriptionsUrl\n      //     );\n\n      //     await progressReporter.reportStepComplete(\n      //       \"enhance-transcript\",\n      //       `Enhanced transcript with ${result.chapters.length} chapters and ${result.keywords.length} keywords`,\n      //       {\n      //         transcriptUrl: result.enhancedTranscriptUrl,\n      //         chapters: result.chapters.length,\n      //         keywords: result.keywords.length,\n      //         summary: result.summary ? \"generated\" : \"none\",\n      //         chunkTranscriptionsUrl: chunkTranscriptionsUrl,\n      //       }\n      //     );\n\n      //     // Update task result with enhanced transcript details\n      //     await this.updateTaskResult(validatedParams.taskId!, {\n      //       enhancedTranscript: {\n      //         url: result.enhancedTranscriptUrl,\n      //         chapters: result.chapters.length,\n      //         keywords: result.keywords.length,\n      //         paragraphs: result.paragraphs,\n      //         hasSummary: !!result.summary,\n      //       },\n      //       chunkTranscriptions: chunkTranscriptionsUrl\n      //         ? {\n      //             url: chunkTranscriptionsUrl,\n      //             description:\n      //               \"Individual chunk transcriptions with timestamps\",\n      //           }\n      //         : undefined,\n      //     });\n\n      //     return result;\n      //   }\n      // );\n\n      // // Step 6: Audio Encoding (CPU-intensive operation)\n      // currentStep = \"audio-encoding\";\n      // let encodingResult = await step.do(\n      //   \"audio-encoding\",\n      //   {\n      //     retries: {\n      //       limit: 3,\n      //       delay: \"10 seconds\",\n      //       backoff: \"exponential\",\n      //     },\n      //     timeout: \"15 minutes\",\n      //   },\n      //   async () => {\n      //     await this.updateStepProgress(\n      //       6,\n      //       \"Encoding audio formats\",\n      //       validatedParams.taskId\n      //     );\n      //     await progressReporter.reportStepProgress(\n      //       \"audio-encoding\",\n      //       0,\n      //       \"6/9 Encoding audio formats\"\n      //     );\n\n      //     const result = await audioEncoding(this.env, workflowState);\n\n      //     await progressReporter.reportStepComplete(\n      //       \"audio-encoding\",\n      //       `Encoded ${result.encodings.length} formats`\n      //     );\n\n      //     return result;\n      //   }\n      // );\n\n      // // Step 7: Update episode with encoded audio URLs\n      // currentStep = \"update-episode-encodings\";\n      // await step.do(\n      //   \"update-episode-encodings\",\n      //   {\n      //     retries: {\n      //       limit: 2,\n      //       delay: \"5 seconds\",\n      //     },\n      //     timeout: \"5 minutes\",\n      //   },\n      //   async () => {\n      //     await this.updateStepProgress(\n      //       7,\n      //       \"Updating episode with encodings\",\n      //       validatedParams.taskId\n      //     );\n      //     return await updateEpisodeEncodings(\n      //       this.env,\n      //       workflowState,\n      //       encodingResult.encodings\n      //     );\n      //   }\n      // );\n\n      // Step 8: Cleanup temporary files from R2 (optional)\n      currentStep = \"cleanup-resources\";\n      await step.do(\n        \"cleanup-resources\",\n        {\n          retries: {\n            limit: 1,\n            delay: \"2 seconds\",\n          },\n          timeout: \"1 minute\",\n        },\n        async () => {\n          await this.updateStepProgress(\n            8,\n            \"Cleaning up temporary files\",\n            validatedParams.taskId\n          );\n          return await cleanupResources(this.env, encodedAudio, chunkingResult);\n        }\n      );\n\n      // // Step 9: Final processing and store transcript\n      // currentStep = \"finalize-processing\";\n      // let finalResult = await step.do(\n      //   \"finalize-processing\",\n      //   {\n      //     retries: {\n      //       limit: 2,\n      //       delay: \"2 seconds\",\n      //     },\n      //     timeout: \"5 minutes\",\n      //   },\n      //   async () => {\n      //     await this.updateStepProgress(\n      //       9,\n      //       \"Finalizing processing and storing results\",\n      //       validatedParams.taskId\n      //     );\n      //     const finalResult = await finalizeProcessing(\n      //       this.env,\n      //       workflowState,\n      //       transcribedChunks,\n      //       encodingResult.encodings\n      //     );\n\n      //     // Update task result with final processing details\n      //     await this.updateTaskResult(validatedParams.taskId!, {\n      //       finalProcessing: {\n      //         transcriptUrl: finalResult.transcriptUrl,\n      //         textLength: finalResult.textLength,\n      //         totalWords: finalResult.totalWords,\n      //         totalChunks: finalResult.totalChunks,\n      //         totalEncodings: finalResult.totalEncodings,\n      //       },\n      //     });\n\n      //     return finalResult;\n      //   }\n      // );\n\n      // // Update final comprehensive task result\n      // const comprehensiveResult = {\n      //   success: true,\n      //   episodeId: workflowState.episodeId,\n      //   workflowId: workflowState.workflowId,\n      //   completedAt: new Date().toISOString(),\n      //   enhancedTranscript: enhancedTranscriptResult\n      //     ? {\n      //         url: enhancedTranscriptResult.enhancedTranscriptUrl,\n      //         chapters: enhancedTranscriptResult.chapters.length,\n      //         keywords: enhancedTranscriptResult.keywords.length,\n      //         paragraphs: enhancedTranscriptResult.paragraphs,\n      //         hasSummary: !!enhancedTranscriptResult.summary,\n      //       }\n      //     : undefined,\n      //   chunkTranscriptions: chunkTranscriptionsUrl\n      //     ? {\n      //         url: chunkTranscriptionsUrl,\n      //         description: \"Individual chunk transcriptions with timestamps\",\n      //       }\n      //     : undefined,\n      //   encoding: {\n      //     formats: encodingResult.encodings.length,\n      //   },\n      //   processing: {\n      //     totalWords: finalResult.totalWords,\n      //     totalChunks: finalResult.totalChunks,\n      //     textLength: finalResult.textLength,\n      //   },\n      //   ...finalResult,\n      // };\n\n      // currentStep = \"final-task-update\";\n      // try {\n      //   await this.updateTaskResult(\n      //     validatedParams.taskId!,\n      //     comprehensiveResult\n      //   );\n      // } catch (error) {\n      //   console.error(\"Failed to update final task result:\", error);\n      // }\n\n      // Mark workflow as completed\n      // currentStep = \"workflow-completion\";\n      // try {\n      //   // Use WorkflowService to properly complete both workflow and task\n      //   if (validatedParams.workflowId) {\n      //     const { WorkflowService } = await import(\"../service.js\");\n      //     const workflowService = new WorkflowService(this.env.DB);\n\n      //     await workflowService.completeWorkflow(\n      //       validatedParams.workflowId,\n      //       comprehensiveResult,\n      //       undefined // actualDuration - could be calculated if needed\n      //     );\n\n      //     console.log(\n      //       `Audio processing workflow and task completed successfully for episode ${validatedParams.episodeId}`\n      //     );\n      //   } else {\n      //     // Fallback to direct task update if workflowId is not available\n      //     await this.updateWorkflowStatus(\n      //       validatedParams.taskId,\n      //       \"done\",\n      //       \"Workflow completed successfully\"\n      //     );\n      //     console.log(\n      //       `Audio processing workflow completed successfully for episode ${validatedParams.episodeId} (direct task update)`\n      //     );\n      //   }\n      // } catch (error) {\n      //   console.error(\"Failed to set final workflow status:\", error);\n      //   // Don't throw here as the workflow is actually completed\n      // }\n\n      // return comprehensiveResult;\n    } catch (error: any) {\n      // Handle workflow error with current step information\n      console.error(`Workflow failed at step: ${currentStep}`, error);\n\n      await this.handleWorkflowError(\n        currentStep,\n        error,\n        validatedParams.taskId,\n        validatedParams.workflowId\n      );\n\n      // Re-throw the error to ensure the workflow fails\n      throw error;\n    }\n  }\n}\n\n// Export all types\nexport * from \"./types\";\n\n// Export new step classes\nexport { InitializeWorkflowStep } from \"./initialize-workflow\";\nexport { encodeAudioForTTS } from \"./tts-encode\";\nexport { WorkflowProgressReporter } from \"./progress-reporter\";\n\n// Export utility functions\nexport { processEncodingFormats, mergeTranscriptions } from \"./utils\";\n", "import { raw } from \"hono/html\";\nimport { z } from \"zod\";\n\n// Enhanced workflow environment bindings\nexport type Env = {\n  DB: D1Database;\n  BUCKET: R2Bucket;\n  AI: Ai;\n  ENCODING_CONTAINER: DurableObjectNamespace;\n  AUDIO_PROCESSING_WORKFLOW: Workflow;\n  // Secrets\n  R2_ACCESS_KEY_ID: string;\n  R2_SECRET_ACCESS_KEY: string;\n  R2_ENDPOINT: string;\n  STORAGE_SIGNATURE_SECRET: string;\n  SERVICE_BASE_URL?: string; // Base URL for the service (e.g., https://your-worker.workers.dev)\n  // Transcription settings\n  DEFAULT_TRANSCRIPTION_LANGUAGE?: string; // Language code for transcription (e.g., 'en', 'es', 'fr')\n  DEFAULT_TRANSCRIPTION_MODEL?: string; // Default transcription model (e.g., '@cf/deepgram/nova-3')\n  USE_NOVA3_FEATURES?: string; // Whether to use nova-3 features ('true' or 'false')\n};\n\n// Zod schemas for validation\nexport const AudioProcessingParamsSchema = z.object({\n  episodeId: z.string().min(1, \"Episode ID is required\"),\n  audioR2Key: z.string().min(1, \"Audio R2 key is required\"),\n  chunkDuration: z.number().positive().optional().default(60),\n  overlapDuration: z.number().positive().optional().default(2),\n  encodingFormats: z.array(z.string()).optional().default([\"mp3_128\"]),\n  taskId: z.string().optional(),\n  workflowId: z.string().optional(),\n  transcriptionLanguage: z.string().optional().default(\"en\"),\n  transcriptionModel: z.string().optional().default(\"@cf/deepgram/nova-3\"),\n  useNova3Features: z.boolean().optional().default(true),\n});\n\nexport const WorkflowStateSchema = z.object({\n  workflowId: z.string().uuid(),\n  episodeId: z.string(),\n  audioR2Key: z.string(),\n  chunkDuration: z.number().positive(),\n  overlapDuration: z.number().positive(),\n  encodingFormats: z.array(z.string()),\n  startedAt: z.string().datetime(),\n  taskId: z.string().optional(),\n  transcriptionLanguage: z.string(),\n  transcriptionModel: z.string(),\n  useNova3Features: z.boolean(),\n  previewDownloadUrl: z.string().url(),\n});\n\nexport const EncodedAudioSchema = z.object({\n  encodedR2Key: z.string(),\n  encodedAudioUrl: z.string().url(),\n  duration: z.number().positive(),\n  signedUrls: z.array(z.string().url()).optional(),\n});\n\nexport const AudioMetadataSchema = z.object({\n  duration: z.number().positive(),\n  expectedChunks: z.number().positive(),\n  chunkUploadUrls: z.array(\n    z.object({\n      index: z.number().int().nonnegative(),\n      r2Key: z.string(),\n      uploadUrl: z.string().url(),\n    })\n  ),\n  encodedAudioUrl: z.string().url(),\n  encodedR2Key: z.string(),\n  signedUrls: z.array(z.string().url()).optional(),\n});\n\nexport const ChunkingResultSchema = z.object({\n  chunks: z.array(z.string().url()),\n  signedUrls: z.array(z.string().url()).optional(),\n});\n\nexport const EncodingResultSchema = z.object({\n  format: z.string(),\n  bitrate: z.number().positive(),\n  r2Key: z.string(),\n  size: z.number().positive(),\n  duration: z.number().positive().optional(),\n  signedUrls: z.array(z.string().url()).optional(),\n});\n\nexport const AudioChunkSchema = z.object({\n  index: z.number().int().nonnegative(),\n  startTime: z.number().nonnegative(),\n  endTime: z.number().positive(),\n  duration: z.number().positive(),\n  chunkId: z.string().optional(),\n  r2Key: z.string(),\n  metadata: z\n    .object({\n      format: z.string(),\n      bitrate: z.number().positive(),\n      size: z.number().positive(),\n      channels: z.number().positive(),\n      sampleRate: z.number().positive(),\n    })\n    .optional(),\n});\n\nexport const WordSchema = z.object({\n  word: z.string(),\n  start: z.number().nonnegative(),\n  end: z.number().nonnegative(),\n});\n\n// Nova-3 specific schemas\nexport const Nova3SpeakerSchema = z.object({\n  speaker: z.string(),\n  start: z.number(),\n  end: z.number(),\n  confidence: z.number().optional(),\n});\n\nexport const ChapterSchema = z.object({\n  title: z.string(),\n  startTime: z.number().nonnegative(),\n  endTime: z.number().nonnegative(),\n  summary: z.string().optional(),\n});\n\nexport const TranscribedChunkSchema = z.object({\n  words: z.array(WordSchema),\n  startTime: z.number().nonnegative(),\n  endTime: z.number().positive(),\n  chunkIndex: z.number().int().nonnegative(),\n  raw: z.any(),\n  metadata: z\n    .object({\n      language: z.string().optional(),\n      sentiments: z\n        .array(\n          z.object({\n            text: z.string(),\n            sentiment: z.enum([\"positive\", \"negative\", \"neutral\"]),\n            confidence: z.number(),\n            start: z.number(),\n            end: z.number(),\n          })\n        )\n        .optional(),\n      summary: z.string().optional(),\n      speakers: z.array(Nova3SpeakerSchema).optional(),\n      keywords: z\n        .array(\n          z.object({\n            keyword: z.string(),\n            confidence: z.number(),\n            start: z.number(),\n            end: z.number(),\n          })\n        )\n        .optional(),\n      paragraphs: z\n        .array(\n          z.object({\n            text: z.string(),\n            start: z.number(),\n            end: z.number(),\n            speaker: z.string().optional(),\n          })\n        )\n        .optional(),\n      chapters: z.array(ChapterSchema).optional(),\n      ttsAudioUrl: z.string().url().optional(), // Add TTS audio URL field\n    })\n    .optional(),\n});\n\nexport const EnhancedTranscriptResultSchema = z.object({\n  enhancedTranscriptUrl: z.string().url(),\n  keywords: z.array(z.string()),\n  chapters: z.array(ChapterSchema),\n  paragraphs: z.number().positive(),\n  summary: z.string().optional(),\n});\n\nexport const ComprehensiveTranscriptSchema = z.object({\n  text: z.string(),\n  html: z.string(),\n  markdown: z.string(),\n  originalWords: z.array(WordSchema),\n  totalWords: z.number(),\n  totalParagraphs: z.number(),\n});\n\n// Nova-3 complete response schema with nested types\nexport const Nova3ResponseSchema = z.object({\n  result: z.object({\n    results: z.object({\n      channels: z.array(\n        z.object({\n          alternatives: z.array(\n            z.object({\n              confidence: z.number(),\n              paragraphs: z.object({\n                paragraphs: z.array(\n                  z.object({\n                    end: z.number(),\n                    num_words: z.number(),\n                    sentences: z.array(\n                      z.object({\n                        end: z.number(),\n                        start: z.number(),\n                        text: z.string(),\n                      })\n                    ),\n                    speaker: z.number(),\n                    start: z.number(),\n                  })\n                ),\n                transcript: z.string(),\n              }),\n              transcript: z.string(),\n              words: z.array(\n                z.object({\n                  confidence: z.number(),\n                  end: z.number(),\n                  punctuated_word: z.string(),\n                  speaker: z.number(),\n                  speaker_confidence: z.number(),\n                  start: z.number(),\n                  word: z.string(),\n                })\n              ),\n            })\n          ),\n          detected_language: z.string(),\n          language_confidence: z.number(),\n        })\n      ),\n    }),\n    usage: z.object({\n      prompt_tokens: z.number(),\n      completion_tokens: z.number(),\n      total_tokens: z.number(),\n    }),\n  }),\n  success: z.boolean(),\n  errors: z.array(z.unknown()),\n  messages: z.array(z.unknown()),\n});\n\nexport const Nova3TranscriptionSchema = z.object({\n  text: z.string(),\n  language: z.string().optional(),\n  summary: z.string().optional(),\n  sentiments: z\n    .array(\n      z.object({\n        text: z.string(),\n        sentiment: z.enum([\"positive\", \"negative\", \"neutral\"]),\n        confidence: z.number(),\n        start: z.number(),\n        end: z.number(),\n      })\n    )\n    .optional(),\n  speakers: z.array(Nova3SpeakerSchema).optional(),\n  keywords: z\n    .array(\n      z.object({\n        keyword: z.string(),\n        confidence: z.number(),\n        start: z.number(),\n        end: z.number(),\n      })\n    )\n    .optional(),\n  paragraphs: z\n    .array(\n      z.object({\n        text: z.string(),\n        start: z.number(),\n        end: z.number(),\n        speaker: z.string().optional(),\n      })\n    )\n    .optional(),\n  words: z.array(WordSchema).optional(),\n});\n\nexport const StepOutputSchema = z.object({\n  success: z.boolean(),\n  data: z.any().optional(),\n  signedUrls: z.array(z.string().url()).optional(),\n  error: z.string().optional(),\n});\n\n// Enhanced workflow input parameters\n// Type inference from Zod schemas\nexport type AudioProcessingParams = z.infer<typeof AudioProcessingParamsSchema>;\nexport type WorkflowState = z.infer<typeof WorkflowStateSchema>;\nexport type EncodedAudio = z.infer<typeof EncodedAudioSchema>;\nexport type AudioMetadata = z.infer<typeof AudioMetadataSchema>;\nexport type ChunkingResult = z.infer<typeof ChunkingResultSchema>;\nexport type EncodingResult = z.infer<typeof EncodingResultSchema>;\nexport type AudioChunk = z.infer<typeof AudioChunkSchema>;\nexport type Word = z.infer<typeof WordSchema>;\nexport type TranscribedChunk = z.infer<typeof TranscribedChunkSchema>;\nexport type Chapter = z.infer<typeof ChapterSchema>;\nexport type EnhancedTranscriptResult = z.infer<\n  typeof EnhancedTranscriptResultSchema\n>;\nexport type ComprehensiveTranscript = z.infer<\n  typeof ComprehensiveTranscriptSchema\n>;\nexport type StepOutput = z.infer<typeof StepOutputSchema>;\nexport type Nova3Speaker = z.infer<typeof Nova3SpeakerSchema>;\nexport type Nova3Transcription = z.infer<typeof Nova3TranscriptionSchema>;\nexport type Nova3Response = z.infer<typeof Nova3ResponseSchema>;\n\n// Base workflow step interface\nexport interface WorkflowStep<TInput, TOutput> {\n  execute(input: TInput): Promise<TOutput>;\n  validateInput(input: unknown): TInput;\n  validateOutput(output: unknown): TOutput;\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { z } from \"zod\";\nimport { generateSignedDownloadUrl } from \"../../utils/storage\";\nimport type {\n  Env,\n  AudioProcessingParams,\n  WorkflowState,\n  WorkflowStep,\n} from \"./types\";\nimport { AudioProcessingParamsSchema, WorkflowStateSchema } from \"./types\";\n\n// Input/Output schemas for this step\nconst InitializeInputSchema = AudioProcessingParamsSchema;\nconst InitializeOutputSchema = WorkflowStateSchema.extend({\n  signedUrls: z.array(z.string().url()).optional(),\n});\n\ntype InitializeInput = z.infer<typeof InitializeInputSchema>;\ntype InitializeOutput = z.infer<typeof InitializeOutputSchema>;\n\nexport class InitializeWorkflowStep\n  implements WorkflowStep<InitializeInput, InitializeOutput>\n{\n  constructor(private env: Env) {}\n\n  validateInput(input: unknown): InitializeInput {\n    return InitializeInputSchema.parse(input);\n  }\n\n  validateOutput(output: unknown): InitializeOutput {\n    return InitializeOutputSchema.parse(output);\n  }\n\n  async execute(input: InitializeInput): Promise<InitializeOutput> {\n    const validInput = this.validateInput(input);\n\n    const {\n      episodeId,\n      audioR2Key,\n      chunkDuration = 60,\n      overlapDuration = 2,\n      encodingFormats = [\"mp3_128\"],\n      taskId,\n      transcriptionLanguage = this.env.DEFAULT_TRANSCRIPTION_LANGUAGE || \"en\",\n      transcriptionModel = this.env.DEFAULT_TRANSCRIPTION_MODEL ||\n        \"@cf/deepgram/nova-3\",\n      useNova3Features = this.env.USE_NOVA3_FEATURES === \"true\" || false,\n    } = validInput;\n\n    if (!episodeId || !audioR2Key) {\n      throw new Error(\n        `Episode ID and audio R2 key are required [Settings: episodeId=${episodeId}, audioR2Key=${\n          audioR2Key ? \"provided\" : \"missing\"\n        }, transcriptionLanguage=${transcriptionLanguage}, transcriptionModel=${transcriptionModel}]`\n      );\n    }\n\n    // Determine if we're using nova-3 and adjust settings accordingly\n    const isNova3 =\n      transcriptionModel === \"@cf/deepgram/nova-3\" || useNova3Features;\n    const finalChunkDuration = isNova3 ? 60 : chunkDuration; // 1 minute (60 seconds) for nova-3\n    const finalOverlapDuration = isNova3 ? 2 : overlapDuration; // Standard overlap for 1-minute chunks\n    const finalTranscriptionModel = isNova3\n      ? \"@cf/deepgram/nova-3\"\n      : transcriptionModel;\n\n    const workflowId = uuidv4();\n    const timestamp = new Date().toISOString();\n\n    // Strip r2:// prefix if present to get the actual R2 key for URL generation\n    const actualR2Key = audioR2Key.startsWith(\"r2://\")\n      ? audioR2Key.substring(5)\n      : audioR2Key;\n\n    // Generate a preview of the download URL that will be used in the next step\n    const previewDownloadUrl = await generateSignedDownloadUrl(\n      this.env,\n      actualR2Key,\n      3600\n    );\n\n    const result = {\n      workflowId,\n      episodeId,\n      audioR2Key,\n      chunkDuration: finalChunkDuration,\n      overlapDuration: finalOverlapDuration,\n      encodingFormats,\n      startedAt: timestamp,\n      taskId,\n      transcriptionLanguage,\n      transcriptionModel: finalTranscriptionModel,\n      useNova3Features: isNova3,\n      previewDownloadUrl: previewDownloadUrl.url,\n      signedUrls: [previewDownloadUrl.url],\n    };\n\n    return this.validateOutput(result);\n  }\n}\n\n// Legacy function for backward compatibility\nexport async function initializeWorkflow(\n  env: Env,\n  params: AudioProcessingParams\n): Promise<WorkflowState> {\n  const step = new InitializeWorkflowStep(env);\n  const result = await step.execute(params);\n  // Remove signedUrls for legacy compatibility\n  const { signedUrls, ...legacyResult } = result;\n  return legacyResult;\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport {\n  generateSignedDownloadUrl,\n  generateSignedUploadUrl,\n} from \"../../utils/storage\";\nimport { R2PreSignedUrlGenerator } from \"../../utils\";\nimport type { Env } from \"./types\";\nimport { WorkflowStateSchema, EncodedAudioSchema } from \"./types\";\n\n/**\n * Encode audio for processing - converts audio to optimal format for TTS\n */\nexport async function encodeAudioForTTS(env: Env, workflowState: unknown) {\n  // Validate input\n  const validatedState = WorkflowStateSchema.parse(workflowState);\n\n  // Get a reference to the encoding container\n  const containerId = env.ENCODING_CONTAINER.idFromName(\"encoding-service\");\n  const container = env.ENCODING_CONTAINER.get(containerId);\n\n  // Strip r2:// prefix if present to get the actual R2 key\n  const actualR2Key = validatedState.audioR2Key.startsWith(\"r2://\")\n    ? validatedState.audioR2Key.substring(5)\n    : validatedState.audioR2Key;\n\n  // Create R2 presigned URL generator for direct R2 access (better for FFmpeg range requests)\n  const r2Generator = new R2PreSignedUrlGenerator(\n    env.R2_ACCESS_KEY_ID,\n    env.R2_SECRET_ACCESS_KEY,\n    env.R2_ENDPOINT\n  );\n\n  // Generate direct R2 presigned download URL for reading the input audio file\n  const audioDownloadUrl = await r2Generator.generatePresignedUrl(\n    \"podcast-service-assets\",\n    actualR2Key,\n    3600 // 1 hour\n  );\n\n  // Generate R2 key for the encoded file\n  const encodedFileId = uuidv4();\n  const encodedR2Key = `processing/${validatedState.episodeId}/${encodedFileId}_24k_mono.ogg`;\n\n  // Generate presigned URL for uploading the encoded file\n  const encodedUploadResult = await generateSignedUploadUrl(\n    env,\n    encodedR2Key,\n    \"audio/ogg\", // Content-Type for Opus files (stored in OGG container)\n    3600 // 1 hour expiration\n  );\n\n  const encodeResponse = await container.fetch(\"http://localhost:8080/encode\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      audioUrl: audioDownloadUrl,\n      uploadUrl: encodedUploadResult.url,\n      outputFormat: \"opus\",\n      bitrate: 24,\n      channels: 1, // Mono\n      sampleRate: 16000, // 16 kHz for optimal transcription\n    }),\n  });\n\n  if (!encodeResponse.ok) {\n    const errorText = await encodeResponse.text();\n    let errorData;\n\n    // Try to parse error response as JSON for 429 responses\n    try {\n      errorData = JSON.parse(errorText);\n    } catch {\n      // Not JSON, use error text\n      errorData = { error: errorText };\n    }\n\n    throw new Error(\n      `Processing encoding failed: ${errorData.error || errorText}`\n    );\n  }\n\n  const encodeResult: {\n    metadata: {\n      duration: number;\n    };\n  } = await encodeResponse.json();\n\n  // Pre-sign download URL for the next step (prepare-chunk-storage)\n  const encodedDownloadUrl = await r2Generator.generatePresignedUrl(\n    \"podcast-service-assets\",\n    encodedR2Key,\n    3600 // 1 hour\n  );\n\n  const result = {\n    encodedR2Key,\n    encodedAudioUrl: encodedDownloadUrl, // Pre-signed for next step\n    duration: encodeResult.metadata?.duration || 0,\n    signedUrls: [audioDownloadUrl, encodedUploadResult.url, encodedDownloadUrl],\n  };\n\n  // Validate output and return\n  return EncodedAudioSchema.parse(result);\n}\n", "import type { Env } from \"./types\";\nimport { TaskService } from \"../../tasks/service.js\";\nimport { TaskRepository } from \"../../tasks/repository.js\";\n\n/**\n * Helper class for reporting progress from workflow steps back to tasks\n */\nexport class WorkflowProgressReporter {\n  private env: Env;\n  private taskId?: string;\n  private workflowId?: string;\n  private taskService: TaskService;\n  private taskRepository: TaskRepository;\n\n  constructor(env: Env, taskId?: string, workflowId?: string) {\n    this.env = env;\n    this.taskId = taskId;\n    this.workflowId = workflowId;\n    this.taskService = new TaskService(env.DB);\n    this.taskRepository = new TaskRepository(env.DB);\n  }\n\n  /**\n   * Report progress for a specific step\n   */\n  async reportStepProgress(\n    step: string,\n    progress: number,\n    message?: string,\n    data?: any\n  ): Promise<void> {\n    if (!this.taskId) {\n      console.warn(\"No task ID provided, skipping progress update\");\n      return;\n    }\n\n    try {\n      const taskIdNum = parseInt(this.taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${this.taskId}`);\n        return;\n      }\n\n      const stepMessage = message || `${step}: ${progress}%`;\n\n      // Update task progress and step using Drizzle directly\n      await this.taskService.updateTaskStep(taskIdNum, stepMessage, progress);\n\n      // Update task result with step data if provided\n      if (data) {\n        const resultData = {\n          step,\n          progress,\n          message: stepMessage,\n          data,\n          workflowId: this.workflowId,\n          timestamp: new Date().toISOString(),\n        };\n\n        await this.taskRepository.updateStatus(taskIdNum, \"processing\", {\n          result: JSON.stringify(resultData),\n        });\n      }\n\n      console.log(\n        `Progress reported for step ${step}: ${progress}% (task ${this.taskId})`\n      );\n    } catch (error) {\n      console.error(\"Error reporting workflow progress:\", error);\n    }\n  }\n\n  /**\n   * Report step completion\n   */\n  async reportStepComplete(\n    step: string,\n    message?: string,\n    data?: any\n  ): Promise<void> {\n    await this.reportStepProgress(step, 100, message, data);\n  }\n\n  /**\n   * Report step completion with result data stored in task\n   */\n  async reportStepCompleteWithResult(\n    step: string,\n    message: string,\n    resultData: any\n  ): Promise<void> {\n    await this.reportStepProgress(step, 100, message, resultData);\n  }\n\n  /**\n   * Report step failure\n   */\n  async reportStepError(\n    step: string,\n    error: string,\n    data?: any\n  ): Promise<void> {\n    await this.reportStepProgress(step, 0, `Error: ${error}`, data);\n  }\n\n  /**\n   * Report encoding progress (for containers that can report incremental progress)\n   */\n  async reportEncodingProgress(\n    format: string,\n    progress: number,\n    data?: any\n  ): Promise<void> {\n    await this.reportStepProgress(\n      \"audio-encoding\",\n      progress,\n      `Encoding ${format}: ${progress}%`,\n      { format, ...data }\n    );\n  }\n\n  /**\n   * Report workflow status change\n   */\n  async reportWorkflowStatus(\n    status: string,\n    message?: string,\n    data?: any\n  ): Promise<void> {\n    if (!this.taskId) {\n      console.warn(\"No task ID provided, skipping status update\");\n      return;\n    }\n\n    try {\n      const taskIdNum = parseInt(this.taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${this.taskId}`);\n        return;\n      }\n\n      // Prepare the update data\n      const updateData: any = {};\n      if (message) {\n        updateData.step = message;\n      }\n\n      // Update task result with status data if provided\n      if (data) {\n        const resultData = {\n          status,\n          message,\n          data,\n          workflowId: this.workflowId,\n          timestamp: new Date().toISOString(),\n        };\n        updateData.result = JSON.stringify(resultData);\n      }\n\n      // Update task status using Drizzle directly\n      await this.taskRepository.updateStatus(taskIdNum, status, updateData);\n\n      console.log(`Status reported: ${status} (task ${this.taskId})`);\n    } catch (error) {\n      console.error(\"Error reporting workflow status:\", error);\n    }\n  }\n}\n\n/**\n * Enhanced progress reporter that can handle container disconnection detection\n */\nexport class ContainerProgressReporter extends WorkflowProgressReporter {\n  private connectionActive: boolean = true;\n  private jobId?: string;\n\n  constructor(env: Env, taskId?: string, workflowId?: string, jobId?: string) {\n    super(env, taskId, workflowId);\n    this.jobId = jobId;\n  }\n\n  /**\n   * Mark the connection as inactive (client disconnected)\n   */\n  markDisconnected(): void {\n    this.connectionActive = false;\n    console.log(`Container job ${this.jobId} marked as disconnected`);\n  }\n\n  /**\n   * Check if the connection is still active\n   */\n  isConnected(): boolean {\n    return this.connectionActive;\n  }\n\n  /**\n   * Create a progress callback that can detect disconnections\n   */\n  createDisconnectionAwareCallback(step: string) {\n    return async (progress: number, additionalData?: any): Promise<boolean> => {\n      if (!this.connectionActive) {\n        console.log(\n          `Progress callback aborted - client disconnected (step: ${step})`\n        );\n        return false; // Signal to abort the operation\n      }\n\n      try {\n        await this.reportStepProgress(\n          step,\n          progress,\n          undefined,\n          additionalData\n        );\n        return true; // Continue operation\n      } catch (error) {\n        console.error(`Progress callback failed for step ${step}:`, error);\n        this.markDisconnected();\n        return false; // Abort on error\n      }\n    };\n  }\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport {\n  generateSignedDownloadUrl,\n  generateSignedUploadUrl,\n} from \"../../utils/storage\";\nimport { R2PreSignedUrlGenerator } from \"../../utils\";\nimport type { Env, ChunkingResult, EncodedAudio, WorkflowState } from \"./types\";\n\nexport async function audioChunking(\n  env: Env,\n  workflowState: WorkflowState & {\n    chunkDuration: number;\n    overlapDuration: number;\n  },\n  encodedAudio: EncodedAudio\n): Promise<ChunkingResult> {\n  // Step 1: Prepare chunk storage (moved from prepare-chunk-storage step)\n\n  // Calculate expected number of chunks using encoded audio duration\n  const totalDuration = encodedAudio.duration;\n  const expectedChunks = Math.ceil(totalDuration / workflowState.chunkDuration);\n\n  // Pre-generate signed PUT URLs for all expected chunks\n  const chunkUploadUrls: Array<{\n    index: number;\n    r2Key: string;\n    uploadUrl: string;\n  }> = [];\n\n  for (let i = 0; i < expectedChunks; i++) {\n    const chunkId = uuidv4();\n    const chunkR2Key = `chunks/${workflowState.episodeId}/${chunkId}.ogg`;\n\n    // Generate a presigned PUT URL for chunk upload\n    const chunkUploadResult = await generateSignedUploadUrl(\n      env,\n      chunkR2Key,\n      \"audio/ogg\", // Content-Type for Opus files (stored in OGG container)\n      3600 // 1 hour expiration\n    );\n\n    chunkUploadUrls.push({\n      index: i,\n      r2Key: chunkR2Key,\n      uploadUrl: chunkUploadResult.url,\n    });\n  }\n\n  // Step 2: Perform audio chunking\n  // Create R2 presigned URL generator for direct R2 access (better for FFmpeg range requests)\n  const r2Generator = new R2PreSignedUrlGenerator(\n    env.R2_ACCESS_KEY_ID,\n    env.R2_SECRET_ACCESS_KEY,\n    env.R2_ENDPOINT\n  );\n\n  // The encodedAudioUrl is already a direct presigned URL from the TTS encode step\n  // We can use it directly for FFmpeg - no need to regenerate it\n  const directAudioUrl = encodedAudio.encodedAudioUrl;\n\n  // Get a reference to the encoding container\n  const containerId = env.ENCODING_CONTAINER.idFromName(\"encoding-service\");\n  const container = env.ENCODING_CONTAINER.get(containerId);\n\n  const chunkResponse = await container.fetch(\"http://localhost:8080/chunk\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      audioUrl: directAudioUrl, // Use direct R2 presigned URL instead of storage endpoint\n      chunkUploadUrls: chunkUploadUrls,\n      chunkDuration: workflowState.chunkDuration,\n      overlapDuration: workflowState.overlapDuration,\n      duration: totalDuration, // Pass the pre-determined duration\n    }),\n  });\n\n  if (!chunkResponse.ok) {\n    const errorText = await chunkResponse.text();\n    let errorData;\n\n    // Try to parse error response as JSON for 429 responses\n    try {\n      errorData = JSON.parse(errorText);\n    } catch {\n      // Not JSON, use error text\n      errorData = { error: errorText };\n    }\n\n    throw new Error(`Chunking request failed: ${JSON.stringify(errorData)}`);\n  }\n\n  const chunkResult = (await chunkResponse.json()) as any;\n\n  if (!chunkResult.success || !chunkResult.chunks) {\n    throw new Error(\n      `Invalid chunking response: ${JSON.stringify(chunkResult)}`\n    );\n  }\n\n  // Generate direct R2 presigned download URLs for each chunk\n  const audioUrls = await Promise.all(\n    chunkResult.chunks.map(async (chunk: any) => {\n      // Generate direct R2 presigned URL for this chunk\n      return await r2Generator.generatePresignedUrl(\n        \"podcast-service-assets\",\n        chunk.r2Key,\n        3600 // 1 hour expiration\n      );\n    })\n  );\n\n  return {\n    chunks: audioUrls,\n  };\n}\n", "import type {\n  Env,\n  ChunkingResult,\n  WorkflowState,\n  TranscribedChunk,\n} from \"./types\";\nimport { generateSignedDownloadUrl } from \"../../utils/storage.js\";\n\ninterface TranscriptionOptions {\n  audio: any;\n  [key: string]: any;\n}\n\ninterface ChunkTranscription {\n  chunkStartOffset: number;\n  chunkIndex: number;\n  transcript: any;\n}\n\nasync function fetchAudioData(\n  audioUrl: string\n): Promise<{ response: Response; arrayBuffer?: ArrayBuffer }> {\n  const response = await fetch(audioUrl);\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch from audio URL: ${response.status} ${response.statusText}`\n    );\n  }\n\n  return { response };\n}\n\nasync function transcribeWithWhisper(\n  env: Env,\n  workflowState: WorkflowState,\n  audioUrl: string,\n  chunkIndex: number\n): Promise<TranscribedChunk | null> {\n  const defaultLanguage = env.DEFAULT_TRANSCRIPTION_LANGUAGE || \"en\";\n  const language = workflowState.transcriptionLanguage || defaultLanguage;\n\n  const { response } = await fetchAudioData(audioUrl);\n  const audioArrayBuffer = await response.arrayBuffer();\n\n  const transcriptionOptions: TranscriptionOptions = {\n    audio: Array.from(new Uint8Array(audioArrayBuffer)),\n    language: language,\n  };\n\n  const transcriptResponse = (await env.AI.run(\n    workflowState.transcriptionModel as any,\n    transcriptionOptions\n  )) as any;\n\n  // TODO: this is not true..\n  return transcriptResponse as TranscribedChunk;\n}\n\nasync function transcribeWithDeepgram(\n  env: Env,\n  workflowState: WorkflowState,\n  audioUrl: string,\n  chunkIndex: number\n) {\n  const chunkStartOffset = chunkIndex * workflowState.chunkDuration;\n\n  const { response } = await fetchAudioData(audioUrl);\n\n  const transcriptionOptions: TranscriptionOptions = {\n    audio: {\n      body: response.body,\n      contentType: \"audio/ogg\",\n    },\n  };\n\n  // Enable Nova-3 specific features if configured\n  if (workflowState.useNova3Features) {\n    transcriptionOptions.punctuate = true;\n    transcriptionOptions.smart_format = true;\n    transcriptionOptions.numerals = true;\n    transcriptionOptions.dictation = true;\n    transcriptionOptions.diarize = true;\n    transcriptionOptions.detectLanguage = true;\n  }\n\n  const transcriptResponse = await env.AI.run(\n    workflowState.transcriptionModel as any,\n    transcriptionOptions\n  );\n\n  if (!transcriptResponse || Object.keys(transcriptResponse).length === 0) {\n    console.warn(`Deepgram returned empty response for chunk ${chunkIndex}`);\n    return null;\n  }\n\n  return {\n    startTime: chunkStartOffset,\n    endTime: chunkStartOffset + workflowState.chunkDuration,\n    chunkIndex: chunkIndex,\n    raw: transcriptResponse,\n  } as unknown as TranscribedChunk;\n}\n\nexport async function transcribeChunks(\n  env: Env,\n  workflowState: WorkflowState,\n  chunkingResult: ChunkingResult\n): Promise<{\n  chunkTranscriptionsUrl?: string;\n}> {\n  // Validate chunks data before processing\n  if (chunkingResult.chunks.length === 0) {\n    throw new Error(\n      `No chunks available for transcription. [Settings: language=${\n        workflowState.transcriptionLanguage ||\n        env.DEFAULT_TRANSCRIPTION_LANGUAGE ||\n        \"en\"\n      }, model=${workflowState.transcriptionModel}, nova3=${\n        workflowState.useNova3Features\n      }]`\n    );\n  }\n\n  // Track errors for detailed reporting\n  const chunkErrors: Array<{ index: number; error: string }> = [];\n\n  // Store all transcriptions for JSON output\n  const allTranscriptions: ChunkTranscription[] = [];\n\n  const transcribeChunk = async (audioUrl: string, index: number) => {\n    if (!audioUrl) {\n      const error = `No audio URL available for chunk ${index}`;\n      console.warn(error);\n      chunkErrors.push({ index, error });\n      return null;\n    }\n\n    try {\n      const chunkStartOffset = index * workflowState.chunkDuration;\n      let transcriptResult;\n\n      switch (workflowState.transcriptionModel) {\n        case \"@cf/deepgram/nova-3\":\n          transcriptResult = await transcribeWithDeepgram(\n            env,\n            workflowState,\n            audioUrl,\n            index\n          );\n          break;\n        case \"@cf/openai/whisper\":\n          transcriptResult = await transcribeWithWhisper(\n            env,\n            workflowState,\n            audioUrl,\n            index\n          );\n          break;\n        default:\n          throw new Error(\n            `Unsupported transcription model: ${workflowState.transcriptionModel}. Supported models: deepgram/nova-*, @cf/openai/whisper-*`\n          );\n      }\n\n      // Store the transcription data for JSON output\n      if (transcriptResult) {\n        allTranscriptions.push({\n          chunkStartOffset,\n          chunkIndex: index,\n          transcript: transcriptResult,\n        });\n      }\n\n      return transcriptResult;\n    } catch (error: any) {\n      const errorMsg = `Transcription failed for chunk ${index}: ${error.message}`;\n\n      chunkErrors.push({ index, error: errorMsg });\n      return null;\n    }\n  };\n\n  // Process chunks in batches\n  const concurrencyLimit = 3;\n  const transcribed: TranscribedChunk[] = [];\n  let skippedChunks = 0;\n\n  for (let i = 0; i < chunkingResult.chunks.length; i += concurrencyLimit) {\n    const batch = chunkingResult.chunks.slice(i, i + concurrencyLimit);\n    const batchResults = await Promise.all(\n      batch.map((audioUrl, batchIndex) =>\n        transcribeChunk(audioUrl, i + batchIndex)\n      )\n    );\n\n    // Filter out null results (failed chunks) and count them\n    const validResults = batchResults.filter(\n      (result): result is TranscribedChunk => result !== null\n    );\n    skippedChunks += batchResults.length - validResults.length;\n\n    transcribed.push(...validResults);\n  }\n\n  // Store transcriptions JSON to R2\n  let chunkTranscriptionsUrl: string | undefined;\n\n  if (allTranscriptions.length > 0) {\n    try {\n      const transcriptionsJson = JSON.stringify(allTranscriptions, null, 2);\n      const r2Key = `transcriptions/${workflowState.episodeId}/${workflowState.workflowId}/chunk-transcriptions.json`;\n\n      // Upload to R2\n      await env.BUCKET.put(r2Key, transcriptionsJson, {\n        httpMetadata: {\n          contentType: \"application/json\",\n        },\n      });\n\n      // Generate signed download URL\n      const signedUrl = await generateSignedDownloadUrl(\n        env,\n        r2Key,\n        3600 * 24 // 24 hours expiration\n      );\n\n      chunkTranscriptionsUrl = signedUrl.url;\n\n      console.log(\n        `Stored ${allTranscriptions.length} chunk transcriptions to R2: ${r2Key}`\n      );\n      console.log(`Signed URL: ${chunkTranscriptionsUrl}`);\n    } catch (error) {\n      console.error(\"Failed to store transcriptions JSON to R2:\", error);\n      // Don't fail the entire workflow if JSON storage fails\n    }\n  }\n\n  // Ensure we have at least some transcribed chunks\n  if (transcribed.length === 0) {\n    const errorDetails = chunkErrors\n      .map(({ index, error }) => `Chunk ${index}: ${error}`)\n      .join(\"; \");\n\n    const detailedError = `All ${chunkingResult.chunks.length} chunks failed transcription. Cannot proceed without any transcribed content. Model: ${workflowState.transcriptionModel}. Errors: ${errorDetails}`;\n\n    throw new Error(detailedError);\n  }\n\n  return {\n    chunkTranscriptionsUrl,\n  };\n}\n", "import type { Env, EncodedAudio, ChunkingResult } from \"./types\";\n\n// Helper function to extract R2 key from signed URL\nfunction extractR2KeyFromUrl(signedUrl: string): string | null {\n  try {\n    const url = new URL(signedUrl);\n    const pathname = url.pathname;\n\n    // Remove leading slash and return the path as R2 key\n    // Signed URLs typically have the format: https://domain.com/path/to/file.ext?signature...\n    if (pathname.startsWith(\"/\")) {\n      return pathname.substring(1);\n    }\n    return pathname;\n  } catch (error) {\n    console.warn(`Failed to extract R2 key from URL: ${signedUrl}`, error);\n    return null;\n  }\n}\n\nexport async function cleanupResources(\n  env: Env,\n  encodedAudio: EncodedAudio,\n  chunkingResult: ChunkingResult\n): Promise<{\n  cleanedUp: boolean;\n  cleanedFiles: string[];\n  note: string;\n  chunkCount: number;\n}> {\n  const cleanedFiles: string[] = [];\n\n  // Clean up the temporary encoded processing file\n  try {\n    await env.BUCKET.delete(encodedAudio.encodedR2Key);\n    cleanedFiles.push(encodedAudio.encodedR2Key);\n  } catch (error) {\n    console.warn(\n      `Failed to delete encoded file ${encodedAudio.encodedR2Key}:`,\n      error\n    );\n  }\n\n  // Clean up chunk files from R2\n  const chunkDeletePromises = chunkingResult.chunks.map(async (chunkUrl) => {\n    const r2Key = extractR2KeyFromUrl(chunkUrl);\n    if (r2Key) {\n      try {\n        await env.BUCKET.delete(r2Key);\n        cleanedFiles.push(r2Key);\n        console.log(`Deleted chunk file: ${r2Key}`);\n      } catch (error) {\n        console.warn(`Failed to delete chunk file ${r2Key}:`, error);\n      }\n    }\n  });\n\n  await Promise.all(chunkDeletePromises);\n\n  return {\n    cleanedUp: true,\n    cleanedFiles,\n    note: `Cleaned up ${cleanedFiles.length} files: temporary encoded file and ${chunkingResult.chunks.length} chunk files from R2`,\n    chunkCount: chunkingResult.chunks.length,\n  };\n}\n", "import {\n  generateSignedDownloadUrl,\n  generateSignedUploadUrl,\n} from \"../../utils/storage\";\nimport type { Env, EncodingResult, TranscribedChunk, Word } from \"./types\";\n\nexport async function processEncodingFormats(\n  env: Env,\n  container: DurableObjectStub,\n  audioR2Key: string,\n  formats: string[],\n  episodeId: string,\n  taskId?: number\n): Promise<EncodingResult[]> {\n  // Strip r2:// prefix if present to get the actual R2 key\n  const actualR2Key = audioR2Key.startsWith(\"r2://\")\n    ? audioR2Key.substring(5)\n    : audioR2Key;\n\n  // Generate download URL for reading the input audio file\n  const audioDownloadUrl = await generateSignedDownloadUrl(\n    env,\n    actualR2Key,\n    3600 // 1 hour\n  );\n\n  const encodingPromises = formats.map(async (format) => {\n    const [codec, bitrateStr] = format.split(\"_\");\n    const bitrate = parseInt(bitrateStr);\n\n    // Generate R2 key for the encoded file\n    const encodedR2Key = `encoded/${episodeId}/${format}.${codec}`;\n\n    // Generate presigned PUT URL for uploading the encoded file\n    const uploadResult = await generateSignedUploadUrl(\n      env,\n      encodedR2Key,\n      codec === \"mp3\" ? \"audio/mpeg\" : \"audio/wav\",\n      3600 // 1 hour expiration\n    );\n\n    // Enhanced retry logic for container rate limiting and disconnections\n    const maxRetryTime = 60 * 60 * 1000; // 1 hour in milliseconds\n    const baseDelay = 10 * 1000; // 10 seconds base delay\n    const maxDelay = 5 * 60 * 1000; // 5 minutes max delay\n    const startTime = Date.now();\n    let attempt = 0;\n    let lastError;\n\n    while (Date.now() - startTime < maxRetryTime) {\n      attempt++;\n      // Create AbortController for timeout\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5 * 60 * 1000); // 5 minute timeout\n\n      try {\n        const response = await container.fetch(\"http://localhost:8080/encode\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            audioUrl: audioDownloadUrl.url,\n            uploadUrl: uploadResult.url,\n            outputFormat: codec,\n            bitrate,\n            streaming: false, // Keep false for now, can be made configurable later\n          }),\n          signal: controller.signal,\n        });\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          let errorData;\n\n          // Try to parse error response as JSON for 429 responses\n          try {\n            errorData = JSON.parse(errorText);\n          } catch {\n            // Not JSON, use error text\n            errorData = { error: errorText };\n          }\n\n          // Handle rate limiting (429) responses\n          if (response.status === 429) {\n            const retryAfter = errorData.retryAfter || 10;\n            console.log(\n              `Rate limited on attempt ${attempt}. Retrying after ${retryAfter}s...`\n            );\n\n            // Check if we have time left for another retry\n            const timeLeft = maxRetryTime - (Date.now() - startTime);\n            if (timeLeft < retryAfter * 1000 + 30000) {\n              // Need at least retry delay + 30s buffer\n              throw new Error(\n                `Rate limited and insufficient time remaining (${Math.round(\n                  timeLeft / 1000\n                )}s left)`\n              );\n            }\n\n            await new Promise((resolve) =>\n              setTimeout(resolve, retryAfter * 1000)\n            );\n            continue;\n          }\n\n          // Check if this is a container disconnection error\n          if (\n            errorText.includes(\"Container suddenly disconnected\") ||\n            errorText.includes(\"Container not available\") ||\n            response.status === 503\n          ) {\n            throw new Error(`Container disconnected: ${errorText}`);\n          }\n\n          throw new Error(\n            `Encoding failed for ${format}: ${response.status} - ${errorText}`\n          );\n        }\n\n        const encodingData = (await response.json()) as any;\n        if (!encodingData.success) {\n          throw new Error(\n            `Encoding failed for ${format}: ${encodingData.error}`\n          );\n        }\n\n        // Success - return the result\n        return {\n          format: codec,\n          bitrate,\n          r2Key: encodedR2Key, // Workflow tracks the R2 key\n          size: encodingData.metadata.size,\n          duration: encodingData.metadata.duration,\n        };\n      } catch (error) {\n        clearTimeout(timeoutId);\n        lastError = error;\n\n        const isRetryableError =\n          error instanceof Error &&\n          (error.message.includes(\"Container suddenly disconnected\") ||\n            error.message.includes(\"Container not available\") ||\n            error.message.includes(\"AbortError\") ||\n            error.message.includes(\"network\") ||\n            error.message.includes(\"Rate limited\"));\n\n        if (isRetryableError) {\n          const timeElapsed = Date.now() - startTime;\n          const timeLeft = maxRetryTime - timeElapsed;\n\n          if (timeLeft <= 0) {\n            console.log(`Max retry time (1 hour) exceeded for ${format}`);\n            break;\n          }\n\n          // Calculate exponential backoff delay, but respect rate limit delays\n          const exponentialDelay = Math.min(\n            baseDelay * Math.pow(2, attempt - 1),\n            maxDelay\n          );\n          const delay = error.message.includes(\"Rate limited\")\n            ? 0\n            : exponentialDelay; // Rate limited errors already waited\n\n          if (delay > 0 && timeLeft > delay + 30000) {\n            // Ensure we have buffer time\n            console.log(\n              `Retryable error on attempt ${attempt}: ${\n                error.message\n              }. Retrying in ${delay / 1000}s... (${Math.round(\n                timeLeft / 1000\n              )}s left)`\n            );\n            await new Promise((resolve) => setTimeout(resolve, delay));\n          } else if (delay === 0) {\n            console.log(\n              `Retrying immediately after rate limit (attempt ${attempt})`\n            );\n          } else {\n            console.log(\n              `Insufficient time left for retry delay. ${Math.round(\n                timeLeft / 1000\n              )}s remaining`\n            );\n            break;\n          }\n          continue;\n        } else {\n          // Non-retryable error\n          throw error;\n        }\n      }\n    }\n\n    // If we get here, max time exceeded\n    const totalTime = Math.round((Date.now() - startTime) / 1000);\n    throw new Error(\n      `Encoding failed for ${format} after ${totalTime}s (${attempt} attempts): ${\n        lastError instanceof Error ? lastError.message : String(lastError)\n      }`\n    );\n  });\n\n  return Promise.all(encodingPromises);\n}\n\nexport function mergeTranscriptions(\n  chunks: TranscribedChunk[],\n  overlapDuration: number\n): {\n  text: string;\n  totalWords: number;\n  words: Array<{ word: string; start: number; end: number }>;\n} {\n  if (chunks.length === 0) return { text: \"\", totalWords: 0, words: [] };\n\n  // Collect all words from all chunks\n  const allWords: Array<{ word: string; start: number; end: number }> = [];\n\n  for (const chunk of chunks) {\n    // Ensure each word has all required properties\n    for (const word of chunk.words) {\n      if (\n        word.word &&\n        typeof word.start === \"number\" &&\n        typeof word.end === \"number\"\n      ) {\n        allWords.push({\n          word: word.word,\n          start: word.start,\n          end: word.end,\n        });\n      }\n    }\n  }\n\n  // Sort words by start time to ensure correct order\n  allWords.sort((a, b) => a.start - b.start);\n\n  // Remove overlapping words based on time overlap\n  const mergedWords: Array<{ word: string; start: number; end: number }> = [];\n\n  for (const word of allWords) {\n    // Check if this word overlaps with the last added word\n    const lastWord = mergedWords[mergedWords.length - 1];\n\n    if (!lastWord) {\n      // First word, always add\n      mergedWords.push(word);\n    } else {\n      // Check for time overlap (allowing small tolerance for audio processing variations)\n      const tolerance = 0.1; // 100ms tolerance\n      const hasOverlap = word.start < lastWord.end + tolerance;\n\n      if (hasOverlap) {\n        // Skip this word as it's likely a duplicate from chunk overlap\n        console.log(\n          `Skipping overlapping word: \"${word.word}\" at ${word.start}s (overlaps with \"${lastWord.word}\" ending at ${lastWord.end}s)`\n        );\n      } else {\n        // No overlap, add the word\n        mergedWords.push(word);\n      }\n    }\n  }\n\n  // Generate final text by joining all words\n  const finalText = mergedWords.map((w) => w.word).join(\" \");\n\n  return {\n    text: finalText,\n    totalWords: mergedWords.length,\n    words: mergedWords,\n  };\n}\n", "import {\n  WorkflowEntrypoint,\n  WorkflowStep,\n  WorkflowEvent,\n} from \"cloudflare:workers\";\n\n// Import types\nimport type { Env, ImportShowParams } from \"./types\";\nimport { ImportShowParamsSchema } from \"./types\";\n\n// Import step classes\nimport {\n  ValidateAndParseRSSStep,\n  CreateShowStep,\n  ProcessEpisodeStep,\n} from \"./step-classes\";\n\nexport class ImportShowWorkflow extends WorkflowEntrypoint<\n  Env,\n  ImportShowParams\n> {\n  private async updateWorkflowStatus(\n    taskId?: string,\n    status?: string,\n    message?: string\n  ): Promise<void> {\n    if (!taskId) return;\n\n    try {\n      const taskIdNum = parseInt(taskId);\n      if (isNaN(taskIdNum)) {\n        console.error(`Invalid task ID: ${taskId}`);\n        return;\n      }\n\n      const { TaskService } = await import(\"../../tasks/service.js\");\n      const taskService = new TaskService(this.env.DB);\n\n      // Update both status and step message\n      if (status && message) {\n        await taskService.updateTaskStep(taskIdNum, message);\n        const { TaskRepository } = await import(\"../../tasks/repository.js\");\n        const taskRepository = new TaskRepository(this.env.DB);\n        await taskRepository.updateStatus(taskIdNum, status, {\n          step: message,\n        });\n      } else if (status) {\n        const { TaskRepository } = await import(\"../../tasks/repository.js\");\n        const taskRepository = new TaskRepository(this.env.DB);\n        await taskRepository.updateStatus(taskIdNum, status);\n      } else if (message) {\n        await taskService.updateTaskStep(taskIdNum, message);\n      }\n    } catch (error) {\n      console.warn(\"Failed to update task status:\", error);\n    }\n  }\n\n  async run(event: WorkflowEvent<ImportShowParams>, step: WorkflowStep) {\n    // Validate parameters\n    const params = ImportShowParamsSchema.parse(event.payload);\n\n    console.log(\"Starting import-show workflow with params:\", {\n      rssUrl: params.rssUrl,\n      taskId: params.taskId,\n      maxEpisodes: params.maxEpisodes,\n    });\n\n    await this.updateWorkflowStatus(\n      params.taskId,\n      \"running\",\n      \"Starting RSS import\"\n    );\n\n    try {\n      // Step 1: Validate and parse RSS\n      const parseStep = new ValidateAndParseRSSStep(this.env);\n      const parseResult = await step.do(\"parse-rss\", async () => {\n        return await parseStep.execute({\n          rssUrl: params.rssUrl,\n          maxEpisodes: params.maxEpisodes,\n        });\n      });\n\n      await this.updateWorkflowStatus(\n        params.taskId,\n        \"running\",\n        `Parsed RSS: ${parseResult.parsedRSS.title} (${parseResult.totalEpisodes} episodes)`\n      );\n\n      // Step 2: Create show\n      const createShowStep = new CreateShowStep(this.env);\n      const showResult = await step.do(\"create-show\", async () => {\n        return await createShowStep.execute({\n          title: parseResult.parsedRSS.title,\n          description: parseResult.parsedRSS.description,\n          imageUrl: parseResult.parsedRSS.imageUrl,\n          language: parseResult.parsedRSS.language,\n          categories: parseResult.parsedRSS.categories,\n          author: parseResult.parsedRSS.author,\n        });\n      });\n\n      await this.updateWorkflowStatus(\n        params.taskId,\n        \"running\",\n        `Created show: ${showResult.title} (ID: ${showResult.showId})`\n      );\n\n      // Step 3: Process episodes (as separate steps for each episode)\n      const episodes = parseResult.parsedRSS.episodes.slice(\n        0,\n        params.maxEpisodes\n      );\n      const episodeResults = [];\n\n      for (let i = 0; i < episodes.length; i++) {\n        const episode = episodes[i];\n\n        const processEpisodeStep = new ProcessEpisodeStep(this.env);\n        const episodeResult = await step.do(\n          `process-episode-${i}`,\n          async () => {\n            return await processEpisodeStep.execute({\n              showId: showResult.showId,\n              episode: {\n                title: episode.title,\n                description: episode.description,\n                audioUrl: episode.audioUrl,\n                imageUrl: episode.imageUrl,\n                publishedAt: episode.publishedAt,\n              },\n              skipExisting: params.skipExistingEpisodes,\n            });\n          }\n        );\n\n        episodeResults.push(episodeResult);\n\n        await this.updateWorkflowStatus(\n          params.taskId,\n          \"running\",\n          `Processed episode ${i + 1}/${episodes.length}: ${\n            episodeResult.title\n          }`\n        );\n\n        // Add a small delay between episodes to avoid overwhelming the system\n        if (i < episodes.length - 1) {\n          await step.sleep(\"delay-between-episodes\", 1000); // 1 second delay\n        }\n      }\n\n      // Final status update\n      await this.updateWorkflowStatus(\n        params.taskId,\n        \"completed\",\n        `Successfully imported show \"${showResult.title}\" with ${episodeResults.length} episodes`\n      );\n\n      return {\n        success: true,\n        showId: showResult.showId,\n        showTitle: showResult.title,\n        episodesCreated: episodeResults.length,\n        episodes: episodeResults,\n      };\n    } catch (error) {\n      await this.updateWorkflowStatus(\n        params.taskId,\n        \"failed\",\n        `Workflow failed: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n\n      throw error;\n    }\n  }\n}\n", "import { z } from \"zod\";\nimport type {\n  Env,\n  ImportShowWorkflowState,\n  RSSShow,\n  ShowCreationResult,\n} from \"./types\";\nimport { ShowRepository } from \"../../shows/repository\";\nimport { EpisodeRepository } from \"../../episodes/repository\";\nimport { EventPublisher } from \"../../events/publisher\";\nimport {\n  fetchAndParseRSS,\n  RSSParseError,\n  RSSValidationError,\n} from \"./rss-parser\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// WorkflowStep interface\nexport interface WorkflowStep<TInput, TOutput> {\n  validateInput(input: unknown): TInput;\n  validateOutput(output: unknown): TOutput;\n  execute(input: TInput): Promise<TOutput>;\n}\n\n// Schemas for RSS parsing step\nconst ParseRSSInputSchema = z.object({\n  rssUrl: z.string().url(),\n  maxEpisodes: z.number().int().positive(),\n});\n\nconst ParseRSSOutputSchema = z.object({\n  parsedRSS: z.object({\n    title: z.string(),\n    description: z.string(),\n    imageUrl: z.string().nullable().optional(),\n    language: z.string().optional(),\n    categories: z.array(z.string()).optional(),\n    author: z.string().optional(),\n    episodes: z.array(z.any()),\n  }),\n  totalEpisodes: z.number().int().nonnegative(),\n});\n\ntype ParseRSSInput = z.infer<typeof ParseRSSInputSchema>;\ntype ParseRSSOutput = z.infer<typeof ParseRSSOutputSchema>;\n\nexport class ValidateAndParseRSSStep\n  implements WorkflowStep<ParseRSSInput, ParseRSSOutput>\n{\n  constructor(private env: Env) {}\n\n  validateInput(input: unknown): ParseRSSInput {\n    return ParseRSSInputSchema.parse(input);\n  }\n\n  validateOutput(output: unknown): ParseRSSOutput {\n    return ParseRSSOutputSchema.parse(output);\n  }\n\n  async execute(input: ParseRSSInput): Promise<ParseRSSOutput> {\n    const validInput = this.validateInput(input);\n\n    try {\n      console.log(`Fetching and parsing RSS from: ${validInput.rssUrl}`);\n\n      const parsedRSS = await fetchAndParseRSS(validInput.rssUrl);\n\n      const result = {\n        parsedRSS,\n        totalEpisodes: Math.min(\n          parsedRSS.episodes.length,\n          validInput.maxEpisodes\n        ),\n      };\n\n      console.log(\n        `Successfully parsed RSS: ${parsedRSS.title} with ${parsedRSS.episodes.length} episodes`\n      );\n\n      return this.validateOutput(result);\n    } catch (error) {\n      if (\n        error instanceof RSSParseError ||\n        error instanceof RSSValidationError\n      ) {\n        throw new Error(`RSS parsing failed: ${error.message}`);\n      }\n      throw new Error(\n        `Unexpected error during RSS parsing: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n}\n\n// Schemas for show creation step\nconst CreateShowInputSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().nullable().optional(),\n  language: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n  author: z.string().optional(),\n});\n\nconst CreateShowOutputSchema = z.object({\n  showId: z.string().uuid(),\n  title: z.string(),\n  description: z.string(),\n  imageUrl: z.string().nullable().optional(),\n  language: z.string().nullable().optional(),\n  categories: z.array(z.string()).nullable().optional(),\n  author: z.string().nullable().optional(),\n});\n\ntype CreateShowInput = z.infer<typeof CreateShowInputSchema>;\ntype CreateShowOutput = z.infer<typeof CreateShowOutputSchema>;\n\nexport class CreateShowStep\n  implements WorkflowStep<CreateShowInput, CreateShowOutput>\n{\n  constructor(private env: Env) {}\n\n  validateInput(input: unknown): CreateShowInput {\n    return CreateShowInputSchema.parse(input);\n  }\n\n  validateOutput(output: unknown): CreateShowOutput {\n    return CreateShowOutputSchema.parse(output);\n  }\n\n  async execute(input: CreateShowInput): Promise<CreateShowOutput> {\n    const validInput = this.validateInput(input);\n\n    try {\n      console.log(`Creating show: ${validInput.title}`);\n\n      const showRepository = new ShowRepository(this.env.DB);\n      const eventPublisher = new EventPublisher();\n\n      const showId = uuidv4();\n      const now = new Date().toISOString();\n\n      // Download and upload show image if provided\n      let processedImageUrl = validInput.imageUrl;\n      if (validInput.imageUrl && this.env.BUCKET) {\n        try {\n          console.log(`Downloading show image from: ${validInput.imageUrl}`);\n\n          const imageResponse = await fetch(validInput.imageUrl, {\n            headers: {\n              \"User-Agent\": \"Sesamy Podcast Importer/1.0\",\n            },\n            signal: AbortSignal.timeout(15000), // 15 second timeout\n          });\n\n          if (imageResponse.ok) {\n            const imageBuffer = await imageResponse.arrayBuffer();\n            const imageBlob = new Uint8Array(imageBuffer);\n\n            // Generate R2 key for the image\n            const imageFileName = `show-${showId}-${Date.now()}.jpg`;\n            const imageR2Key = `shows/${showId}/${imageFileName}`;\n\n            await this.env.BUCKET.put(imageR2Key, imageBlob, {\n              httpMetadata: {\n                contentType:\n                  imageResponse.headers.get(\"content-type\") || \"image/jpeg\",\n              },\n            });\n\n            processedImageUrl = `r2://${imageR2Key}`;\n            console.log(`Show image uploaded to R2: ${imageR2Key}`);\n          } else {\n            console.warn(\n              `Failed to download show image: ${imageResponse.status}`\n            );\n          }\n        } catch (error) {\n          console.error(\"Failed to download/upload show image:\", error);\n          // Continue with original URL if download fails\n        }\n      }\n\n      // Create the show (use default organization for RSS imports)\n      const show = await showRepository.create({\n        id: showId,\n        organizationId: \"default-org\", // TODO: Get from workflow context\n        title: validInput.title,\n        description: validInput.description,\n        imageUrl: processedImageUrl,\n        language: validInput.language,\n        categories: validInput.categories,\n        author: validInput.author,\n      });\n\n      // Publish event\n      await eventPublisher.publish(\"show.created\", show, show.id);\n\n      const result: CreateShowOutput = {\n        showId: show.id,\n        title: show.title,\n        description: show.description,\n        imageUrl: show.imageUrl,\n        language: show.language || null,\n        categories: show.categories || null,\n        author: show.author || null,\n      };\n\n      console.log(`Successfully created show with ID: ${show.id}`);\n\n      return this.validateOutput(result);\n    } catch (error) {\n      throw new Error(\n        `Failed to create show: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n}\n\n// Schemas for episode processing step\nconst ProcessEpisodeInputSchema = z.object({\n  showId: z.string().uuid(),\n  episode: z.object({\n    title: z.string(),\n    description: z.string(),\n    audioUrl: z.string().url(),\n    imageUrl: z.string().nullable().optional(),\n    publishedAt: z.string().datetime().nullable().optional(),\n    duration: z.number().positive().nullable().optional(),\n    episodeNumber: z.number().int().nonnegative().nullable().optional(),\n    seasonNumber: z.number().int().nonnegative().nullable().optional(),\n    episodeType: z.string().nullable().optional(),\n    author: z.string().nullable().optional(),\n    subtitle: z.string().nullable().optional(),\n    explicit: z.boolean().nullable().optional(),\n    keywords: z.array(z.string()).nullable().optional(),\n  }),\n  skipExisting: z.boolean().optional().default(false),\n});\n\nconst ProcessEpisodeOutputSchema = z.object({\n  episodeId: z.string().uuid(),\n  title: z.string(),\n  status: z.enum([\"created\", \"skipped\"]),\n  audioR2Key: z.string().optional(),\n  audioProcessingTaskId: z.string().optional(),\n});\n\ntype ProcessEpisodeInput = z.infer<typeof ProcessEpisodeInputSchema>;\ntype ProcessEpisodeOutput = z.infer<typeof ProcessEpisodeOutputSchema>;\n\nexport class ProcessEpisodeStep\n  implements WorkflowStep<ProcessEpisodeInput, ProcessEpisodeOutput>\n{\n  constructor(private env: Env) {}\n\n  validateInput(input: unknown): ProcessEpisodeInput {\n    return ProcessEpisodeInputSchema.parse(input);\n  }\n\n  validateOutput(output: unknown): ProcessEpisodeOutput {\n    return ProcessEpisodeOutputSchema.parse(output);\n  }\n\n  async execute(input: ProcessEpisodeInput): Promise<ProcessEpisodeOutput> {\n    const validInput = this.validateInput(input);\n\n    try {\n      console.log(`Processing episode: ${validInput.episode.title}`);\n\n      const episodeRepository = new EpisodeRepository(this.env.DB);\n      const eventPublisher = new EventPublisher();\n\n      const episodeId = uuidv4();\n      const now = new Date().toISOString();\n\n      // Download and upload episode image if provided\n      let processedImageUrl = validInput.episode.imageUrl;\n      if (validInput.episode.imageUrl && this.env.BUCKET) {\n        try {\n          console.log(\n            `Downloading episode image from: ${validInput.episode.imageUrl}`\n          );\n\n          const imageResponse = await fetch(validInput.episode.imageUrl, {\n            headers: {\n              \"User-Agent\": \"Sesamy Podcast Importer/1.0\",\n            },\n            signal: AbortSignal.timeout(15000), // 15 second timeout\n          });\n\n          if (imageResponse.ok) {\n            const imageBuffer = await imageResponse.arrayBuffer();\n            const imageBlob = new Uint8Array(imageBuffer);\n\n            // Generate R2 key for the image\n            const imageFileName = `episode-${episodeId}-${Date.now()}.jpg`;\n            const imageR2Key = `episodes/${validInput.showId}/${imageFileName}`;\n\n            await this.env.BUCKET.put(imageR2Key, imageBlob, {\n              httpMetadata: {\n                contentType:\n                  imageResponse.headers.get(\"content-type\") || \"image/jpeg\",\n              },\n            });\n\n            processedImageUrl = `r2://${imageR2Key}`;\n            console.log(`Episode image uploaded to R2: ${imageR2Key}`);\n          } else {\n            console.warn(\n              `Failed to download episode image: ${imageResponse.status}`\n            );\n          }\n        } catch (error) {\n          console.error(\"Failed to download/upload episode image:\", error);\n          // Continue with original URL if download fails\n        }\n      }\n\n      // Create the episode (use default organization for RSS imports)\n      const episode = await episodeRepository.create(validInput.showId, {\n        id: episodeId,\n        organizationId: \"default-org\", // TODO: Get from workflow context\n        title: validInput.episode.title,\n        description: validInput.episode.description,\n        imageUrl: processedImageUrl,\n        audioUrl: null, // Will be set after audio processing\n        transcriptUrl: null,\n        duration: validInput.episode.duration || null,\n        episodeNumber: validInput.episode.episodeNumber || null,\n        seasonNumber: validInput.episode.seasonNumber || null,\n        episodeType: validInput.episode.episodeType || null,\n        author: validInput.episode.author || null,\n        subtitle: validInput.episode.subtitle || null,\n        explicit: validInput.episode.explicit || null,\n        keywords: validInput.episode.keywords\n          ? JSON.stringify(validInput.episode.keywords)\n          : null,\n      });\n\n      // Publish event\n      await eventPublisher.publish(\"episode.created\", episode, episode.id);\n\n      // Download audio file and upload to R2 storage\n      let audioR2Key: string | undefined;\n      let audioProcessingTaskId: string | undefined;\n\n      try {\n        console.log(`Downloading audio from: ${validInput.episode.audioUrl}`);\n\n        // Download the audio file\n        const audioResponse = await fetch(validInput.episode.audioUrl, {\n          headers: {\n            \"User-Agent\": \"Sesamy Podcast Importer/1.0\",\n          },\n          signal: AbortSignal.timeout(30000), // 30 second timeout\n        });\n\n        if (!audioResponse.ok) {\n          throw new Error(\n            `Failed to download audio: ${audioResponse.status} ${audioResponse.statusText}`\n          );\n        }\n\n        const audioBuffer = await audioResponse.arrayBuffer();\n        const audioBlob = new Uint8Array(audioBuffer);\n\n        // Generate R2 key for the audio file\n        const audioFileName = `episode-${episode.id}-${Date.now()}.mp3`;\n        audioR2Key = `episodes/${validInput.showId}/${audioFileName}`;\n\n        // Upload to R2 storage\n        if (this.env.BUCKET) {\n          await this.env.BUCKET.put(audioR2Key, audioBlob, {\n            httpMetadata: {\n              contentType:\n                audioResponse.headers.get(\"content-type\") || \"audio/mpeg\",\n            },\n          });\n\n          // Update episode with R2 audio URL\n          await episodeRepository.updateByIdOnly(episode.id, {\n            audioUrl: `r2://${audioR2Key}`,\n          });\n\n          console.log(`Audio uploaded to R2: ${audioR2Key}`);\n\n          // Trigger audio processing workflow\n          if (this.env.AUDIO_PROCESSING_WORKFLOW) {\n            try {\n              console.log(\n                `Triggering audio processing workflow for episode ${episode.id}`\n              );\n\n              const audioProcessingParams = {\n                episodeId: episode.id,\n                audioR2Key,\n                chunkDuration: 60,\n                transcriptionLanguage: \"auto\", // Auto-detect language\n              };\n\n              const audioWorkflowInstance =\n                await this.env.AUDIO_PROCESSING_WORKFLOW.create({\n                  params: audioProcessingParams,\n                });\n\n              audioProcessingTaskId = audioWorkflowInstance.id;\n              console.log(\n                `Audio processing workflow started: ${audioWorkflowInstance.id}`\n              );\n            } catch (error) {\n              console.error(\n                `Failed to start audio processing workflow for episode ${episode.id}:`,\n                error\n              );\n            }\n          } else {\n            console.warn(\n              \"AUDIO_PROCESSING_WORKFLOW not available, skipping audio processing\"\n            );\n          }\n        } else {\n          console.warn(\"BUCKET not available, skipping audio upload\");\n        }\n      } catch (error) {\n        console.error(\n          `Failed to download/process audio for episode ${episode.id}:`,\n          error\n        );\n        // Don't fail the entire episode creation, just log the error\n      }\n\n      const result: ProcessEpisodeOutput = {\n        episodeId: episode.id,\n        title: episode.title,\n        status: \"created\" as const,\n        audioR2Key,\n        audioProcessingTaskId,\n      };\n\n      console.log(`Successfully created episode with ID: ${episode.id}`);\n\n      return this.validateOutput(result);\n    } catch (error) {\n      throw new Error(\n        `Failed to process episode: ${\n          error instanceof Error ? error.message : \"Unknown error\"\n        }`\n      );\n    }\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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A,SACA,UACA,QACA,YACA,gBACA,YACA,WACAC,SACA,SACA,MACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,SACA,SACA,QACA,WACA,QACA,YACA,YACA,SACA,cACA,UACA,eACA,WACA,eACA,iBACA,mBACA,oBACA,OACA,kBACA,WACA,4BACA,2BACA,eACA,aACA,cACA,iBACA,UACA,OACA,gBAEI,UA8GC;AAnOP,IAAAC,gBAAA;AAAA;AAAA;AAAA;AAAA,IAAAC;AAAA;AACA;AACA,IAAM,gBAAgB,WAAW,SAAS;AACnC,IAAM,mBAAmB,cAAc;AACvC,KAAM,EAAE,MAAM,UAAU,aAAa;AAAA,MAC1C;AAAA,IACF;AACA,IAAM,eAAe,IAAI,QAAa;AAAA,MACpC,KAAK,cAAc;AAAA,MACnB;AAAA,MACA;AAAA,IACF,CAAC;AACM,KAAM;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAAH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAAC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MA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",
  "names": ["init_performance", "init_performance", "PerformanceMark", "init_performance", "init_performance", "init_performance", "init_performance", "clear", "count", "countReset", "createTask", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeLog", "timeStamp", "trace", "warn", "init_console", "init_performance", "init_console", "init_performance", "hrtime", "init_performance", "init_performance", "dir", "env", "count", "init_performance", "init_performance", "init_performance", "cwd", "hrtime", "assert", "init_process", "init_performance", "init_process", "init_performance", "init_performance", "util", "objectUtil", "init_performance", "error", "init_performance", "message", "init_performance", "init_performance", "m", "init_performance", "init_performance", "errorUtil", "message", "errorMap", "message", "version", "jwt", "b", "p", "p2", "r", "init_performance", "error", "ctx", "result", "issues", "types", "elements", "processed", "ZodFirstPartyTypeKind", "init_performance", "init_performance", "errorHandler", "init_errors", "init_performance", "c", "error", "problem", "title", "message", "init_performance", "init_performance", "message", "config", "p", "table", "init_performance", "init_performance", "table", "config", "name", "table", "init_table", "init_performance", "init_performance", "init_table", "table", "init_performance", "init_performance", "init_table", "config", "table", "init_performance", "table", "init_performance", "init_table", "value", "startFrom", "init_performance", "init_performance", "config", "table", "ref", "actions", "init_performance", "table", "config", "init_performance", "sql", "version", "init_performance", "init_performance", "version", "otel", "rawTracer", "init_performance", "param", "p", "init_performance", "config", "decoder", "encoder", "sql", "raw", "placeholder", "name", "SQL", "c", "init_performance", "init_performance", "init_performance", "relations", "table", "config", "f", "decoder", "init_performance", "table", "c", "init_performance", "init_performance", "config", "init_performance", "name", "InlineForeignKeys", "table", "init_table", "init_performance", "result", "decoder", "table", "init_utils", "init_performance", "init_performance", "init_table", "init_utils", "table", "init_performance", "init_table", "init_utils", "table", "config", "init_errors", "init_performance", "message", "count", "init_performance", "init_performance", "init_performance", "init_sql", "init_performance", "ForeignKeyBuilder", "ForeignKey", "init_foreign_keys", "init_performance", "init_table", "config", "table", "uniqueKeyName", "table", "UniqueConstraintBuilder", "UniqueOnConstraintBuilder", "UniqueConstraint", "init_unique_constraint", "init_performance", "init_table", "init_common", "init_performance", "init_foreign_keys", "init_unique_constraint", "config", "table", "ref", "actions", "ForeignKeyBuilder", "uniqueKeyName", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "config", "config", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "config", "init_performance", "init_common", "table", "init_performance", "init_common", "init_performance", "init_performance", "init_errors", "init_sql", "init_table", "init_utils", "table", "c", "f", "sql", "config", "joinOn", "field", "init_performance", "init_select", "init_performance", "init_utils", "config", "table", "on", "init_query_builder", "init_performance", "init_select", "init_performance", "init_performance", "init_table", "init_utils", "table", "init_performance", "init_query_builder", "init_select", "init_performance", "table", "config", "init_performance", "init_performance", "table", "sql", "config", "init_alias", "init_performance", "init_performance", "table", "init_performance", "table", "config", "PrimaryKeyBuilder", "PrimaryKey", "init_primary_keys", "init_performance", "init_table", "table", "init_performance", "init_errors", "init_subquery", "init_performance", "init_view_common", "init_performance", "init_utils", "init_performance", "init_performance", "init_utils", "init_query_builder", "init_table", "init_view_common", "config", "init_performance", "init_alias", "init_foreign_keys", "init_primary_keys", "init_subquery", "init_table", "init_unique_constraint", "init_utils", "init_session", "init_performance", "init_utils", "builtQuery", "config", "logger", "config", "logger", "init_performance", "init_session", "init_performance", "init_session", "init_expressions", "init_performance", "init_performance", "init_performance", "init_errors", "init_expressions", "init_sql", "init_utils", "init_alias", "init_performance", "CheckBuilder", "Check", "init_checks", "init_performance", "table", "name", "InlineForeignKeys", "table", "init_table", "init_performance", "ForeignKeyBuilder", "ForeignKey", "init_foreign_keys", "init_performance", "init_table", "config", "table", "uniqueKeyName", "table", "UniqueConstraintBuilder", "UniqueOnConstraintBuilder", "UniqueConstraint", "init_unique_constraint", "init_performance", "init_table", "init_common", "init_performance", "init_foreign_keys", "init_unique_constraint", "config", "table", "ref", "actions", "ForeignKeyBuilder", "uniqueKeyName", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "config", "table", "init_custom", "init_performance", "init_common", "table", "config", "init_performance", "init_common", "table", "config", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "config", "table", "init_enum", "init_performance", "init_common", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "config", "table", "init_real", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "table", "init_performance", "init_common", "config", "table", "init_text", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "init_performance", "config", "table", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "config", "table", "init_performance", "init_common", "table", "init_columns", "init_performance", "init_common", "init_custom", "init_enum", "init_real", "init_text", "init_delete", "init_performance", "table", "init_insert", "init_performance", "init_utils", "table", "config", "sql", "init_view_base", "init_performance", "init_dialect", "init_performance", "init_errors", "init_expressions", "init_utils", "init_common", "init_table", "init_view_base", "config", "table", "c", "f", "sql", "joinOn", "field", "createSetOperator", "union", "unionAll", "intersect", "except", "init_select", "init_performance", "init_utils", "init_view_base", "config", "table", "on", "QueryBuilder", "init_query_builder", "init_performance", "init_dialect", "init_select", "init_select_types", "init_performance", "init_update", "init_performance", "init_utils", "table", "init_query_builders", "init_performance", "init_delete", "init_insert", "init_query_builder", "init_select", "init_select_types", "init_update", "RelationalQueryBuilder", "init_query", "init_performance", "table", "config", "init_db", "init_performance", "init_query_builders", "init_query", "RelationalQueryBuilder", "QueryBuilder", "table", "config", "IndexBuilderOn", "IndexBuilder", "Index", "init_indexes", "init_performance", "table", "config", "PrimaryKeyBuilder", "PrimaryKey", "init_primary_keys", "init_performance", "init_table", "table", "init_view_common", "init_performance", "ManualViewBuilder", "ViewBuilder", "ViewBuilderCore", "init_view", "init_performance", "init_utils", "init_query_builder", "init_table", "init_view_base", "init_view_common", "QueryBuilder", "config", "init_performance", "init_table", "init_view", "init_session", "init_performance", "init_errors", "init_db", "config", "init_subquery", "init_performance", "init_utils", "init_performance", "init_performance", "init_alias", "init_checks", "init_columns", "init_db", "init_dialect", "init_foreign_keys", "init_indexes", "init_primary_keys", "init_query_builders", "init_session", "init_subquery", "init_table", "init_unique_constraint", "init_utils", "init_view_common", "init_view", "init_alias", "init_performance", "CheckBuilder", "Check", "init_checks", "init_performance", "table", "init_performance", "init_bigint", "init_performance", "table", "init_performance", "table", "init_boolean", "init_performance", "table", "init_char", "init_performance", "config", "table", "init_performance", "table", "init_custom", "init_performance", "table", "config", "init_date_common", "init_performance", "init_date", "init_performance", "init_date_common", "table", "init_performance", "table", "init_performance", "table", "init_integer", "init_performance", "table", "init_performance", "table", "init_json", "init_performance", "table", "config", "init_performance", "table", "config", "init_performance", "table", "b", "c", "init_performance", "table", "init_performance", "table", "init_numeric", "init_performance", "table", "config", "init_performance", "table", "c", "init_utils", "init_performance", "init_performance", "init_utils", "table", "init_real", "init_performance", "table", "config", "init_serial", "init_performance", "table", "init_smallint", "init_performance", "table", "init_performance", "table", "init_text", "init_performance", "config", "table", "init_time", "init_performance", "init_date_common", "table", "config", "init_timestamp", "init_performance", "init_date_common", "table", "config", "init_performance", "table", "init_varchar", "init_performance", "config", "table", "init_performance", "config", "table", "init_performance", "config", "table", "init_performance", "config", "table", "init_vector", "init_performance", "config", "table", "init_columns", "init_performance", "init_bigint", "init_boolean", "init_char", "init_custom", "init_date", "init_integer", "init_json", "init_numeric", "init_real", "init_serial", "init_smallint", "init_text", "init_time", "init_timestamp", "init_varchar", "init_vector", "init_delete", "init_performance", "init_utils", "table", "init_insert", "init_performance", "init_utils", "table", "config", "init_view_base", "init_performance", "init_dialect", "init_performance", "init_errors", "init_columns", "init_table", "init_sql", "init_utils", "init_view_base", "config", "table", "c", "f", "encoder", "sql", "joinOn", "field", "createSetOperator", "union", "unionAll", "intersect", "intersectAll", "except", "exceptAll", "init_select", "init_performance", "init_view_base", "init_utils", "config", "table", "on", "QueryBuilder", "init_query_builder", "init_performance", "init_dialect", "init_select", "on", "init_performance", "init_select_types", "init_performance", "init_update", "init_performance", "init_utils", "table", "init_query_builders", "init_performance", "init_delete", "init_insert", "init_query_builder", "init_select", "init_select_types", "init_update", "RelationalQueryBuilder", "init_query", "init_performance", "table", "config", "init_raw", "init_performance", "sql", "init_db", "init_performance", "init_query_builders", "init_query", "init_raw", "RelationalQueryBuilder", "QueryBuilder", "on", "table", "sql", "config", "IndexBuilderOn", "IndexBuilder", "Index", "init_indexes", "init_performance", "init_columns", "table", "config", "init_performance", "init_view_common", "init_performance", "ManualViewBuilder", "ViewBuilder", "init_view", "init_performance", "init_utils", "init_query_builder", "init_table", "init_view_base", "init_view_common", "config", "QueryBuilder", "init_schema", "init_performance", "init_table", "init_view", "init_session", "init_performance", "init_errors", "init_sql", "init_db", "config", "init_subquery", "init_performance", "init_utils", "init_performance", "init_utils", "init_performance", "init_performance", "init_alias", "init_checks", "init_columns", "init_db", "init_dialect", "init_indexes", "init_query_builders", "init_schema", "init_session", "init_subquery", "init_table", "init_utils", "init_view_common", "init_view", "createInsertSchema", "table", "refine", "columns", "getTableColumns", "columnEntries", "Object", "entries", "schemaEntries", "fromEntries", "map", "name", "column", "mapColumnToSchema", "assign", "refineColumn", "notNull", "hasDefault", "optional", "nullable", "z", "object", "createSelectSchema", "type", "Array", "isArray", "enumValues", "length", "enum", "string", "is", "PgUUID", "uuid", "dataType", "any", "jsonSchema", "array", "baseColumn", "number", "bigint", "boolean", "date", "sType", "PgChar", "PgVarchar", "MySqlVarChar", "MySqlVarBinary", "MySqlChar", "SQLiteText", "max", "literalSchema", "union", "null", "lazy", "record", "init_schema", "init_performance", "init_performance", "init_schema", "init_performance", "init_schema", "error", "init_repository", "init_performance", "init_schema", "error", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_repository", "error", "message", "service_exports", "init_service", "init_performance", "error", "message", "init_types", "init_performance", "repository_exports", "init_repository", "init_performance", "init_schema", "init_errors", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "p", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "_a", "message", "error", "referencedSchema", "config", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "decoder", "c", "init_performance", "init_performance", "c", "message", "c", "init_performance", "init_performance", "init_performance", "init_performance", "middleware", "context", "init_performance", "init_performance", "init_performance", "init_performance", "raw", "text", "init_performance", "context", "c", "text", "html", "html2", "init_performance", "init_performance", "c", "p", "m", "clone", "env", "context", "init_performance", "init_performance", "init_performance", "b", "context", "c", "init_performance", "m", "middleware", "b", "p", "m", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "Node", "m", "p", "b", "Node", "Hono", "Hono", "validator", "c", "middleware", "config", "init_performance", "init_performance", "version", "c", "init_performance", "c", "init_performance", "init_performance", "process", "Deno", "navigator", "time", "log", "c", "init_errors", "init_performance", "init_performance", "middleware", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "m", "init_performance", "init_performance", "init_performance", "platform", "init_performance", "init_performance", "p", "verifyWithJwks", "verify", "decode", "sign", "error", "c", "decode", "verify", "permission", "init_performance", "db", "c", "error", "init_performance", "init_performance", "init_errors", "init_service", "init_performance", "message", "p", "title", "episodes", "author", "itunesCategories", "RSSShowSchema", "error", "error", "c", "shows", "problem", "init_performance", "init_performance", "ShowParamsSchema", "PaginationSchema", "ImageUploadSchema", "init_errors", "error", "ShowParamsSchema", "PaginationSchema", "ImageUploadSchema", "c", "episodes", "problem", "init_performance", "init_performance", "init_errors", "c", "error", "init_performance", "episodes", "c", "init_performance", "init_service", "init_errors", "c", "tasks", "error", "init_performance", "error", "c", "env", "b", "init_performance", "init_performance", "env", "message", "env", "storage", "Hono", "c", "isValid", "error", "init_performance", "init_performance", "PaginationSchema", "AudioUploadSchema", "init_errors", "error", "PaginationSchema", "c", "creatives", "shows", "init_performance", "c", "organizations", "error", "init_performance", "init_repository", "init_performance", "init_performance", "init_schema", "init_errors", "init_performance", "init_performance", "init_performance", "init_schema", "init_errors", "init_errors", "init_performance", "init_performance", "init_performance", "p", "c", "match", "error", "error", "ShowRepository", "TaskService", "init_performance", "init_schema", "error", "init_service", "init_performance", "init_schema", "init_errors", "count", "init_performance", "init_errors", "init_performance", "init_errors", "error", "init_performance", "init_schema", "db", "error", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "raw", "middleware", "error", "_a", "context", "config", "domain", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "BaseAPI", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "isCryptoKey", "encoder", "encodeBase64", "encoder", "decodeBase64", "decode", "_a", "init_performance", "message", "_a", "init_performance", "hash", "init_performance", "types", "init_performance", "isCryptoKey", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "getNamedCurve", "_a", "c", "init_performance", "parse", "_a", "decode", "_a", "decode", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "init_performance", "hash", "init_performance", "isCryptoKey", "verify", "_a", "_a", "decode", "encoder", "init_performance", "init_performance", "init_performance", "init_performance", "_a", "jwt", "_a", "init_performance", "init_performance", "init_performance", "sign", "encoder", "init_performance", "init_performance", "_a", "encoder", "init_performance", "jwk", "error", "_a", "init_performance", "init_performance", "_a", "init_performance", "decode", "encode", "init_performance", "encode", "decode", "decode", "_a", "init_performance", "jwt", "decode", "_a", "domain", "init_performance", "init_performance", "init_performance", "version", "_a", "version", "context", "error", "domain", "init_performance", "init_performance", "init_performance", "domain", "SUBJECT_TOKEN_TYPES", "init_performance", "init_performance", "TOKEN_URL", "_a", "context", "error", "parseError", "domain", "organizations", "error", "errorHandler", "c", "init_performance", "init_service", "error", "init_performance", "init_performance", "init_performance", "init_performance", "error", "storage", "exitCode", "env", "time", "err", "init_performance", "error", "init_performance", "init_performance", "init_performance", "env", "init_performance", "env", "init_performance", "init_service", "env", "message", "error", "init_performance", "env", "init_performance", "env", "error", "init_performance", "error", "env", "init_performance", "message", "TaskService", "error", "TaskRepository", "WorkflowService", "init_performance", "init_types", "WorkflowEntrypoint", "init_performance", "init_repository", "env", "error", "WorkflowEntrypoint", "message", "TaskService", "TaskRepository", "error", "episodes", "env", "message", "error", "init_performance", "env", "init_performance", "env", "middleware", "env"]
}
