name = "podcast-service"
main = "dist/worker.js"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

# Environment variables (set these in Cloudflare dashboard or use wrangler secret)
[vars]
NODE_ENV = "development"
PORT = "8787"
R2_ENDPOINT = "https://podcast-media.sesamy.dev"
SERVICE_BASE_URL = "https://podcast-service.sesamy-dev.workers.dev"

# Secrets to be set with: wrangler secret put <name>
# - DATABASE_URL (for production Turso database)
# - R2_ACCESS_KEY_ID (for R2 pre-signed URLs)
# - R2_SECRET_ACCESS_KEY (for R2 pre-signed URLs)
# R2_ENDPOINT is set above as environment variable for custom domain

# D1 Database binding
[[d1_databases]]
binding = "DB"
database_name = "podcast-service-db"
database_id = "a27b543a-696d-4726-9329-2a15578ac861"
migrations_dir = "./drizzle"

# R2 Storage binding
[[r2_buckets]]
binding = "BUCKET"
bucket_name = "podcast-service-assets"
preview_bucket_name = "podcast-service-assets"

# Workers AI binding
[ai]
binding = "AI"

# Queue bindings for background task processing
[[queues.producers]]
binding = "TASK_QUEUE"
queue = "podcast-tasks"

[[queues.consumers]]
queue = "podcast-tasks"

# Container configuration for encoding service
[[containers]]
class_name = "EncodingContainer"
image = "./Dockerfile.encoding"
max_instances = 10
instance_type = "standard"  # Use the largest available instance type for better performance

# Workflow configuration
[[workflows]]
name = "audio-processing-workflow"
binding = "AUDIO_PROCESSING_WORKFLOW"
class_name = "AudioProcessingWorkflow"

[[workflows]]
name = "import-show-workflow"
binding = "IMPORT_SHOW_WORKFLOW" 
class_name = "ImportShowWorkflow"

# Durable Objects bindings
[[durable_objects.bindings]]
class_name = "EncodingContainer"
name = "ENCODING_CONTAINER"

# Durable Objects migrations
[[migrations]]
new_sqlite_classes = ["EncodingContainer"]
tag = "v1"

# Cron triggers for background task processing
[triggers]
crons = ["*/5 * * * *"]  # Run every 5 minutes

[build]
command = "tsc -p tsconfig.worker.json"

# Development configuration
[env.development]
vars = { NODE_ENV = "development" }

# Production configuration  
[env.production]
vars = { NODE_ENV = "production" }

# Limits
[limits]
cpu_ms = 300000  # 5 minutes CPU time for intensive audio processing

# Observability - Enable logging and analytics
[observability]
enabled = true

# Enable tail logs for development
[dev]
inspector_port = 9229
local_protocol = "https"
upstream_protocol = "https"
